// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GatingSet.proto

#ifndef PROTOBUF_INCLUDED_GatingSet_2eproto
#define PROTOBUF_INCLUDED_GatingSet_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_GatingSet_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_GatingSet_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[31]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
namespace pb {
class BOOL_GATE_OP;
class BOOL_GATE_OPDefaultTypeInternal;
extern BOOL_GATE_OPDefaultTypeInternal _BOOL_GATE_OP_default_instance_;
class COMP;
class COMPDefaultTypeInternal;
extern COMPDefaultTypeInternal _COMP_default_instance_;
class CytoFrame;
class CytoFrameDefaultTypeInternal;
extern CytoFrameDefaultTypeInternal _CytoFrame_default_instance_;
class GatingHierarchy;
class GatingHierarchyDefaultTypeInternal;
extern GatingHierarchyDefaultTypeInternal _GatingHierarchy_default_instance_;
class GatingSet;
class GatingSetDefaultTypeInternal;
extern GatingSetDefaultTypeInternal _GatingSet_default_instance_;
class PARAM;
class PARAMDefaultTypeInternal;
extern PARAMDefaultTypeInternal _PARAM_default_instance_;
class POPINDICES;
class POPINDICESDefaultTypeInternal;
extern POPINDICESDefaultTypeInternal _POPINDICES_default_instance_;
class POPSTATS;
class POPSTATSDefaultTypeInternal;
extern POPSTATSDefaultTypeInternal _POPSTATS_default_instance_;
class TRANS_TBL;
class TRANS_TBLDefaultTypeInternal;
extern TRANS_TBLDefaultTypeInternal _TRANS_TBL_default_instance_;
class biexpTrans;
class biexpTransDefaultTypeInternal;
extern biexpTransDefaultTypeInternal _biexpTrans_default_instance_;
class boolGate;
class boolGateDefaultTypeInternal;
extern boolGateDefaultTypeInternal _boolGate_default_instance_;
class calibrationTable;
class calibrationTableDefaultTypeInternal;
extern calibrationTableDefaultTypeInternal _calibrationTable_default_instance_;
class clusterGate;
class clusterGateDefaultTypeInternal;
extern clusterGateDefaultTypeInternal _clusterGate_default_instance_;
class coordinate;
class coordinateDefaultTypeInternal;
extern coordinateDefaultTypeInternal _coordinate_default_instance_;
class ellipseGate;
class ellipseGateDefaultTypeInternal;
extern ellipseGateDefaultTypeInternal _ellipseGate_default_instance_;
class fasinhTrans;
class fasinhTransDefaultTypeInternal;
extern fasinhTransDefaultTypeInternal _fasinhTrans_default_instance_;
class flinTrans;
class flinTransDefaultTypeInternal;
extern flinTransDefaultTypeInternal _flinTrans_default_instance_;
class gate;
class gateDefaultTypeInternal;
extern gateDefaultTypeInternal _gate_default_instance_;
class logTrans;
class logTransDefaultTypeInternal;
extern logTransDefaultTypeInternal _logTrans_default_instance_;
class logicleTrans;
class logicleTransDefaultTypeInternal;
extern logicleTransDefaultTypeInternal _logicleTrans_default_instance_;
class nodeProperties;
class nodePropertiesDefaultTypeInternal;
extern nodePropertiesDefaultTypeInternal _nodeProperties_default_instance_;
class paramPoly;
class paramPolyDefaultTypeInternal;
extern paramPolyDefaultTypeInternal _paramPoly_default_instance_;
class paramRange;
class paramRangeDefaultTypeInternal;
extern paramRangeDefaultTypeInternal _paramRange_default_instance_;
class polygonGate;
class polygonGateDefaultTypeInternal;
extern polygonGateDefaultTypeInternal _polygonGate_default_instance_;
class populationTree;
class populationTreeDefaultTypeInternal;
extern populationTreeDefaultTypeInternal _populationTree_default_instance_;
class rangeGate;
class rangeGateDefaultTypeInternal;
extern rangeGateDefaultTypeInternal _rangeGate_default_instance_;
class scaleTrans;
class scaleTransDefaultTypeInternal;
extern scaleTransDefaultTypeInternal _scaleTrans_default_instance_;
class trans_local;
class trans_localDefaultTypeInternal;
extern trans_localDefaultTypeInternal _trans_local_default_instance_;
class trans_pair;
class trans_pairDefaultTypeInternal;
extern trans_pairDefaultTypeInternal _trans_pair_default_instance_;
class transformation;
class transformationDefaultTypeInternal;
extern transformationDefaultTypeInternal _transformation_default_instance_;
class treeNodes;
class treeNodesDefaultTypeInternal;
extern treeNodesDefaultTypeInternal _treeNodes_default_instance_;
}  // namespace pb
namespace google {
namespace protobuf {
template<> ::pb::BOOL_GATE_OP* Arena::CreateMaybeMessage<::pb::BOOL_GATE_OP>(Arena*);
template<> ::pb::COMP* Arena::CreateMaybeMessage<::pb::COMP>(Arena*);
template<> ::pb::CytoFrame* Arena::CreateMaybeMessage<::pb::CytoFrame>(Arena*);
template<> ::pb::GatingHierarchy* Arena::CreateMaybeMessage<::pb::GatingHierarchy>(Arena*);
template<> ::pb::GatingSet* Arena::CreateMaybeMessage<::pb::GatingSet>(Arena*);
template<> ::pb::PARAM* Arena::CreateMaybeMessage<::pb::PARAM>(Arena*);
template<> ::pb::POPINDICES* Arena::CreateMaybeMessage<::pb::POPINDICES>(Arena*);
template<> ::pb::POPSTATS* Arena::CreateMaybeMessage<::pb::POPSTATS>(Arena*);
template<> ::pb::TRANS_TBL* Arena::CreateMaybeMessage<::pb::TRANS_TBL>(Arena*);
template<> ::pb::biexpTrans* Arena::CreateMaybeMessage<::pb::biexpTrans>(Arena*);
template<> ::pb::boolGate* Arena::CreateMaybeMessage<::pb::boolGate>(Arena*);
template<> ::pb::calibrationTable* Arena::CreateMaybeMessage<::pb::calibrationTable>(Arena*);
template<> ::pb::clusterGate* Arena::CreateMaybeMessage<::pb::clusterGate>(Arena*);
template<> ::pb::coordinate* Arena::CreateMaybeMessage<::pb::coordinate>(Arena*);
template<> ::pb::ellipseGate* Arena::CreateMaybeMessage<::pb::ellipseGate>(Arena*);
template<> ::pb::fasinhTrans* Arena::CreateMaybeMessage<::pb::fasinhTrans>(Arena*);
template<> ::pb::flinTrans* Arena::CreateMaybeMessage<::pb::flinTrans>(Arena*);
template<> ::pb::gate* Arena::CreateMaybeMessage<::pb::gate>(Arena*);
template<> ::pb::logTrans* Arena::CreateMaybeMessage<::pb::logTrans>(Arena*);
template<> ::pb::logicleTrans* Arena::CreateMaybeMessage<::pb::logicleTrans>(Arena*);
template<> ::pb::nodeProperties* Arena::CreateMaybeMessage<::pb::nodeProperties>(Arena*);
template<> ::pb::paramPoly* Arena::CreateMaybeMessage<::pb::paramPoly>(Arena*);
template<> ::pb::paramRange* Arena::CreateMaybeMessage<::pb::paramRange>(Arena*);
template<> ::pb::polygonGate* Arena::CreateMaybeMessage<::pb::polygonGate>(Arena*);
template<> ::pb::populationTree* Arena::CreateMaybeMessage<::pb::populationTree>(Arena*);
template<> ::pb::rangeGate* Arena::CreateMaybeMessage<::pb::rangeGate>(Arena*);
template<> ::pb::scaleTrans* Arena::CreateMaybeMessage<::pb::scaleTrans>(Arena*);
template<> ::pb::trans_local* Arena::CreateMaybeMessage<::pb::trans_local>(Arena*);
template<> ::pb::trans_pair* Arena::CreateMaybeMessage<::pb::trans_pair>(Arena*);
template<> ::pb::transformation* Arena::CreateMaybeMessage<::pb::transformation>(Arena*);
template<> ::pb::treeNodes* Arena::CreateMaybeMessage<::pb::treeNodes>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace pb {

enum GATE_TYPE {
  POLYGON_GATE = 1,
  RANGE_GATE = 2,
  BOOL_GATE = 3,
  ELLIPSE_GATE = 4,
  RECT_GATE = 5,
  LOGICAL_GATE = 6,
  ELLIPSOID_GATE = 7,
  CLUSTER_GATE = 8
};
bool GATE_TYPE_IsValid(int value);
const GATE_TYPE GATE_TYPE_MIN = POLYGON_GATE;
const GATE_TYPE GATE_TYPE_MAX = CLUSTER_GATE;
const int GATE_TYPE_ARRAYSIZE = GATE_TYPE_MAX + 1;

enum ind_type {
  BOOL = 0,
  INT = 1,
  ROOT = 2
};
bool ind_type_IsValid(int value);
const ind_type ind_type_MIN = BOOL;
const ind_type ind_type_MAX = ROOT;
const int ind_type_ARRAYSIZE = ind_type_MAX + 1;

enum TRANS_TYPE {
  PB_CALTBL = 0,
  PB_LOG = 1,
  PB_LIN = 2,
  PB_FLIN = 3,
  PB_FASIGNH = 4,
  PB_BIEXP = 5,
  PB_LOGICLE = 6
};
bool TRANS_TYPE_IsValid(int value);
const TRANS_TYPE TRANS_TYPE_MIN = PB_CALTBL;
const TRANS_TYPE TRANS_TYPE_MAX = PB_LOGICLE;
const int TRANS_TYPE_ARRAYSIZE = TRANS_TYPE_MAX + 1;

// ===================================================================

class paramRange final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.paramRange) */ {
 public:
  paramRange();
  virtual ~paramRange();

  paramRange(const paramRange& from);

  inline paramRange& operator=(const paramRange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  paramRange(paramRange&& from) noexcept
    : paramRange() {
    *this = ::std::move(from);
  }

  inline paramRange& operator=(paramRange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const paramRange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const paramRange* internal_default_instance() {
    return reinterpret_cast<const paramRange*>(
               &_paramRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(paramRange* other);
  friend void swap(paramRange& a, paramRange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline paramRange* New() const final {
    return CreateMaybeMessage<paramRange>(nullptr);
  }

  paramRange* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<paramRange>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const paramRange& from);
  void MergeFrom(const paramRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(paramRange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required float min = 2;
  bool has_min() const;
  void clear_min();
  static const int kMinFieldNumber = 2;
  float min() const;
  void set_min(float value);

  // required float max = 3;
  bool has_max() const;
  void clear_max();
  static const int kMaxFieldNumber = 3;
  float max() const;
  void set_max(float value);

  // @@protoc_insertion_point(class_scope:pb.paramRange)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  float min_;
  float max_;
  friend struct ::TableStruct_GatingSet_2eproto;
};
// -------------------------------------------------------------------

class rangeGate final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.rangeGate) */ {
 public:
  rangeGate();
  virtual ~rangeGate();

  rangeGate(const rangeGate& from);

  inline rangeGate& operator=(const rangeGate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rangeGate(rangeGate&& from) noexcept
    : rangeGate() {
    *this = ::std::move(from);
  }

  inline rangeGate& operator=(rangeGate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const rangeGate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const rangeGate* internal_default_instance() {
    return reinterpret_cast<const rangeGate*>(
               &_rangeGate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(rangeGate* other);
  friend void swap(rangeGate& a, rangeGate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rangeGate* New() const final {
    return CreateMaybeMessage<rangeGate>(nullptr);
  }

  rangeGate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<rangeGate>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const rangeGate& from);
  void MergeFrom(const rangeGate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(rangeGate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pb.paramRange param = 1;
  bool has_param() const;
  void clear_param();
  static const int kParamFieldNumber = 1;
  const ::pb::paramRange& param() const;
  ::pb::paramRange* release_param();
  ::pb::paramRange* mutable_param();
  void set_allocated_param(::pb::paramRange* param);

  // @@protoc_insertion_point(class_scope:pb.rangeGate)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::pb::paramRange* param_;
  friend struct ::TableStruct_GatingSet_2eproto;
};
// -------------------------------------------------------------------

class paramPoly final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.paramPoly) */ {
 public:
  paramPoly();
  virtual ~paramPoly();

  paramPoly(const paramPoly& from);

  inline paramPoly& operator=(const paramPoly& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  paramPoly(paramPoly&& from) noexcept
    : paramPoly() {
    *this = ::std::move(from);
  }

  inline paramPoly& operator=(paramPoly&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const paramPoly& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const paramPoly* internal_default_instance() {
    return reinterpret_cast<const paramPoly*>(
               &_paramPoly_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(paramPoly* other);
  friend void swap(paramPoly& a, paramPoly& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline paramPoly* New() const final {
    return CreateMaybeMessage<paramPoly>(nullptr);
  }

  paramPoly* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<paramPoly>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const paramPoly& from);
  void MergeFrom(const paramPoly& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(paramPoly* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string params = 1;
  int params_size() const;
  void clear_params();
  static const int kParamsFieldNumber = 1;
  const ::std::string& params(int index) const;
  ::std::string* mutable_params(int index);
  void set_params(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_params(int index, ::std::string&& value);
  #endif
  void set_params(int index, const char* value);
  void set_params(int index, const char* value, size_t size);
  ::std::string* add_params();
  void add_params(const ::std::string& value);
  #if LANG_CXX11
  void add_params(::std::string&& value);
  #endif
  void add_params(const char* value);
  void add_params(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& params() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_params();

  // repeated .pb.coordinate vertices = 2;
  int vertices_size() const;
  void clear_vertices();
  static const int kVerticesFieldNumber = 2;
  ::pb::coordinate* mutable_vertices(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::coordinate >*
      mutable_vertices();
  const ::pb::coordinate& vertices(int index) const;
  ::pb::coordinate* add_vertices();
  const ::google::protobuf::RepeatedPtrField< ::pb::coordinate >&
      vertices() const;

  // @@protoc_insertion_point(class_scope:pb.paramPoly)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField<::std::string> params_;
  ::google::protobuf::RepeatedPtrField< ::pb::coordinate > vertices_;
  friend struct ::TableStruct_GatingSet_2eproto;
};
// -------------------------------------------------------------------

class polygonGate final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.polygonGate) */ {
 public:
  polygonGate();
  virtual ~polygonGate();

  polygonGate(const polygonGate& from);

  inline polygonGate& operator=(const polygonGate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  polygonGate(polygonGate&& from) noexcept
    : polygonGate() {
    *this = ::std::move(from);
  }

  inline polygonGate& operator=(polygonGate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const polygonGate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const polygonGate* internal_default_instance() {
    return reinterpret_cast<const polygonGate*>(
               &_polygonGate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(polygonGate* other);
  friend void swap(polygonGate& a, polygonGate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline polygonGate* New() const final {
    return CreateMaybeMessage<polygonGate>(nullptr);
  }

  polygonGate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<polygonGate>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const polygonGate& from);
  void MergeFrom(const polygonGate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(polygonGate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pb.paramPoly param = 1;
  bool has_param() const;
  void clear_param();
  static const int kParamFieldNumber = 1;
  const ::pb::paramPoly& param() const;
  ::pb::paramPoly* release_param();
  ::pb::paramPoly* mutable_param();
  void set_allocated_param(::pb::paramPoly* param);

  // @@protoc_insertion_point(class_scope:pb.polygonGate)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::pb::paramPoly* param_;
  friend struct ::TableStruct_GatingSet_2eproto;
};
// -------------------------------------------------------------------

class coordinate final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.coordinate) */ {
 public:
  coordinate();
  virtual ~coordinate();

  coordinate(const coordinate& from);

  inline coordinate& operator=(const coordinate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  coordinate(coordinate&& from) noexcept
    : coordinate() {
    *this = ::std::move(from);
  }

  inline coordinate& operator=(coordinate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const coordinate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const coordinate* internal_default_instance() {
    return reinterpret_cast<const coordinate*>(
               &_coordinate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(coordinate* other);
  friend void swap(coordinate& a, coordinate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline coordinate* New() const final {
    return CreateMaybeMessage<coordinate>(nullptr);
  }

  coordinate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<coordinate>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const coordinate& from);
  void MergeFrom(const coordinate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(coordinate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // required float y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // @@protoc_insertion_point(class_scope:pb.coordinate)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  friend struct ::TableStruct_GatingSet_2eproto;
};
// -------------------------------------------------------------------

class ellipseGate final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.ellipseGate) */ {
 public:
  ellipseGate();
  virtual ~ellipseGate();

  ellipseGate(const ellipseGate& from);

  inline ellipseGate& operator=(const ellipseGate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ellipseGate(ellipseGate&& from) noexcept
    : ellipseGate() {
    *this = ::std::move(from);
  }

  inline ellipseGate& operator=(ellipseGate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ellipseGate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ellipseGate* internal_default_instance() {
    return reinterpret_cast<const ellipseGate*>(
               &_ellipseGate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ellipseGate* other);
  friend void swap(ellipseGate& a, ellipseGate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ellipseGate* New() const final {
    return CreateMaybeMessage<ellipseGate>(nullptr);
  }

  ellipseGate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ellipseGate>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ellipseGate& from);
  void MergeFrom(const ellipseGate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ellipseGate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.coordinate cov = 2;
  int cov_size() const;
  void clear_cov();
  static const int kCovFieldNumber = 2;
  ::pb::coordinate* mutable_cov(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::coordinate >*
      mutable_cov();
  const ::pb::coordinate& cov(int index) const;
  ::pb::coordinate* add_cov();
  const ::google::protobuf::RepeatedPtrField< ::pb::coordinate >&
      cov() const;

  // repeated .pb.coordinate antipodal_vertices = 3;
  int antipodal_vertices_size() const;
  void clear_antipodal_vertices();
  static const int kAntipodalVerticesFieldNumber = 3;
  ::pb::coordinate* mutable_antipodal_vertices(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::coordinate >*
      mutable_antipodal_vertices();
  const ::pb::coordinate& antipodal_vertices(int index) const;
  ::pb::coordinate* add_antipodal_vertices();
  const ::google::protobuf::RepeatedPtrField< ::pb::coordinate >&
      antipodal_vertices() const;

  // required .pb.coordinate mu = 1;
  bool has_mu() const;
  void clear_mu();
  static const int kMuFieldNumber = 1;
  const ::pb::coordinate& mu() const;
  ::pb::coordinate* release_mu();
  ::pb::coordinate* mutable_mu();
  void set_allocated_mu(::pb::coordinate* mu);

  // optional float dist = 4;
  bool has_dist() const;
  void clear_dist();
  static const int kDistFieldNumber = 4;
  float dist() const;
  void set_dist(float value);

  // @@protoc_insertion_point(class_scope:pb.ellipseGate)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::coordinate > cov_;
  ::google::protobuf::RepeatedPtrField< ::pb::coordinate > antipodal_vertices_;
  ::pb::coordinate* mu_;
  float dist_;
  friend struct ::TableStruct_GatingSet_2eproto;
};
// -------------------------------------------------------------------

class BOOL_GATE_OP final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.BOOL_GATE_OP) */ {
 public:
  BOOL_GATE_OP();
  virtual ~BOOL_GATE_OP();

  BOOL_GATE_OP(const BOOL_GATE_OP& from);

  inline BOOL_GATE_OP& operator=(const BOOL_GATE_OP& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BOOL_GATE_OP(BOOL_GATE_OP&& from) noexcept
    : BOOL_GATE_OP() {
    *this = ::std::move(from);
  }

  inline BOOL_GATE_OP& operator=(BOOL_GATE_OP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BOOL_GATE_OP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BOOL_GATE_OP* internal_default_instance() {
    return reinterpret_cast<const BOOL_GATE_OP*>(
               &_BOOL_GATE_OP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(BOOL_GATE_OP* other);
  friend void swap(BOOL_GATE_OP& a, BOOL_GATE_OP& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BOOL_GATE_OP* New() const final {
    return CreateMaybeMessage<BOOL_GATE_OP>(nullptr);
  }

  BOOL_GATE_OP* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BOOL_GATE_OP>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const BOOL_GATE_OP& from);
  void MergeFrom(const BOOL_GATE_OP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BOOL_GATE_OP* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string path = 1;
  int path_size() const;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path(int index) const;
  ::std::string* mutable_path(int index);
  void set_path(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_path(int index, ::std::string&& value);
  #endif
  void set_path(int index, const char* value);
  void set_path(int index, const char* value, size_t size);
  ::std::string* add_path();
  void add_path(const ::std::string& value);
  #if LANG_CXX11
  void add_path(::std::string&& value);
  #endif
  void add_path(const char* value);
  void add_path(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& path() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_path();

  // required uint32 op = 2;
  bool has_op() const;
  void clear_op();
  static const int kOpFieldNumber = 2;
  ::google::protobuf::uint32 op() const;
  void set_op(::google::protobuf::uint32 value);

  // required bool isNot = 3;
  bool has_isnot() const;
  void clear_isnot();
  static const int kIsNotFieldNumber = 3;
  bool isnot() const;
  void set_isnot(bool value);

  // @@protoc_insertion_point(class_scope:pb.BOOL_GATE_OP)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField<::std::string> path_;
  ::google::protobuf::uint32 op_;
  bool isnot_;
  friend struct ::TableStruct_GatingSet_2eproto;
};
// -------------------------------------------------------------------

class boolGate final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.boolGate) */ {
 public:
  boolGate();
  virtual ~boolGate();

  boolGate(const boolGate& from);

  inline boolGate& operator=(const boolGate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  boolGate(boolGate&& from) noexcept
    : boolGate() {
    *this = ::std::move(from);
  }

  inline boolGate& operator=(boolGate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const boolGate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const boolGate* internal_default_instance() {
    return reinterpret_cast<const boolGate*>(
               &_boolGate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(boolGate* other);
  friend void swap(boolGate& a, boolGate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline boolGate* New() const final {
    return CreateMaybeMessage<boolGate>(nullptr);
  }

  boolGate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<boolGate>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const boolGate& from);
  void MergeFrom(const boolGate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(boolGate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.BOOL_GATE_OP boolOpSpec = 1;
  int boolopspec_size() const;
  void clear_boolopspec();
  static const int kBoolOpSpecFieldNumber = 1;
  ::pb::BOOL_GATE_OP* mutable_boolopspec(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::BOOL_GATE_OP >*
      mutable_boolopspec();
  const ::pb::BOOL_GATE_OP& boolopspec(int index) const;
  ::pb::BOOL_GATE_OP* add_boolopspec();
  const ::google::protobuf::RepeatedPtrField< ::pb::BOOL_GATE_OP >&
      boolopspec() const;

  // @@protoc_insertion_point(class_scope:pb.boolGate)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::BOOL_GATE_OP > boolopspec_;
  friend struct ::TableStruct_GatingSet_2eproto;
};
// -------------------------------------------------------------------

class clusterGate final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.clusterGate) */ {
 public:
  clusterGate();
  virtual ~clusterGate();

  clusterGate(const clusterGate& from);

  inline clusterGate& operator=(const clusterGate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  clusterGate(clusterGate&& from) noexcept
    : clusterGate() {
    *this = ::std::move(from);
  }

  inline clusterGate& operator=(clusterGate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const clusterGate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const clusterGate* internal_default_instance() {
    return reinterpret_cast<const clusterGate*>(
               &_clusterGate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(clusterGate* other);
  friend void swap(clusterGate& a, clusterGate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline clusterGate* New() const final {
    return CreateMaybeMessage<clusterGate>(nullptr);
  }

  clusterGate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<clusterGate>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const clusterGate& from);
  void MergeFrom(const clusterGate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(clusterGate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string cluster_method = 1;
  bool has_cluster_method() const;
  void clear_cluster_method();
  static const int kClusterMethodFieldNumber = 1;
  const ::std::string& cluster_method() const;
  void set_cluster_method(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_method(::std::string&& value);
  #endif
  void set_cluster_method(const char* value);
  void set_cluster_method(const char* value, size_t size);
  ::std::string* mutable_cluster_method();
  ::std::string* release_cluster_method();
  void set_allocated_cluster_method(::std::string* cluster_method);

  // @@protoc_insertion_point(class_scope:pb.clusterGate)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr cluster_method_;
  friend struct ::TableStruct_GatingSet_2eproto;
};
// -------------------------------------------------------------------

class gate final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.gate) */ {
 public:
  gate();
  virtual ~gate();

  gate(const gate& from);

  inline gate& operator=(const gate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  gate(gate&& from) noexcept
    : gate() {
    *this = ::std::move(from);
  }

  inline gate& operator=(gate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const gate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const gate* internal_default_instance() {
    return reinterpret_cast<const gate*>(
               &_gate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(gate* other);
  friend void swap(gate& a, gate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline gate* New() const final {
    return CreateMaybeMessage<gate>(nullptr);
  }

  gate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<gate>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const gate& from);
  void MergeFrom(const gate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(gate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.rangeGate rg = 5;
  bool has_rg() const;
  void clear_rg();
  static const int kRgFieldNumber = 5;
  const ::pb::rangeGate& rg() const;
  ::pb::rangeGate* release_rg();
  ::pb::rangeGate* mutable_rg();
  void set_allocated_rg(::pb::rangeGate* rg);

  // optional .pb.polygonGate pg = 6;
  bool has_pg() const;
  void clear_pg();
  static const int kPgFieldNumber = 6;
  const ::pb::polygonGate& pg() const;
  ::pb::polygonGate* release_pg();
  ::pb::polygonGate* mutable_pg();
  void set_allocated_pg(::pb::polygonGate* pg);

  // optional .pb.ellipseGate eg = 7;
  bool has_eg() const;
  void clear_eg();
  static const int kEgFieldNumber = 7;
  const ::pb::ellipseGate& eg() const;
  ::pb::ellipseGate* release_eg();
  ::pb::ellipseGate* mutable_eg();
  void set_allocated_eg(::pb::ellipseGate* eg);

  // optional .pb.boolGate bg = 8;
  bool has_bg() const;
  void clear_bg();
  static const int kBgFieldNumber = 8;
  const ::pb::boolGate& bg() const;
  ::pb::boolGate* release_bg();
  ::pb::boolGate* mutable_bg();
  void set_allocated_bg(::pb::boolGate* bg);

  // optional .pb.clusterGate cg = 9;
  bool has_cg() const;
  void clear_cg();
  static const int kCgFieldNumber = 9;
  const ::pb::clusterGate& cg() const;
  ::pb::clusterGate* release_cg();
  ::pb::clusterGate* mutable_cg();
  void set_allocated_cg(::pb::clusterGate* cg);

  // required bool neg = 1;
  bool has_neg() const;
  void clear_neg();
  static const int kNegFieldNumber = 1;
  bool neg() const;
  void set_neg(bool value);

  // required bool isTransformed = 2;
  bool has_istransformed() const;
  void clear_istransformed();
  static const int kIsTransformedFieldNumber = 2;
  bool istransformed() const;
  void set_istransformed(bool value);

  // required bool isGained = 3;
  bool has_isgained() const;
  void clear_isgained();
  static const int kIsGainedFieldNumber = 3;
  bool isgained() const;
  void set_isgained(bool value);

  // required .pb.GATE_TYPE type = 4;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::pb::GATE_TYPE type() const;
  void set_type(::pb::GATE_TYPE value);

  // @@protoc_insertion_point(class_scope:pb.gate)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::pb::rangeGate* rg_;
  ::pb::polygonGate* pg_;
  ::pb::ellipseGate* eg_;
  ::pb::boolGate* bg_;
  ::pb::clusterGate* cg_;
  bool neg_;
  bool istransformed_;
  bool isgained_;
  int type_;
  friend struct ::TableStruct_GatingSet_2eproto;
};
// -------------------------------------------------------------------

class POPSTATS final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.POPSTATS) */ {
 public:
  POPSTATS();
  virtual ~POPSTATS();

  POPSTATS(const POPSTATS& from);

  inline POPSTATS& operator=(const POPSTATS& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  POPSTATS(POPSTATS&& from) noexcept
    : POPSTATS() {
    *this = ::std::move(from);
  }

  inline POPSTATS& operator=(POPSTATS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const POPSTATS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const POPSTATS* internal_default_instance() {
    return reinterpret_cast<const POPSTATS*>(
               &_POPSTATS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(POPSTATS* other);
  friend void swap(POPSTATS& a, POPSTATS& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline POPSTATS* New() const final {
    return CreateMaybeMessage<POPSTATS>(nullptr);
  }

  POPSTATS* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<POPSTATS>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const POPSTATS& from);
  void MergeFrom(const POPSTATS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(POPSTATS* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string statType = 1;
  bool has_stattype() const;
  void clear_stattype();
  static const int kStatTypeFieldNumber = 1;
  const ::std::string& stattype() const;
  void set_stattype(const ::std::string& value);
  #if LANG_CXX11
  void set_stattype(::std::string&& value);
  #endif
  void set_stattype(const char* value);
  void set_stattype(const char* value, size_t size);
  ::std::string* mutable_stattype();
  ::std::string* release_stattype();
  void set_allocated_stattype(::std::string* stattype);

  // required float statVal = 2;
  bool has_statval() const;
  void clear_statval();
  static const int kStatValFieldNumber = 2;
  float statval() const;
  void set_statval(float value);

  // @@protoc_insertion_point(class_scope:pb.POPSTATS)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr stattype_;
  float statval_;
  friend struct ::TableStruct_GatingSet_2eproto;
};
// -------------------------------------------------------------------

class calibrationTable final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.calibrationTable) */ {
 public:
  calibrationTable();
  virtual ~calibrationTable();

  calibrationTable(const calibrationTable& from);

  inline calibrationTable& operator=(const calibrationTable& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  calibrationTable(calibrationTable&& from) noexcept
    : calibrationTable() {
    *this = ::std::move(from);
  }

  inline calibrationTable& operator=(calibrationTable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const calibrationTable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const calibrationTable* internal_default_instance() {
    return reinterpret_cast<const calibrationTable*>(
               &_calibrationTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(calibrationTable* other);
  friend void swap(calibrationTable& a, calibrationTable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline calibrationTable* New() const final {
    return CreateMaybeMessage<calibrationTable>(nullptr);
  }

  calibrationTable* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<calibrationTable>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const calibrationTable& from);
  void MergeFrom(const calibrationTable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(calibrationTable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float x = 1 [packed = true];
  int x_size() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x(int index) const;
  void set_x(int index, float value);
  void add_x(float value);
  const ::google::protobuf::RepeatedField< float >&
      x() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_x();

  // repeated float y = 2 [packed = true];
  int y_size() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y(int index) const;
  void set_y(int index, float value);
  void add_y(float value);
  const ::google::protobuf::RepeatedField< float >&
      y() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_y();

  // repeated float b = 3 [packed = true];
  int b_size() const;
  void clear_b();
  static const int kBFieldNumber = 3;
  float b(int index) const;
  void set_b(int index, float value);
  void add_b(float value);
  const ::google::protobuf::RepeatedField< float >&
      b() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_b();

  // repeated float c = 4 [packed = true];
  int c_size() const;
  void clear_c();
  static const int kCFieldNumber = 4;
  float c(int index) const;
  void set_c(int index, float value);
  void add_c(float value);
  const ::google::protobuf::RepeatedField< float >&
      c() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_c();

  // repeated float d = 5 [packed = true];
  int d_size() const;
  void clear_d();
  static const int kDFieldNumber = 5;
  float d(int index) const;
  void set_d(int index, float value);
  void add_d(float value);
  const ::google::protobuf::RepeatedField< float >&
      d() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_d();

  // optional string caltype = 7;
  bool has_caltype() const;
  void clear_caltype();
  static const int kCaltypeFieldNumber = 7;
  const ::std::string& caltype() const;
  void set_caltype(const ::std::string& value);
  #if LANG_CXX11
  void set_caltype(::std::string&& value);
  #endif
  void set_caltype(const char* value);
  void set_caltype(const char* value, size_t size);
  ::std::string* mutable_caltype();
  ::std::string* release_caltype();
  void set_allocated_caltype(::std::string* caltype);

  // optional uint32 spline_method = 6;
  bool has_spline_method() const;
  void clear_spline_method();
  static const int kSplineMethodFieldNumber = 6;
  ::google::protobuf::uint32 spline_method() const;
  void set_spline_method(::google::protobuf::uint32 value);

  // optional bool flag = 8;
  bool has_flag() const;
  void clear_flag();
  static const int kFlagFieldNumber = 8;
  bool flag() const;
  void set_flag(bool value);

  // @@protoc_insertion_point(class_scope:pb.calibrationTable)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< float > x_;
  mutable std::atomic<int> _x_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > y_;
  mutable std::atomic<int> _y_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > b_;
  mutable std::atomic<int> _b_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > c_;
  mutable std::atomic<int> _c_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > d_;
  mutable std::atomic<int> _d_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr caltype_;
  ::google::protobuf::uint32 spline_method_;
  bool flag_;
  friend struct ::TableStruct_GatingSet_2eproto;
};
// -------------------------------------------------------------------

class biexpTrans final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.biexpTrans) */ {
 public:
  biexpTrans();
  virtual ~biexpTrans();

  biexpTrans(const biexpTrans& from);

  inline biexpTrans& operator=(const biexpTrans& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  biexpTrans(biexpTrans&& from) noexcept
    : biexpTrans() {
    *this = ::std::move(from);
  }

  inline biexpTrans& operator=(biexpTrans&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const biexpTrans& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const biexpTrans* internal_default_instance() {
    return reinterpret_cast<const biexpTrans*>(
               &_biexpTrans_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(biexpTrans* other);
  friend void swap(biexpTrans& a, biexpTrans& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline biexpTrans* New() const final {
    return CreateMaybeMessage<biexpTrans>(nullptr);
  }

  biexpTrans* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<biexpTrans>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const biexpTrans& from);
  void MergeFrom(const biexpTrans& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(biexpTrans* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 channelRange = 1;
  bool has_channelrange() const;
  void clear_channelrange();
  static const int kChannelRangeFieldNumber = 1;
  ::google::protobuf::uint32 channelrange() const;
  void set_channelrange(::google::protobuf::uint32 value);

  // optional float pos = 2;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 2;
  float pos() const;
  void set_pos(float value);

  // optional float neg = 3;
  bool has_neg() const;
  void clear_neg();
  static const int kNegFieldNumber = 3;
  float neg() const;
  void set_neg(float value);

  // optional float widthBasis = 4;
  bool has_widthbasis() const;
  void clear_widthbasis();
  static const int kWidthBasisFieldNumber = 4;
  float widthbasis() const;
  void set_widthbasis(float value);

  // optional float maxValue = 5;
  bool has_maxvalue() const;
  void clear_maxvalue();
  static const int kMaxValueFieldNumber = 5;
  float maxvalue() const;
  void set_maxvalue(float value);

  // @@protoc_insertion_point(class_scope:pb.biexpTrans)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 channelrange_;
  float pos_;
  float neg_;
  float widthbasis_;
  float maxvalue_;
  friend struct ::TableStruct_GatingSet_2eproto;
};
// -------------------------------------------------------------------

class fasinhTrans final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.fasinhTrans) */ {
 public:
  fasinhTrans();
  virtual ~fasinhTrans();

  fasinhTrans(const fasinhTrans& from);

  inline fasinhTrans& operator=(const fasinhTrans& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  fasinhTrans(fasinhTrans&& from) noexcept
    : fasinhTrans() {
    *this = ::std::move(from);
  }

  inline fasinhTrans& operator=(fasinhTrans&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const fasinhTrans& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const fasinhTrans* internal_default_instance() {
    return reinterpret_cast<const fasinhTrans*>(
               &_fasinhTrans_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(fasinhTrans* other);
  friend void swap(fasinhTrans& a, fasinhTrans& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline fasinhTrans* New() const final {
    return CreateMaybeMessage<fasinhTrans>(nullptr);
  }

  fasinhTrans* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<fasinhTrans>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const fasinhTrans& from);
  void MergeFrom(const fasinhTrans& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(fasinhTrans* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float length = 1;
  bool has_length() const;
  void clear_length();
  static const int kLengthFieldNumber = 1;
  float length() const;
  void set_length(float value);

  // optional float maxRange = 2;
  bool has_maxrange() const;
  void clear_maxrange();
  static const int kMaxRangeFieldNumber = 2;
  float maxrange() const;
  void set_maxrange(float value);

  // optional float T = 3;
  bool has_t() const;
  void clear_t();
  static const int kTFieldNumber = 3;
  float t() const;
  void set_t(float value);

  // optional float A = 4;
  bool has_a() const;
  void clear_a();
  static const int kAFieldNumber = 4;
  float a() const;
  void set_a(float value);

  // optional float M = 5;
  bool has_m() const;
  void clear_m();
  static const int kMFieldNumber = 5;
  float m() const;
  void set_m(float value);

  // @@protoc_insertion_point(class_scope:pb.fasinhTrans)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float length_;
  float maxrange_;
  float t_;
  float a_;
  float m_;
  friend struct ::TableStruct_GatingSet_2eproto;
};
// -------------------------------------------------------------------

class scaleTrans final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.scaleTrans) */ {
 public:
  scaleTrans();
  virtual ~scaleTrans();

  scaleTrans(const scaleTrans& from);

  inline scaleTrans& operator=(const scaleTrans& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  scaleTrans(scaleTrans&& from) noexcept
    : scaleTrans() {
    *this = ::std::move(from);
  }

  inline scaleTrans& operator=(scaleTrans&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const scaleTrans& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const scaleTrans* internal_default_instance() {
    return reinterpret_cast<const scaleTrans*>(
               &_scaleTrans_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(scaleTrans* other);
  friend void swap(scaleTrans& a, scaleTrans& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline scaleTrans* New() const final {
    return CreateMaybeMessage<scaleTrans>(nullptr);
  }

  scaleTrans* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<scaleTrans>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const scaleTrans& from);
  void MergeFrom(const scaleTrans& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(scaleTrans* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float scale_factor = 1;
  bool has_scale_factor() const;
  void clear_scale_factor();
  static const int kScaleFactorFieldNumber = 1;
  float scale_factor() const;
  void set_scale_factor(float value);

  // @@protoc_insertion_point(class_scope:pb.scaleTrans)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float scale_factor_;
  friend struct ::TableStruct_GatingSet_2eproto;
};
// -------------------------------------------------------------------

class flinTrans final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.flinTrans) */ {
 public:
  flinTrans();
  virtual ~flinTrans();

  flinTrans(const flinTrans& from);

  inline flinTrans& operator=(const flinTrans& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  flinTrans(flinTrans&& from) noexcept
    : flinTrans() {
    *this = ::std::move(from);
  }

  inline flinTrans& operator=(flinTrans&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const flinTrans& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const flinTrans* internal_default_instance() {
    return reinterpret_cast<const flinTrans*>(
               &_flinTrans_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(flinTrans* other);
  friend void swap(flinTrans& a, flinTrans& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline flinTrans* New() const final {
    return CreateMaybeMessage<flinTrans>(nullptr);
  }

  flinTrans* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<flinTrans>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const flinTrans& from);
  void MergeFrom(const flinTrans& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(flinTrans* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float min = 1;
  bool has_min() const;
  void clear_min();
  static const int kMinFieldNumber = 1;
  float min() const;
  void set_min(float value);

  // optional float max = 2;
  bool has_max() const;
  void clear_max();
  static const int kMaxFieldNumber = 2;
  float max() const;
  void set_max(float value);

  // @@protoc_insertion_point(class_scope:pb.flinTrans)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float min_;
  float max_;
  friend struct ::TableStruct_GatingSet_2eproto;
};
// -------------------------------------------------------------------

class logTrans final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.logTrans) */ {
 public:
  logTrans();
  virtual ~logTrans();

  logTrans(const logTrans& from);

  inline logTrans& operator=(const logTrans& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  logTrans(logTrans&& from) noexcept
    : logTrans() {
    *this = ::std::move(from);
  }

  inline logTrans& operator=(logTrans&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const logTrans& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const logTrans* internal_default_instance() {
    return reinterpret_cast<const logTrans*>(
               &_logTrans_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(logTrans* other);
  friend void swap(logTrans& a, logTrans& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline logTrans* New() const final {
    return CreateMaybeMessage<logTrans>(nullptr);
  }

  logTrans* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<logTrans>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const logTrans& from);
  void MergeFrom(const logTrans& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(logTrans* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float offset = 1;
  bool has_offset() const;
  void clear_offset();
  static const int kOffsetFieldNumber = 1;
  float offset() const;
  void set_offset(float value);

  // optional float decade = 2;
  bool has_decade() const;
  void clear_decade();
  static const int kDecadeFieldNumber = 2;
  float decade() const;
  void set_decade(float value);

  // optional float T = 3;
  bool has_t() const;
  void clear_t();
  static const int kTFieldNumber = 3;
  float t() const;
  void set_t(float value);

  // optional float scale = 4;
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 4;
  float scale() const;
  void set_scale(float value);

  // @@protoc_insertion_point(class_scope:pb.logTrans)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float offset_;
  float decade_;
  float t_;
  float scale_;
  friend struct ::TableStruct_GatingSet_2eproto;
};
// -------------------------------------------------------------------

class logicleTrans final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.logicleTrans) */ {
 public:
  logicleTrans();
  virtual ~logicleTrans();

  logicleTrans(const logicleTrans& from);

  inline logicleTrans& operator=(const logicleTrans& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  logicleTrans(logicleTrans&& from) noexcept
    : logicleTrans() {
    *this = ::std::move(from);
  }

  inline logicleTrans& operator=(logicleTrans&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const logicleTrans& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const logicleTrans* internal_default_instance() {
    return reinterpret_cast<const logicleTrans*>(
               &_logicleTrans_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(logicleTrans* other);
  friend void swap(logicleTrans& a, logicleTrans& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline logicleTrans* New() const final {
    return CreateMaybeMessage<logicleTrans>(nullptr);
  }

  logicleTrans* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<logicleTrans>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const logicleTrans& from);
  void MergeFrom(const logicleTrans& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(logicleTrans* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float T = 1;
  bool has_t() const;
  void clear_t();
  static const int kTFieldNumber = 1;
  float t() const;
  void set_t(float value);

  // optional float W = 2;
  bool has_w() const;
  void clear_w();
  static const int kWFieldNumber = 2;
  float w() const;
  void set_w(float value);

  // optional float M = 3;
  bool has_m() const;
  void clear_m();
  static const int kMFieldNumber = 3;
  float m() const;
  void set_m(float value);

  // optional float A = 4;
  bool has_a() const;
  void clear_a();
  static const int kAFieldNumber = 4;
  float a() const;
  void set_a(float value);

  // optional float bins = 5;
  bool has_bins() const;
  void clear_bins();
  static const int kBinsFieldNumber = 5;
  float bins() const;
  void set_bins(float value);

  // optional bool isGml2 = 6;
  bool has_isgml2() const;
  void clear_isgml2();
  static const int kIsGml2FieldNumber = 6;
  bool isgml2() const;
  void set_isgml2(bool value);

  // optional bool isInverse = 7;
  bool has_isinverse() const;
  void clear_isinverse();
  static const int kIsInverseFieldNumber = 7;
  bool isinverse() const;
  void set_isinverse(bool value);

  // @@protoc_insertion_point(class_scope:pb.logicleTrans)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float t_;
  float w_;
  float m_;
  float a_;
  float bins_;
  bool isgml2_;
  bool isinverse_;
  friend struct ::TableStruct_GatingSet_2eproto;
};
// -------------------------------------------------------------------

class transformation final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.transformation) */ {
 public:
  transformation();
  virtual ~transformation();

  transformation(const transformation& from);

  inline transformation& operator=(const transformation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  transformation(transformation&& from) noexcept
    : transformation() {
    *this = ::std::move(from);
  }

  inline transformation& operator=(transformation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const transformation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const transformation* internal_default_instance() {
    return reinterpret_cast<const transformation*>(
               &_transformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(transformation* other);
  friend void swap(transformation& a, transformation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline transformation* New() const final {
    return CreateMaybeMessage<transformation>(nullptr);
  }

  transformation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<transformation>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const transformation& from);
  void MergeFrom(const transformation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(transformation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 4;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string channel = 5;
  bool has_channel() const;
  void clear_channel();
  static const int kChannelFieldNumber = 5;
  const ::std::string& channel() const;
  void set_channel(const ::std::string& value);
  #if LANG_CXX11
  void set_channel(::std::string&& value);
  #endif
  void set_channel(const char* value);
  void set_channel(const char* value, size_t size);
  ::std::string* mutable_channel();
  ::std::string* release_channel();
  void set_allocated_channel(::std::string* channel);

  // optional .pb.calibrationTable calTbl = 1;
  bool has_caltbl() const;
  void clear_caltbl();
  static const int kCalTblFieldNumber = 1;
  const ::pb::calibrationTable& caltbl() const;
  ::pb::calibrationTable* release_caltbl();
  ::pb::calibrationTable* mutable_caltbl();
  void set_allocated_caltbl(::pb::calibrationTable* caltbl);

  // optional .pb.biexpTrans bt = 7;
  bool has_bt() const;
  void clear_bt();
  static const int kBtFieldNumber = 7;
  const ::pb::biexpTrans& bt() const;
  ::pb::biexpTrans* release_bt();
  ::pb::biexpTrans* mutable_bt();
  void set_allocated_bt(::pb::biexpTrans* bt);

  // optional .pb.logTrans lt = 8;
  bool has_lt() const;
  void clear_lt();
  static const int kLtFieldNumber = 8;
  const ::pb::logTrans& lt() const;
  ::pb::logTrans* release_lt();
  ::pb::logTrans* mutable_lt();
  void set_allocated_lt(::pb::logTrans* lt);

  // optional .pb.flinTrans flt = 9;
  bool has_flt() const;
  void clear_flt();
  static const int kFltFieldNumber = 9;
  const ::pb::flinTrans& flt() const;
  ::pb::flinTrans* release_flt();
  ::pb::flinTrans* mutable_flt();
  void set_allocated_flt(::pb::flinTrans* flt);

  // optional .pb.scaleTrans st = 10;
  bool has_st() const;
  void clear_st();
  static const int kStFieldNumber = 10;
  const ::pb::scaleTrans& st() const;
  ::pb::scaleTrans* release_st();
  ::pb::scaleTrans* mutable_st();
  void set_allocated_st(::pb::scaleTrans* st);

  // optional .pb.fasinhTrans ft = 11;
  bool has_ft() const;
  void clear_ft();
  static const int kFtFieldNumber = 11;
  const ::pb::fasinhTrans& ft() const;
  ::pb::fasinhTrans* release_ft();
  ::pb::fasinhTrans* mutable_ft();
  void set_allocated_ft(::pb::fasinhTrans* ft);

  // optional .pb.logicleTrans lgt = 13;
  bool has_lgt() const;
  void clear_lgt();
  static const int kLgtFieldNumber = 13;
  const ::pb::logicleTrans& lgt() const;
  ::pb::logicleTrans* release_lgt();
  ::pb::logicleTrans* mutable_lgt();
  void set_allocated_lgt(::pb::logicleTrans* lgt);

  // optional .pb.TRANS_TYPE trans_type = 3;
  bool has_trans_type() const;
  void clear_trans_type();
  static const int kTransTypeFieldNumber = 3;
  ::pb::TRANS_TYPE trans_type() const;
  void set_trans_type(::pb::TRANS_TYPE value);

  // optional bool isGateOnly = 2;
  bool has_isgateonly() const;
  void clear_isgateonly();
  static const int kIsGateOnlyFieldNumber = 2;
  bool isgateonly() const;
  void set_isgateonly(bool value);

  // optional bool isComputed = 6;
  bool has_iscomputed() const;
  void clear_iscomputed();
  static const int kIsComputedFieldNumber = 6;
  bool iscomputed() const;
  void set_iscomputed(bool value);

  // optional uint32 type = 12;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 12;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.transformation)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr channel_;
  ::pb::calibrationTable* caltbl_;
  ::pb::biexpTrans* bt_;
  ::pb::logTrans* lt_;
  ::pb::flinTrans* flt_;
  ::pb::scaleTrans* st_;
  ::pb::fasinhTrans* ft_;
  ::pb::logicleTrans* lgt_;
  int trans_type_;
  bool isgateonly_;
  bool iscomputed_;
  ::google::protobuf::uint32 type_;
  friend struct ::TableStruct_GatingSet_2eproto;
};
// -------------------------------------------------------------------

class trans_pair final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.trans_pair) */ {
 public:
  trans_pair();
  virtual ~trans_pair();

  trans_pair(const trans_pair& from);

  inline trans_pair& operator=(const trans_pair& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  trans_pair(trans_pair&& from) noexcept
    : trans_pair() {
    *this = ::std::move(from);
  }

  inline trans_pair& operator=(trans_pair&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const trans_pair& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const trans_pair* internal_default_instance() {
    return reinterpret_cast<const trans_pair*>(
               &_trans_pair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(trans_pair* other);
  friend void swap(trans_pair& a, trans_pair& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline trans_pair* New() const final {
    return CreateMaybeMessage<trans_pair>(nullptr);
  }

  trans_pair* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<trans_pair>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const trans_pair& from);
  void MergeFrom(const trans_pair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(trans_pair* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .pb.transformation trans = 3;
  bool has_trans() const;
  void clear_trans();
  static const int kTransFieldNumber = 3;
  const ::pb::transformation& trans() const;
  ::pb::transformation* release_trans();
  ::pb::transformation* mutable_trans();
  void set_allocated_trans(::pb::transformation* trans);

  // optional uint64 trans_address = 2;
  bool has_trans_address() const;
  void clear_trans_address();
  static const int kTransAddressFieldNumber = 2;
  ::google::protobuf::uint64 trans_address() const;
  void set_trans_address(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.trans_pair)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::pb::transformation* trans_;
  ::google::protobuf::uint64 trans_address_;
  friend struct ::TableStruct_GatingSet_2eproto;
};
// -------------------------------------------------------------------

class trans_local final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.trans_local) */ {
 public:
  trans_local();
  virtual ~trans_local();

  trans_local(const trans_local& from);

  inline trans_local& operator=(const trans_local& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  trans_local(trans_local&& from) noexcept
    : trans_local() {
    *this = ::std::move(from);
  }

  inline trans_local& operator=(trans_local&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const trans_local& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const trans_local* internal_default_instance() {
    return reinterpret_cast<const trans_local*>(
               &_trans_local_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(trans_local* other);
  friend void swap(trans_local& a, trans_local& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline trans_local* New() const final {
    return CreateMaybeMessage<trans_local>(nullptr);
  }

  trans_local* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<trans_local>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const trans_local& from);
  void MergeFrom(const trans_local& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(trans_local* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.trans_pair tp = 1;
  int tp_size() const;
  void clear_tp();
  static const int kTpFieldNumber = 1;
  ::pb::trans_pair* mutable_tp(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::trans_pair >*
      mutable_tp();
  const ::pb::trans_pair& tp(int index) const;
  ::pb::trans_pair* add_tp();
  const ::google::protobuf::RepeatedPtrField< ::pb::trans_pair >&
      tp() const;

  // repeated uint32 sampleIDs = 3 [packed = true];
  int sampleids_size() const;
  void clear_sampleids();
  static const int kSampleIDsFieldNumber = 3;
  ::google::protobuf::uint32 sampleids(int index) const;
  void set_sampleids(int index, ::google::protobuf::uint32 value);
  void add_sampleids(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      sampleids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_sampleids();

  // optional string groupName = 2;
  bool has_groupname() const;
  void clear_groupname();
  static const int kGroupNameFieldNumber = 2;
  const ::std::string& groupname() const;
  void set_groupname(const ::std::string& value);
  #if LANG_CXX11
  void set_groupname(::std::string&& value);
  #endif
  void set_groupname(const char* value);
  void set_groupname(const char* value, size_t size);
  ::std::string* mutable_groupname();
  ::std::string* release_groupname();
  void set_allocated_groupname(::std::string* groupname);

  // @@protoc_insertion_point(class_scope:pb.trans_local)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::trans_pair > tp_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > sampleids_;
  mutable std::atomic<int> _sampleids_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr groupname_;
  friend struct ::TableStruct_GatingSet_2eproto;
};
// -------------------------------------------------------------------

class POPINDICES final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.POPINDICES) */ {
 public:
  POPINDICES();
  virtual ~POPINDICES();

  POPINDICES(const POPINDICES& from);

  inline POPINDICES& operator=(const POPINDICES& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  POPINDICES(POPINDICES&& from) noexcept
    : POPINDICES() {
    *this = ::std::move(from);
  }

  inline POPINDICES& operator=(POPINDICES&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const POPINDICES& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const POPINDICES* internal_default_instance() {
    return reinterpret_cast<const POPINDICES*>(
               &_POPINDICES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(POPINDICES* other);
  friend void swap(POPINDICES& a, POPINDICES& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline POPINDICES* New() const final {
    return CreateMaybeMessage<POPINDICES>(nullptr);
  }

  POPINDICES* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<POPINDICES>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const POPINDICES& from);
  void MergeFrom(const POPINDICES& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(POPINDICES* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 iInd = 3 [packed = true];
  int iind_size() const;
  void clear_iind();
  static const int kIIndFieldNumber = 3;
  ::google::protobuf::uint32 iind(int index) const;
  void set_iind(int index, ::google::protobuf::uint32 value);
  void add_iind(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      iind() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_iind();

  // optional bytes bInd = 4;
  bool has_bind() const;
  void clear_bind();
  static const int kBIndFieldNumber = 4;
  const ::std::string& bind() const;
  void set_bind(const ::std::string& value);
  #if LANG_CXX11
  void set_bind(::std::string&& value);
  #endif
  void set_bind(const char* value);
  void set_bind(const void* value, size_t size);
  ::std::string* mutable_bind();
  ::std::string* release_bind();
  void set_allocated_bind(::std::string* bind);

  // required uint32 nEvents = 1;
  bool has_nevents() const;
  void clear_nevents();
  static const int kNEventsFieldNumber = 1;
  ::google::protobuf::uint32 nevents() const;
  void set_nevents(::google::protobuf::uint32 value);

  // required .pb.ind_type indtype = 2;
  bool has_indtype() const;
  void clear_indtype();
  static const int kIndtypeFieldNumber = 2;
  ::pb::ind_type indtype() const;
  void set_indtype(::pb::ind_type value);

  // @@protoc_insertion_point(class_scope:pb.POPINDICES)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > iind_;
  mutable std::atomic<int> _iind_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr bind_;
  ::google::protobuf::uint32 nevents_;
  int indtype_;
  friend struct ::TableStruct_GatingSet_2eproto;
};
// -------------------------------------------------------------------

class nodeProperties final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.nodeProperties) */ {
 public:
  nodeProperties();
  virtual ~nodeProperties();

  nodeProperties(const nodeProperties& from);

  inline nodeProperties& operator=(const nodeProperties& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  nodeProperties(nodeProperties&& from) noexcept
    : nodeProperties() {
    *this = ::std::move(from);
  }

  inline nodeProperties& operator=(nodeProperties&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const nodeProperties& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const nodeProperties* internal_default_instance() {
    return reinterpret_cast<const nodeProperties*>(
               &_nodeProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(nodeProperties* other);
  friend void swap(nodeProperties& a, nodeProperties& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline nodeProperties* New() const final {
    return CreateMaybeMessage<nodeProperties>(nullptr);
  }

  nodeProperties* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<nodeProperties>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const nodeProperties& from);
  void MergeFrom(const nodeProperties& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(nodeProperties* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.POPSTATS fjStats = 2;
  int fjstats_size() const;
  void clear_fjstats();
  static const int kFjStatsFieldNumber = 2;
  ::pb::POPSTATS* mutable_fjstats(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::POPSTATS >*
      mutable_fjstats();
  const ::pb::POPSTATS& fjstats(int index) const;
  ::pb::POPSTATS* add_fjstats();
  const ::google::protobuf::RepeatedPtrField< ::pb::POPSTATS >&
      fjstats() const;

  // repeated .pb.POPSTATS fcStats = 3;
  int fcstats_size() const;
  void clear_fcstats();
  static const int kFcStatsFieldNumber = 3;
  ::pb::POPSTATS* mutable_fcstats(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::POPSTATS >*
      mutable_fcstats();
  const ::pb::POPSTATS& fcstats(int index) const;
  ::pb::POPSTATS* add_fcstats();
  const ::google::protobuf::RepeatedPtrField< ::pb::POPSTATS >&
      fcstats() const;

  // required string thisName = 1;
  bool has_thisname() const;
  void clear_thisname();
  static const int kThisNameFieldNumber = 1;
  const ::std::string& thisname() const;
  void set_thisname(const ::std::string& value);
  #if LANG_CXX11
  void set_thisname(::std::string&& value);
  #endif
  void set_thisname(const char* value);
  void set_thisname(const char* value, size_t size);
  ::std::string* mutable_thisname();
  ::std::string* release_thisname();
  void set_allocated_thisname(::std::string* thisname);

  // optional .pb.POPINDICES indices = 5;
  bool has_indices() const;
  void clear_indices();
  static const int kIndicesFieldNumber = 5;
  const ::pb::POPINDICES& indices() const;
  ::pb::POPINDICES* release_indices();
  ::pb::POPINDICES* mutable_indices();
  void set_allocated_indices(::pb::POPINDICES* indices);

  // optional .pb.gate thisGate = 6;
  bool has_thisgate() const;
  void clear_thisgate();
  static const int kThisGateFieldNumber = 6;
  const ::pb::gate& thisgate() const;
  ::pb::gate* release_thisgate();
  ::pb::gate* mutable_thisgate();
  void set_allocated_thisgate(::pb::gate* thisgate);

  // required bool hidden = 4;
  bool has_hidden() const;
  void clear_hidden();
  static const int kHiddenFieldNumber = 4;
  bool hidden() const;
  void set_hidden(bool value);

  // @@protoc_insertion_point(class_scope:pb.nodeProperties)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::POPSTATS > fjstats_;
  ::google::protobuf::RepeatedPtrField< ::pb::POPSTATS > fcstats_;
  ::google::protobuf::internal::ArenaStringPtr thisname_;
  ::pb::POPINDICES* indices_;
  ::pb::gate* thisgate_;
  bool hidden_;
  friend struct ::TableStruct_GatingSet_2eproto;
};
// -------------------------------------------------------------------

class treeNodes final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.treeNodes) */ {
 public:
  treeNodes();
  virtual ~treeNodes();

  treeNodes(const treeNodes& from);

  inline treeNodes& operator=(const treeNodes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  treeNodes(treeNodes&& from) noexcept
    : treeNodes() {
    *this = ::std::move(from);
  }

  inline treeNodes& operator=(treeNodes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const treeNodes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const treeNodes* internal_default_instance() {
    return reinterpret_cast<const treeNodes*>(
               &_treeNodes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(treeNodes* other);
  friend void swap(treeNodes& a, treeNodes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline treeNodes* New() const final {
    return CreateMaybeMessage<treeNodes>(nullptr);
  }

  treeNodes* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<treeNodes>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const treeNodes& from);
  void MergeFrom(const treeNodes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(treeNodes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pb.nodeProperties node = 1;
  bool has_node() const;
  void clear_node();
  static const int kNodeFieldNumber = 1;
  const ::pb::nodeProperties& node() const;
  ::pb::nodeProperties* release_node();
  ::pb::nodeProperties* mutable_node();
  void set_allocated_node(::pb::nodeProperties* node);

  // optional uint32 parent = 2;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 2;
  ::google::protobuf::uint32 parent() const;
  void set_parent(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.treeNodes)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::pb::nodeProperties* node_;
  ::google::protobuf::uint32 parent_;
  friend struct ::TableStruct_GatingSet_2eproto;
};
// -------------------------------------------------------------------

class populationTree final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.populationTree) */ {
 public:
  populationTree();
  virtual ~populationTree();

  populationTree(const populationTree& from);

  inline populationTree& operator=(const populationTree& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  populationTree(populationTree&& from) noexcept
    : populationTree() {
    *this = ::std::move(from);
  }

  inline populationTree& operator=(populationTree&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const populationTree& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const populationTree* internal_default_instance() {
    return reinterpret_cast<const populationTree*>(
               &_populationTree_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(populationTree* other);
  friend void swap(populationTree& a, populationTree& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline populationTree* New() const final {
    return CreateMaybeMessage<populationTree>(nullptr);
  }

  populationTree* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<populationTree>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const populationTree& from);
  void MergeFrom(const populationTree& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(populationTree* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.treeNodes node = 1;
  int node_size() const;
  void clear_node();
  static const int kNodeFieldNumber = 1;
  ::pb::treeNodes* mutable_node(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::treeNodes >*
      mutable_node();
  const ::pb::treeNodes& node(int index) const;
  ::pb::treeNodes* add_node();
  const ::google::protobuf::RepeatedPtrField< ::pb::treeNodes >&
      node() const;

  // @@protoc_insertion_point(class_scope:pb.populationTree)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::treeNodes > node_;
  friend struct ::TableStruct_GatingSet_2eproto;
};
// -------------------------------------------------------------------

class COMP final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.COMP) */ {
 public:
  COMP();
  virtual ~COMP();

  COMP(const COMP& from);

  inline COMP& operator=(const COMP& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  COMP(COMP&& from) noexcept
    : COMP() {
    *this = ::std::move(from);
  }

  inline COMP& operator=(COMP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const COMP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const COMP* internal_default_instance() {
    return reinterpret_cast<const COMP*>(
               &_COMP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(COMP* other);
  friend void swap(COMP& a, COMP& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline COMP* New() const final {
    return CreateMaybeMessage<COMP>(nullptr);
  }

  COMP* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<COMP>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const COMP& from);
  void MergeFrom(const COMP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(COMP* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string marker = 6;
  int marker_size() const;
  void clear_marker();
  static const int kMarkerFieldNumber = 6;
  const ::std::string& marker(int index) const;
  ::std::string* mutable_marker(int index);
  void set_marker(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_marker(int index, ::std::string&& value);
  #endif
  void set_marker(int index, const char* value);
  void set_marker(int index, const char* value, size_t size);
  ::std::string* add_marker();
  void add_marker(const ::std::string& value);
  #if LANG_CXX11
  void add_marker(::std::string&& value);
  #endif
  void add_marker(const char* value);
  void add_marker(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& marker() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_marker();

  // repeated float spillOver = 7;
  int spillover_size() const;
  void clear_spillover();
  static const int kSpillOverFieldNumber = 7;
  float spillover(int index) const;
  void set_spillover(int index, float value);
  void add_spillover(float value);
  const ::google::protobuf::RepeatedField< float >&
      spillover() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_spillover();

  // optional string cid = 1;
  bool has_cid() const;
  void clear_cid();
  static const int kCidFieldNumber = 1;
  const ::std::string& cid() const;
  void set_cid(const ::std::string& value);
  #if LANG_CXX11
  void set_cid(::std::string&& value);
  #endif
  void set_cid(const char* value);
  void set_cid(const char* value, size_t size);
  ::std::string* mutable_cid();
  ::std::string* release_cid();
  void set_allocated_cid(::std::string* cid);

  // optional string prefix = 2;
  bool has_prefix() const;
  void clear_prefix();
  static const int kPrefixFieldNumber = 2;
  const ::std::string& prefix() const;
  void set_prefix(const ::std::string& value);
  #if LANG_CXX11
  void set_prefix(::std::string&& value);
  #endif
  void set_prefix(const char* value);
  void set_prefix(const char* value, size_t size);
  ::std::string* mutable_prefix();
  ::std::string* release_prefix();
  void set_allocated_prefix(::std::string* prefix);

  // optional string suffix = 3;
  bool has_suffix() const;
  void clear_suffix();
  static const int kSuffixFieldNumber = 3;
  const ::std::string& suffix() const;
  void set_suffix(const ::std::string& value);
  #if LANG_CXX11
  void set_suffix(::std::string&& value);
  #endif
  void set_suffix(const char* value);
  void set_suffix(const char* value, size_t size);
  ::std::string* mutable_suffix();
  ::std::string* release_suffix();
  void set_allocated_suffix(::std::string* suffix);

  // optional string name = 4;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string comment = 5;
  bool has_comment() const;
  void clear_comment();
  static const int kCommentFieldNumber = 5;
  const ::std::string& comment() const;
  void set_comment(const ::std::string& value);
  #if LANG_CXX11
  void set_comment(::std::string&& value);
  #endif
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  ::std::string* mutable_comment();
  ::std::string* release_comment();
  void set_allocated_comment(::std::string* comment);

  // @@protoc_insertion_point(class_scope:pb.COMP)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField<::std::string> marker_;
  ::google::protobuf::RepeatedField< float > spillover_;
  ::google::protobuf::internal::ArenaStringPtr cid_;
  ::google::protobuf::internal::ArenaStringPtr prefix_;
  ::google::protobuf::internal::ArenaStringPtr suffix_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr comment_;
  friend struct ::TableStruct_GatingSet_2eproto;
};
// -------------------------------------------------------------------

class PARAM final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.PARAM) */ {
 public:
  PARAM();
  virtual ~PARAM();

  PARAM(const PARAM& from);

  inline PARAM& operator=(const PARAM& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PARAM(PARAM&& from) noexcept
    : PARAM() {
    *this = ::std::move(from);
  }

  inline PARAM& operator=(PARAM&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PARAM& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PARAM* internal_default_instance() {
    return reinterpret_cast<const PARAM*>(
               &_PARAM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(PARAM* other);
  friend void swap(PARAM& a, PARAM& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PARAM* New() const final {
    return CreateMaybeMessage<PARAM>(nullptr);
  }

  PARAM* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PARAM>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const PARAM& from);
  void MergeFrom(const PARAM& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PARAM* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string param = 1;
  bool has_param() const;
  void clear_param();
  static const int kParamFieldNumber = 1;
  const ::std::string& param() const;
  void set_param(const ::std::string& value);
  #if LANG_CXX11
  void set_param(::std::string&& value);
  #endif
  void set_param(const char* value);
  void set_param(const char* value, size_t size);
  ::std::string* mutable_param();
  ::std::string* release_param();
  void set_allocated_param(::std::string* param);

  // optional bool log = 2;
  bool has_log() const;
  void clear_log();
  static const int kLogFieldNumber = 2;
  bool log() const;
  void set_log(bool value);

  // optional uint32 range = 3;
  bool has_range() const;
  void clear_range();
  static const int kRangeFieldNumber = 3;
  ::google::protobuf::uint32 range() const;
  void set_range(::google::protobuf::uint32 value);

  // optional uint32 highValue = 4;
  bool has_highvalue() const;
  void clear_highvalue();
  static const int kHighValueFieldNumber = 4;
  ::google::protobuf::uint32 highvalue() const;
  void set_highvalue(::google::protobuf::uint32 value);

  // optional uint32 calibrationIndex = 5;
  bool has_calibrationindex() const;
  void clear_calibrationindex();
  static const int kCalibrationIndexFieldNumber = 5;
  ::google::protobuf::uint32 calibrationindex() const;
  void set_calibrationindex(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.PARAM)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr param_;
  bool log_;
  ::google::protobuf::uint32 range_;
  ::google::protobuf::uint32 highvalue_;
  ::google::protobuf::uint32 calibrationindex_;
  friend struct ::TableStruct_GatingSet_2eproto;
};
// -------------------------------------------------------------------

class GatingHierarchy final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.GatingHierarchy) */ {
 public:
  GatingHierarchy();
  virtual ~GatingHierarchy();

  GatingHierarchy(const GatingHierarchy& from);

  inline GatingHierarchy& operator=(const GatingHierarchy& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GatingHierarchy(GatingHierarchy&& from) noexcept
    : GatingHierarchy() {
    *this = ::std::move(from);
  }

  inline GatingHierarchy& operator=(GatingHierarchy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GatingHierarchy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GatingHierarchy* internal_default_instance() {
    return reinterpret_cast<const GatingHierarchy*>(
               &_GatingHierarchy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(GatingHierarchy* other);
  friend void swap(GatingHierarchy& a, GatingHierarchy& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GatingHierarchy* New() const final {
    return CreateMaybeMessage<GatingHierarchy>(nullptr);
  }

  GatingHierarchy* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GatingHierarchy>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const GatingHierarchy& from);
  void MergeFrom(const GatingHierarchy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GatingHierarchy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.PARAM transFlag = 4;
  int transflag_size() const;
  void clear_transflag();
  static const int kTransFlagFieldNumber = 4;
  ::pb::PARAM* mutable_transflag(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::PARAM >*
      mutable_transflag();
  const ::pb::PARAM& transflag(int index) const;
  ::pb::PARAM* add_transflag();
  const ::google::protobuf::RepeatedPtrField< ::pb::PARAM >&
      transflag() const;

  // optional .pb.COMP comp = 1;
  bool has_comp() const;
  void clear_comp();
  static const int kCompFieldNumber = 1;
  const ::pb::COMP& comp() const;
  ::pb::COMP* release_comp();
  ::pb::COMP* mutable_comp();
  void set_allocated_comp(::pb::COMP* comp);

  // required .pb.populationTree tree = 2;
  bool has_tree() const;
  void clear_tree();
  static const int kTreeFieldNumber = 2;
  const ::pb::populationTree& tree() const;
  ::pb::populationTree* release_tree();
  ::pb::populationTree* mutable_tree();
  void set_allocated_tree(::pb::populationTree* tree);

  // optional .pb.trans_local trans = 5;
  bool has_trans() const;
  void clear_trans();
  static const int kTransFieldNumber = 5;
  const ::pb::trans_local& trans() const;
  ::pb::trans_local* release_trans();
  ::pb::trans_local* mutable_trans();
  void set_allocated_trans(::pb::trans_local* trans);

  // optional .pb.CytoFrame frame = 6;
  bool has_frame() const;
  void clear_frame();
  static const int kFrameFieldNumber = 6;
  const ::pb::CytoFrame& frame() const;
  ::pb::CytoFrame* release_frame();
  ::pb::CytoFrame* mutable_frame();
  void set_allocated_frame(::pb::CytoFrame* frame);

  // optional bool isLoaded = 3;
  bool has_isloaded() const;
  void clear_isloaded();
  static const int kIsLoadedFieldNumber = 3;
  bool isloaded() const;
  void set_isloaded(bool value);

  // @@protoc_insertion_point(class_scope:pb.GatingHierarchy)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::PARAM > transflag_;
  ::pb::COMP* comp_;
  ::pb::populationTree* tree_;
  ::pb::trans_local* trans_;
  ::pb::CytoFrame* frame_;
  bool isloaded_;
  friend struct ::TableStruct_GatingSet_2eproto;
};
// -------------------------------------------------------------------

class CytoFrame final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.CytoFrame) */ {
 public:
  CytoFrame();
  virtual ~CytoFrame();

  CytoFrame(const CytoFrame& from);

  inline CytoFrame& operator=(const CytoFrame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CytoFrame(CytoFrame&& from) noexcept
    : CytoFrame() {
    *this = ::std::move(from);
  }

  inline CytoFrame& operator=(CytoFrame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CytoFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CytoFrame* internal_default_instance() {
    return reinterpret_cast<const CytoFrame*>(
               &_CytoFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(CytoFrame* other);
  friend void swap(CytoFrame& a, CytoFrame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CytoFrame* New() const final {
    return CreateMaybeMessage<CytoFrame>(nullptr);
  }

  CytoFrame* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CytoFrame>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const CytoFrame& from);
  void MergeFrom(const CytoFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CytoFrame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool is_h5 = 1;
  bool has_is_h5() const;
  void clear_is_h5();
  static const int kIsH5FieldNumber = 1;
  bool is_h5() const;
  void set_is_h5(bool value);

  // @@protoc_insertion_point(class_scope:pb.CytoFrame)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  bool is_h5_;
  friend struct ::TableStruct_GatingSet_2eproto;
};
// -------------------------------------------------------------------

class TRANS_TBL final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.TRANS_TBL) */ {
 public:
  TRANS_TBL();
  virtual ~TRANS_TBL();

  TRANS_TBL(const TRANS_TBL& from);

  inline TRANS_TBL& operator=(const TRANS_TBL& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TRANS_TBL(TRANS_TBL&& from) noexcept
    : TRANS_TBL() {
    *this = ::std::move(from);
  }

  inline TRANS_TBL& operator=(TRANS_TBL&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TRANS_TBL& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TRANS_TBL* internal_default_instance() {
    return reinterpret_cast<const TRANS_TBL*>(
               &_TRANS_TBL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(TRANS_TBL* other);
  friend void swap(TRANS_TBL& a, TRANS_TBL& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TRANS_TBL* New() const final {
    return CreateMaybeMessage<TRANS_TBL>(nullptr);
  }

  TRANS_TBL* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TRANS_TBL>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const TRANS_TBL& from);
  void MergeFrom(const TRANS_TBL& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TRANS_TBL* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.transformation trans = 2;
  bool has_trans() const;
  void clear_trans();
  static const int kTransFieldNumber = 2;
  const ::pb::transformation& trans() const;
  ::pb::transformation* release_trans();
  ::pb::transformation* mutable_trans();
  void set_allocated_trans(::pb::transformation* trans);

  // optional uint64 trans_address = 1;
  bool has_trans_address() const;
  void clear_trans_address();
  static const int kTransAddressFieldNumber = 1;
  ::google::protobuf::uint64 trans_address() const;
  void set_trans_address(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TRANS_TBL)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::pb::transformation* trans_;
  ::google::protobuf::uint64 trans_address_;
  friend struct ::TableStruct_GatingSet_2eproto;
};
// -------------------------------------------------------------------

class GatingSet final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:pb.GatingSet) */ {
 public:
  GatingSet();
  virtual ~GatingSet();

  GatingSet(const GatingSet& from);

  inline GatingSet& operator=(const GatingSet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GatingSet(GatingSet&& from) noexcept
    : GatingSet() {
    *this = ::std::move(from);
  }

  inline GatingSet& operator=(GatingSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GatingSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GatingSet* internal_default_instance() {
    return reinterpret_cast<const GatingSet*>(
               &_GatingSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(GatingSet* other);
  friend void swap(GatingSet& a, GatingSet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GatingSet* New() const final {
    return CreateMaybeMessage<GatingSet>(nullptr);
  }

  GatingSet* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GatingSet>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const GatingSet& from);
  void MergeFrom(const GatingSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GatingSet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string sampleName = 1;
  int samplename_size() const;
  void clear_samplename();
  static const int kSampleNameFieldNumber = 1;
  const ::std::string& samplename(int index) const;
  ::std::string* mutable_samplename(int index);
  void set_samplename(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_samplename(int index, ::std::string&& value);
  #endif
  void set_samplename(int index, const char* value);
  void set_samplename(int index, const char* value, size_t size);
  ::std::string* add_samplename();
  void add_samplename(const ::std::string& value);
  #if LANG_CXX11
  void add_samplename(::std::string&& value);
  #endif
  void add_samplename(const char* value);
  void add_samplename(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& samplename() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_samplename();

  // repeated .pb.TRANS_TBL trans_tbl = 2;
  int trans_tbl_size() const;
  void clear_trans_tbl();
  static const int kTransTblFieldNumber = 2;
  ::pb::TRANS_TBL* mutable_trans_tbl(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::TRANS_TBL >*
      mutable_trans_tbl();
  const ::pb::TRANS_TBL& trans_tbl(int index) const;
  ::pb::TRANS_TBL* add_trans_tbl();
  const ::google::protobuf::RepeatedPtrField< ::pb::TRANS_TBL >&
      trans_tbl() const;

  // repeated .pb.trans_local gTrans = 5;
  int gtrans_size() const;
  void clear_gtrans();
  static const int kGTransFieldNumber = 5;
  ::pb::trans_local* mutable_gtrans(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::trans_local >*
      mutable_gtrans();
  const ::pb::trans_local& gtrans(int index) const;
  ::pb::trans_local* add_gtrans();
  const ::google::protobuf::RepeatedPtrField< ::pb::trans_local >&
      gtrans() const;

  // optional string guid = 6;
  bool has_guid() const;
  void clear_guid();
  static const int kGuidFieldNumber = 6;
  const ::std::string& guid() const;
  void set_guid(const ::std::string& value);
  #if LANG_CXX11
  void set_guid(::std::string&& value);
  #endif
  void set_guid(const char* value);
  void set_guid(const char* value, size_t size);
  ::std::string* mutable_guid();
  ::std::string* release_guid();
  void set_allocated_guid(::std::string* guid);

  // optional uint64 globalBiExpTrans = 3;
  bool has_globalbiexptrans() const;
  void clear_globalbiexptrans();
  static const int kGlobalBiExpTransFieldNumber = 3;
  ::google::protobuf::uint64 globalbiexptrans() const;
  void set_globalbiexptrans(::google::protobuf::uint64 value);

  // optional uint64 globalLinTrans = 4;
  bool has_globallintrans() const;
  void clear_globallintrans();
  static const int kGlobalLinTransFieldNumber = 4;
  ::google::protobuf::uint64 globallintrans() const;
  void set_globallintrans(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.GatingSet)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField<::std::string> samplename_;
  ::google::protobuf::RepeatedPtrField< ::pb::TRANS_TBL > trans_tbl_;
  ::google::protobuf::RepeatedPtrField< ::pb::trans_local > gtrans_;
  ::google::protobuf::internal::ArenaStringPtr guid_;
  ::google::protobuf::uint64 globalbiexptrans_;
  ::google::protobuf::uint64 globallintrans_;
  friend struct ::TableStruct_GatingSet_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// paramRange

// required string name = 1;
inline bool paramRange::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void paramRange::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& paramRange::name() const {
  // @@protoc_insertion_point(field_get:pb.paramRange.name)
  return name_.GetNoArena();
}
inline void paramRange::set_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.paramRange.name)
}
#if LANG_CXX11
inline void paramRange::set_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.paramRange.name)
}
#endif
inline void paramRange::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.paramRange.name)
}
inline void paramRange::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.paramRange.name)
}
inline ::std::string* paramRange::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:pb.paramRange.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* paramRange::release_name() {
  // @@protoc_insertion_point(field_release:pb.paramRange.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void paramRange::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.paramRange.name)
}

// required float min = 2;
inline bool paramRange::has_min() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void paramRange::clear_min() {
  min_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float paramRange::min() const {
  // @@protoc_insertion_point(field_get:pb.paramRange.min)
  return min_;
}
inline void paramRange::set_min(float value) {
  _has_bits_[0] |= 0x00000002u;
  min_ = value;
  // @@protoc_insertion_point(field_set:pb.paramRange.min)
}

// required float max = 3;
inline bool paramRange::has_max() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void paramRange::clear_max() {
  max_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float paramRange::max() const {
  // @@protoc_insertion_point(field_get:pb.paramRange.max)
  return max_;
}
inline void paramRange::set_max(float value) {
  _has_bits_[0] |= 0x00000004u;
  max_ = value;
  // @@protoc_insertion_point(field_set:pb.paramRange.max)
}

// -------------------------------------------------------------------

// rangeGate

// required .pb.paramRange param = 1;
inline bool rangeGate::has_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void rangeGate::clear_param() {
  if (param_ != nullptr) param_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::pb::paramRange& rangeGate::param() const {
  const ::pb::paramRange* p = param_;
  // @@protoc_insertion_point(field_get:pb.rangeGate.param)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::paramRange*>(
      &::pb::_paramRange_default_instance_);
}
inline ::pb::paramRange* rangeGate::release_param() {
  // @@protoc_insertion_point(field_release:pb.rangeGate.param)
  _has_bits_[0] &= ~0x00000001u;
  ::pb::paramRange* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::pb::paramRange* rangeGate::mutable_param() {
  _has_bits_[0] |= 0x00000001u;
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::paramRange>(GetArenaNoVirtual());
    param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.rangeGate.param)
  return param_;
}
inline void rangeGate::set_allocated_param(::pb::paramRange* param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:pb.rangeGate.param)
}

// -------------------------------------------------------------------

// paramPoly

// repeated string params = 1;
inline int paramPoly::params_size() const {
  return params_.size();
}
inline void paramPoly::clear_params() {
  params_.Clear();
}
inline const ::std::string& paramPoly::params(int index) const {
  // @@protoc_insertion_point(field_get:pb.paramPoly.params)
  return params_.Get(index);
}
inline ::std::string* paramPoly::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:pb.paramPoly.params)
  return params_.Mutable(index);
}
inline void paramPoly::set_params(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.paramPoly.params)
  params_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void paramPoly::set_params(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.paramPoly.params)
  params_.Mutable(index)->assign(std::move(value));
}
#endif
inline void paramPoly::set_params(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  params_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.paramPoly.params)
}
inline void paramPoly::set_params(int index, const char* value, size_t size) {
  params_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.paramPoly.params)
}
inline ::std::string* paramPoly::add_params() {
  // @@protoc_insertion_point(field_add_mutable:pb.paramPoly.params)
  return params_.Add();
}
inline void paramPoly::add_params(const ::std::string& value) {
  params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.paramPoly.params)
}
#if LANG_CXX11
inline void paramPoly::add_params(::std::string&& value) {
  params_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.paramPoly.params)
}
#endif
inline void paramPoly::add_params(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.paramPoly.params)
}
inline void paramPoly::add_params(const char* value, size_t size) {
  params_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.paramPoly.params)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
paramPoly::params() const {
  // @@protoc_insertion_point(field_list:pb.paramPoly.params)
  return params_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
paramPoly::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:pb.paramPoly.params)
  return &params_;
}

// repeated .pb.coordinate vertices = 2;
inline int paramPoly::vertices_size() const {
  return vertices_.size();
}
inline void paramPoly::clear_vertices() {
  vertices_.Clear();
}
inline ::pb::coordinate* paramPoly::mutable_vertices(int index) {
  // @@protoc_insertion_point(field_mutable:pb.paramPoly.vertices)
  return vertices_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::coordinate >*
paramPoly::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:pb.paramPoly.vertices)
  return &vertices_;
}
inline const ::pb::coordinate& paramPoly::vertices(int index) const {
  // @@protoc_insertion_point(field_get:pb.paramPoly.vertices)
  return vertices_.Get(index);
}
inline ::pb::coordinate* paramPoly::add_vertices() {
  // @@protoc_insertion_point(field_add:pb.paramPoly.vertices)
  return vertices_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::coordinate >&
paramPoly::vertices() const {
  // @@protoc_insertion_point(field_list:pb.paramPoly.vertices)
  return vertices_;
}

// -------------------------------------------------------------------

// polygonGate

// required .pb.paramPoly param = 1;
inline bool polygonGate::has_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void polygonGate::clear_param() {
  if (param_ != nullptr) param_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::pb::paramPoly& polygonGate::param() const {
  const ::pb::paramPoly* p = param_;
  // @@protoc_insertion_point(field_get:pb.polygonGate.param)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::paramPoly*>(
      &::pb::_paramPoly_default_instance_);
}
inline ::pb::paramPoly* polygonGate::release_param() {
  // @@protoc_insertion_point(field_release:pb.polygonGate.param)
  _has_bits_[0] &= ~0x00000001u;
  ::pb::paramPoly* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::pb::paramPoly* polygonGate::mutable_param() {
  _has_bits_[0] |= 0x00000001u;
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::paramPoly>(GetArenaNoVirtual());
    param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.polygonGate.param)
  return param_;
}
inline void polygonGate::set_allocated_param(::pb::paramPoly* param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:pb.polygonGate.param)
}

// -------------------------------------------------------------------

// coordinate

// required float x = 1;
inline bool coordinate::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void coordinate::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float coordinate::x() const {
  // @@protoc_insertion_point(field_get:pb.coordinate.x)
  return x_;
}
inline void coordinate::set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
  // @@protoc_insertion_point(field_set:pb.coordinate.x)
}

// required float y = 2;
inline bool coordinate::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void coordinate::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float coordinate::y() const {
  // @@protoc_insertion_point(field_get:pb.coordinate.y)
  return y_;
}
inline void coordinate::set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
  // @@protoc_insertion_point(field_set:pb.coordinate.y)
}

// -------------------------------------------------------------------

// ellipseGate

// required .pb.coordinate mu = 1;
inline bool ellipseGate::has_mu() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ellipseGate::clear_mu() {
  if (mu_ != nullptr) mu_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::pb::coordinate& ellipseGate::mu() const {
  const ::pb::coordinate* p = mu_;
  // @@protoc_insertion_point(field_get:pb.ellipseGate.mu)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::coordinate*>(
      &::pb::_coordinate_default_instance_);
}
inline ::pb::coordinate* ellipseGate::release_mu() {
  // @@protoc_insertion_point(field_release:pb.ellipseGate.mu)
  _has_bits_[0] &= ~0x00000001u;
  ::pb::coordinate* temp = mu_;
  mu_ = nullptr;
  return temp;
}
inline ::pb::coordinate* ellipseGate::mutable_mu() {
  _has_bits_[0] |= 0x00000001u;
  if (mu_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::coordinate>(GetArenaNoVirtual());
    mu_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.ellipseGate.mu)
  return mu_;
}
inline void ellipseGate::set_allocated_mu(::pb::coordinate* mu) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete mu_;
  }
  if (mu) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mu = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mu, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mu_ = mu;
  // @@protoc_insertion_point(field_set_allocated:pb.ellipseGate.mu)
}

// repeated .pb.coordinate cov = 2;
inline int ellipseGate::cov_size() const {
  return cov_.size();
}
inline void ellipseGate::clear_cov() {
  cov_.Clear();
}
inline ::pb::coordinate* ellipseGate::mutable_cov(int index) {
  // @@protoc_insertion_point(field_mutable:pb.ellipseGate.cov)
  return cov_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::coordinate >*
ellipseGate::mutable_cov() {
  // @@protoc_insertion_point(field_mutable_list:pb.ellipseGate.cov)
  return &cov_;
}
inline const ::pb::coordinate& ellipseGate::cov(int index) const {
  // @@protoc_insertion_point(field_get:pb.ellipseGate.cov)
  return cov_.Get(index);
}
inline ::pb::coordinate* ellipseGate::add_cov() {
  // @@protoc_insertion_point(field_add:pb.ellipseGate.cov)
  return cov_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::coordinate >&
ellipseGate::cov() const {
  // @@protoc_insertion_point(field_list:pb.ellipseGate.cov)
  return cov_;
}

// repeated .pb.coordinate antipodal_vertices = 3;
inline int ellipseGate::antipodal_vertices_size() const {
  return antipodal_vertices_.size();
}
inline void ellipseGate::clear_antipodal_vertices() {
  antipodal_vertices_.Clear();
}
inline ::pb::coordinate* ellipseGate::mutable_antipodal_vertices(int index) {
  // @@protoc_insertion_point(field_mutable:pb.ellipseGate.antipodal_vertices)
  return antipodal_vertices_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::coordinate >*
ellipseGate::mutable_antipodal_vertices() {
  // @@protoc_insertion_point(field_mutable_list:pb.ellipseGate.antipodal_vertices)
  return &antipodal_vertices_;
}
inline const ::pb::coordinate& ellipseGate::antipodal_vertices(int index) const {
  // @@protoc_insertion_point(field_get:pb.ellipseGate.antipodal_vertices)
  return antipodal_vertices_.Get(index);
}
inline ::pb::coordinate* ellipseGate::add_antipodal_vertices() {
  // @@protoc_insertion_point(field_add:pb.ellipseGate.antipodal_vertices)
  return antipodal_vertices_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::coordinate >&
ellipseGate::antipodal_vertices() const {
  // @@protoc_insertion_point(field_list:pb.ellipseGate.antipodal_vertices)
  return antipodal_vertices_;
}

// optional float dist = 4;
inline bool ellipseGate::has_dist() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ellipseGate::clear_dist() {
  dist_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float ellipseGate::dist() const {
  // @@protoc_insertion_point(field_get:pb.ellipseGate.dist)
  return dist_;
}
inline void ellipseGate::set_dist(float value) {
  _has_bits_[0] |= 0x00000002u;
  dist_ = value;
  // @@protoc_insertion_point(field_set:pb.ellipseGate.dist)
}

// -------------------------------------------------------------------

// BOOL_GATE_OP

// repeated string path = 1;
inline int BOOL_GATE_OP::path_size() const {
  return path_.size();
}
inline void BOOL_GATE_OP::clear_path() {
  path_.Clear();
}
inline const ::std::string& BOOL_GATE_OP::path(int index) const {
  // @@protoc_insertion_point(field_get:pb.BOOL_GATE_OP.path)
  return path_.Get(index);
}
inline ::std::string* BOOL_GATE_OP::mutable_path(int index) {
  // @@protoc_insertion_point(field_mutable:pb.BOOL_GATE_OP.path)
  return path_.Mutable(index);
}
inline void BOOL_GATE_OP::set_path(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.BOOL_GATE_OP.path)
  path_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void BOOL_GATE_OP::set_path(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.BOOL_GATE_OP.path)
  path_.Mutable(index)->assign(std::move(value));
}
#endif
inline void BOOL_GATE_OP::set_path(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.BOOL_GATE_OP.path)
}
inline void BOOL_GATE_OP::set_path(int index, const char* value, size_t size) {
  path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.BOOL_GATE_OP.path)
}
inline ::std::string* BOOL_GATE_OP::add_path() {
  // @@protoc_insertion_point(field_add_mutable:pb.BOOL_GATE_OP.path)
  return path_.Add();
}
inline void BOOL_GATE_OP::add_path(const ::std::string& value) {
  path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.BOOL_GATE_OP.path)
}
#if LANG_CXX11
inline void BOOL_GATE_OP::add_path(::std::string&& value) {
  path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.BOOL_GATE_OP.path)
}
#endif
inline void BOOL_GATE_OP::add_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.BOOL_GATE_OP.path)
}
inline void BOOL_GATE_OP::add_path(const char* value, size_t size) {
  path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.BOOL_GATE_OP.path)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
BOOL_GATE_OP::path() const {
  // @@protoc_insertion_point(field_list:pb.BOOL_GATE_OP.path)
  return path_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
BOOL_GATE_OP::mutable_path() {
  // @@protoc_insertion_point(field_mutable_list:pb.BOOL_GATE_OP.path)
  return &path_;
}

// required uint32 op = 2;
inline bool BOOL_GATE_OP::has_op() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BOOL_GATE_OP::clear_op() {
  op_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 BOOL_GATE_OP::op() const {
  // @@protoc_insertion_point(field_get:pb.BOOL_GATE_OP.op)
  return op_;
}
inline void BOOL_GATE_OP::set_op(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  op_ = value;
  // @@protoc_insertion_point(field_set:pb.BOOL_GATE_OP.op)
}

// required bool isNot = 3;
inline bool BOOL_GATE_OP::has_isnot() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BOOL_GATE_OP::clear_isnot() {
  isnot_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool BOOL_GATE_OP::isnot() const {
  // @@protoc_insertion_point(field_get:pb.BOOL_GATE_OP.isNot)
  return isnot_;
}
inline void BOOL_GATE_OP::set_isnot(bool value) {
  _has_bits_[0] |= 0x00000002u;
  isnot_ = value;
  // @@protoc_insertion_point(field_set:pb.BOOL_GATE_OP.isNot)
}

// -------------------------------------------------------------------

// boolGate

// repeated .pb.BOOL_GATE_OP boolOpSpec = 1;
inline int boolGate::boolopspec_size() const {
  return boolopspec_.size();
}
inline void boolGate::clear_boolopspec() {
  boolopspec_.Clear();
}
inline ::pb::BOOL_GATE_OP* boolGate::mutable_boolopspec(int index) {
  // @@protoc_insertion_point(field_mutable:pb.boolGate.boolOpSpec)
  return boolopspec_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::BOOL_GATE_OP >*
boolGate::mutable_boolopspec() {
  // @@protoc_insertion_point(field_mutable_list:pb.boolGate.boolOpSpec)
  return &boolopspec_;
}
inline const ::pb::BOOL_GATE_OP& boolGate::boolopspec(int index) const {
  // @@protoc_insertion_point(field_get:pb.boolGate.boolOpSpec)
  return boolopspec_.Get(index);
}
inline ::pb::BOOL_GATE_OP* boolGate::add_boolopspec() {
  // @@protoc_insertion_point(field_add:pb.boolGate.boolOpSpec)
  return boolopspec_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::BOOL_GATE_OP >&
boolGate::boolopspec() const {
  // @@protoc_insertion_point(field_list:pb.boolGate.boolOpSpec)
  return boolopspec_;
}

// -------------------------------------------------------------------

// clusterGate

// required string cluster_method = 1;
inline bool clusterGate::has_cluster_method() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void clusterGate::clear_cluster_method() {
  cluster_method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& clusterGate::cluster_method() const {
  // @@protoc_insertion_point(field_get:pb.clusterGate.cluster_method)
  return cluster_method_.GetNoArena();
}
inline void clusterGate::set_cluster_method(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  cluster_method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.clusterGate.cluster_method)
}
#if LANG_CXX11
inline void clusterGate::set_cluster_method(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  cluster_method_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.clusterGate.cluster_method)
}
#endif
inline void clusterGate::set_cluster_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  cluster_method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.clusterGate.cluster_method)
}
inline void clusterGate::set_cluster_method(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  cluster_method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.clusterGate.cluster_method)
}
inline ::std::string* clusterGate::mutable_cluster_method() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:pb.clusterGate.cluster_method)
  return cluster_method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* clusterGate::release_cluster_method() {
  // @@protoc_insertion_point(field_release:pb.clusterGate.cluster_method)
  if (!has_cluster_method()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return cluster_method_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void clusterGate::set_allocated_cluster_method(::std::string* cluster_method) {
  if (cluster_method != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cluster_method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_method);
  // @@protoc_insertion_point(field_set_allocated:pb.clusterGate.cluster_method)
}

// -------------------------------------------------------------------

// gate

// required bool neg = 1;
inline bool gate::has_neg() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void gate::clear_neg() {
  neg_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool gate::neg() const {
  // @@protoc_insertion_point(field_get:pb.gate.neg)
  return neg_;
}
inline void gate::set_neg(bool value) {
  _has_bits_[0] |= 0x00000020u;
  neg_ = value;
  // @@protoc_insertion_point(field_set:pb.gate.neg)
}

// required bool isTransformed = 2;
inline bool gate::has_istransformed() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void gate::clear_istransformed() {
  istransformed_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool gate::istransformed() const {
  // @@protoc_insertion_point(field_get:pb.gate.isTransformed)
  return istransformed_;
}
inline void gate::set_istransformed(bool value) {
  _has_bits_[0] |= 0x00000040u;
  istransformed_ = value;
  // @@protoc_insertion_point(field_set:pb.gate.isTransformed)
}

// required bool isGained = 3;
inline bool gate::has_isgained() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void gate::clear_isgained() {
  isgained_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool gate::isgained() const {
  // @@protoc_insertion_point(field_get:pb.gate.isGained)
  return isgained_;
}
inline void gate::set_isgained(bool value) {
  _has_bits_[0] |= 0x00000080u;
  isgained_ = value;
  // @@protoc_insertion_point(field_set:pb.gate.isGained)
}

// required .pb.GATE_TYPE type = 4;
inline bool gate::has_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void gate::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::pb::GATE_TYPE gate::type() const {
  // @@protoc_insertion_point(field_get:pb.gate.type)
  return static_cast< ::pb::GATE_TYPE >(type_);
}
inline void gate::set_type(::pb::GATE_TYPE value) {
  assert(::pb::GATE_TYPE_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.gate.type)
}

// optional .pb.rangeGate rg = 5;
inline bool gate::has_rg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gate::clear_rg() {
  if (rg_ != nullptr) rg_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::pb::rangeGate& gate::rg() const {
  const ::pb::rangeGate* p = rg_;
  // @@protoc_insertion_point(field_get:pb.gate.rg)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::rangeGate*>(
      &::pb::_rangeGate_default_instance_);
}
inline ::pb::rangeGate* gate::release_rg() {
  // @@protoc_insertion_point(field_release:pb.gate.rg)
  _has_bits_[0] &= ~0x00000001u;
  ::pb::rangeGate* temp = rg_;
  rg_ = nullptr;
  return temp;
}
inline ::pb::rangeGate* gate::mutable_rg() {
  _has_bits_[0] |= 0x00000001u;
  if (rg_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::rangeGate>(GetArenaNoVirtual());
    rg_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.gate.rg)
  return rg_;
}
inline void gate::set_allocated_rg(::pb::rangeGate* rg) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete rg_;
  }
  if (rg) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rg = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rg, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  rg_ = rg;
  // @@protoc_insertion_point(field_set_allocated:pb.gate.rg)
}

// optional .pb.polygonGate pg = 6;
inline bool gate::has_pg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gate::clear_pg() {
  if (pg_ != nullptr) pg_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::pb::polygonGate& gate::pg() const {
  const ::pb::polygonGate* p = pg_;
  // @@protoc_insertion_point(field_get:pb.gate.pg)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::polygonGate*>(
      &::pb::_polygonGate_default_instance_);
}
inline ::pb::polygonGate* gate::release_pg() {
  // @@protoc_insertion_point(field_release:pb.gate.pg)
  _has_bits_[0] &= ~0x00000002u;
  ::pb::polygonGate* temp = pg_;
  pg_ = nullptr;
  return temp;
}
inline ::pb::polygonGate* gate::mutable_pg() {
  _has_bits_[0] |= 0x00000002u;
  if (pg_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::polygonGate>(GetArenaNoVirtual());
    pg_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.gate.pg)
  return pg_;
}
inline void gate::set_allocated_pg(::pb::polygonGate* pg) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pg_;
  }
  if (pg) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pg = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pg, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pg_ = pg;
  // @@protoc_insertion_point(field_set_allocated:pb.gate.pg)
}

// optional .pb.ellipseGate eg = 7;
inline bool gate::has_eg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gate::clear_eg() {
  if (eg_ != nullptr) eg_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::pb::ellipseGate& gate::eg() const {
  const ::pb::ellipseGate* p = eg_;
  // @@protoc_insertion_point(field_get:pb.gate.eg)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::ellipseGate*>(
      &::pb::_ellipseGate_default_instance_);
}
inline ::pb::ellipseGate* gate::release_eg() {
  // @@protoc_insertion_point(field_release:pb.gate.eg)
  _has_bits_[0] &= ~0x00000004u;
  ::pb::ellipseGate* temp = eg_;
  eg_ = nullptr;
  return temp;
}
inline ::pb::ellipseGate* gate::mutable_eg() {
  _has_bits_[0] |= 0x00000004u;
  if (eg_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::ellipseGate>(GetArenaNoVirtual());
    eg_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.gate.eg)
  return eg_;
}
inline void gate::set_allocated_eg(::pb::ellipseGate* eg) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete eg_;
  }
  if (eg) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      eg = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, eg, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  eg_ = eg;
  // @@protoc_insertion_point(field_set_allocated:pb.gate.eg)
}

// optional .pb.boolGate bg = 8;
inline bool gate::has_bg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gate::clear_bg() {
  if (bg_ != nullptr) bg_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::pb::boolGate& gate::bg() const {
  const ::pb::boolGate* p = bg_;
  // @@protoc_insertion_point(field_get:pb.gate.bg)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::boolGate*>(
      &::pb::_boolGate_default_instance_);
}
inline ::pb::boolGate* gate::release_bg() {
  // @@protoc_insertion_point(field_release:pb.gate.bg)
  _has_bits_[0] &= ~0x00000008u;
  ::pb::boolGate* temp = bg_;
  bg_ = nullptr;
  return temp;
}
inline ::pb::boolGate* gate::mutable_bg() {
  _has_bits_[0] |= 0x00000008u;
  if (bg_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::boolGate>(GetArenaNoVirtual());
    bg_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.gate.bg)
  return bg_;
}
inline void gate::set_allocated_bg(::pb::boolGate* bg) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bg_;
  }
  if (bg) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bg = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bg, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  bg_ = bg;
  // @@protoc_insertion_point(field_set_allocated:pb.gate.bg)
}

// optional .pb.clusterGate cg = 9;
inline bool gate::has_cg() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gate::clear_cg() {
  if (cg_ != nullptr) cg_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::pb::clusterGate& gate::cg() const {
  const ::pb::clusterGate* p = cg_;
  // @@protoc_insertion_point(field_get:pb.gate.cg)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::clusterGate*>(
      &::pb::_clusterGate_default_instance_);
}
inline ::pb::clusterGate* gate::release_cg() {
  // @@protoc_insertion_point(field_release:pb.gate.cg)
  _has_bits_[0] &= ~0x00000010u;
  ::pb::clusterGate* temp = cg_;
  cg_ = nullptr;
  return temp;
}
inline ::pb::clusterGate* gate::mutable_cg() {
  _has_bits_[0] |= 0x00000010u;
  if (cg_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::clusterGate>(GetArenaNoVirtual());
    cg_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.gate.cg)
  return cg_;
}
inline void gate::set_allocated_cg(::pb::clusterGate* cg) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cg_;
  }
  if (cg) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cg = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cg, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  cg_ = cg;
  // @@protoc_insertion_point(field_set_allocated:pb.gate.cg)
}

// -------------------------------------------------------------------

// POPSTATS

// required string statType = 1;
inline bool POPSTATS::has_stattype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void POPSTATS::clear_stattype() {
  stattype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& POPSTATS::stattype() const {
  // @@protoc_insertion_point(field_get:pb.POPSTATS.statType)
  return stattype_.GetNoArena();
}
inline void POPSTATS::set_stattype(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  stattype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.POPSTATS.statType)
}
#if LANG_CXX11
inline void POPSTATS::set_stattype(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  stattype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.POPSTATS.statType)
}
#endif
inline void POPSTATS::set_stattype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  stattype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.POPSTATS.statType)
}
inline void POPSTATS::set_stattype(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  stattype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.POPSTATS.statType)
}
inline ::std::string* POPSTATS::mutable_stattype() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:pb.POPSTATS.statType)
  return stattype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* POPSTATS::release_stattype() {
  // @@protoc_insertion_point(field_release:pb.POPSTATS.statType)
  if (!has_stattype()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return stattype_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void POPSTATS::set_allocated_stattype(::std::string* stattype) {
  if (stattype != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  stattype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stattype);
  // @@protoc_insertion_point(field_set_allocated:pb.POPSTATS.statType)
}

// required float statVal = 2;
inline bool POPSTATS::has_statval() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void POPSTATS::clear_statval() {
  statval_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float POPSTATS::statval() const {
  // @@protoc_insertion_point(field_get:pb.POPSTATS.statVal)
  return statval_;
}
inline void POPSTATS::set_statval(float value) {
  _has_bits_[0] |= 0x00000002u;
  statval_ = value;
  // @@protoc_insertion_point(field_set:pb.POPSTATS.statVal)
}

// -------------------------------------------------------------------

// calibrationTable

// repeated float x = 1 [packed = true];
inline int calibrationTable::x_size() const {
  return x_.size();
}
inline void calibrationTable::clear_x() {
  x_.Clear();
}
inline float calibrationTable::x(int index) const {
  // @@protoc_insertion_point(field_get:pb.calibrationTable.x)
  return x_.Get(index);
}
inline void calibrationTable::set_x(int index, float value) {
  x_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.calibrationTable.x)
}
inline void calibrationTable::add_x(float value) {
  x_.Add(value);
  // @@protoc_insertion_point(field_add:pb.calibrationTable.x)
}
inline const ::google::protobuf::RepeatedField< float >&
calibrationTable::x() const {
  // @@protoc_insertion_point(field_list:pb.calibrationTable.x)
  return x_;
}
inline ::google::protobuf::RepeatedField< float >*
calibrationTable::mutable_x() {
  // @@protoc_insertion_point(field_mutable_list:pb.calibrationTable.x)
  return &x_;
}

// repeated float y = 2 [packed = true];
inline int calibrationTable::y_size() const {
  return y_.size();
}
inline void calibrationTable::clear_y() {
  y_.Clear();
}
inline float calibrationTable::y(int index) const {
  // @@protoc_insertion_point(field_get:pb.calibrationTable.y)
  return y_.Get(index);
}
inline void calibrationTable::set_y(int index, float value) {
  y_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.calibrationTable.y)
}
inline void calibrationTable::add_y(float value) {
  y_.Add(value);
  // @@protoc_insertion_point(field_add:pb.calibrationTable.y)
}
inline const ::google::protobuf::RepeatedField< float >&
calibrationTable::y() const {
  // @@protoc_insertion_point(field_list:pb.calibrationTable.y)
  return y_;
}
inline ::google::protobuf::RepeatedField< float >*
calibrationTable::mutable_y() {
  // @@protoc_insertion_point(field_mutable_list:pb.calibrationTable.y)
  return &y_;
}

// repeated float b = 3 [packed = true];
inline int calibrationTable::b_size() const {
  return b_.size();
}
inline void calibrationTable::clear_b() {
  b_.Clear();
}
inline float calibrationTable::b(int index) const {
  // @@protoc_insertion_point(field_get:pb.calibrationTable.b)
  return b_.Get(index);
}
inline void calibrationTable::set_b(int index, float value) {
  b_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.calibrationTable.b)
}
inline void calibrationTable::add_b(float value) {
  b_.Add(value);
  // @@protoc_insertion_point(field_add:pb.calibrationTable.b)
}
inline const ::google::protobuf::RepeatedField< float >&
calibrationTable::b() const {
  // @@protoc_insertion_point(field_list:pb.calibrationTable.b)
  return b_;
}
inline ::google::protobuf::RepeatedField< float >*
calibrationTable::mutable_b() {
  // @@protoc_insertion_point(field_mutable_list:pb.calibrationTable.b)
  return &b_;
}

// repeated float c = 4 [packed = true];
inline int calibrationTable::c_size() const {
  return c_.size();
}
inline void calibrationTable::clear_c() {
  c_.Clear();
}
inline float calibrationTable::c(int index) const {
  // @@protoc_insertion_point(field_get:pb.calibrationTable.c)
  return c_.Get(index);
}
inline void calibrationTable::set_c(int index, float value) {
  c_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.calibrationTable.c)
}
inline void calibrationTable::add_c(float value) {
  c_.Add(value);
  // @@protoc_insertion_point(field_add:pb.calibrationTable.c)
}
inline const ::google::protobuf::RepeatedField< float >&
calibrationTable::c() const {
  // @@protoc_insertion_point(field_list:pb.calibrationTable.c)
  return c_;
}
inline ::google::protobuf::RepeatedField< float >*
calibrationTable::mutable_c() {
  // @@protoc_insertion_point(field_mutable_list:pb.calibrationTable.c)
  return &c_;
}

// repeated float d = 5 [packed = true];
inline int calibrationTable::d_size() const {
  return d_.size();
}
inline void calibrationTable::clear_d() {
  d_.Clear();
}
inline float calibrationTable::d(int index) const {
  // @@protoc_insertion_point(field_get:pb.calibrationTable.d)
  return d_.Get(index);
}
inline void calibrationTable::set_d(int index, float value) {
  d_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.calibrationTable.d)
}
inline void calibrationTable::add_d(float value) {
  d_.Add(value);
  // @@protoc_insertion_point(field_add:pb.calibrationTable.d)
}
inline const ::google::protobuf::RepeatedField< float >&
calibrationTable::d() const {
  // @@protoc_insertion_point(field_list:pb.calibrationTable.d)
  return d_;
}
inline ::google::protobuf::RepeatedField< float >*
calibrationTable::mutable_d() {
  // @@protoc_insertion_point(field_mutable_list:pb.calibrationTable.d)
  return &d_;
}

// optional uint32 spline_method = 6;
inline bool calibrationTable::has_spline_method() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void calibrationTable::clear_spline_method() {
  spline_method_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 calibrationTable::spline_method() const {
  // @@protoc_insertion_point(field_get:pb.calibrationTable.spline_method)
  return spline_method_;
}
inline void calibrationTable::set_spline_method(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  spline_method_ = value;
  // @@protoc_insertion_point(field_set:pb.calibrationTable.spline_method)
}

// optional string caltype = 7;
inline bool calibrationTable::has_caltype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void calibrationTable::clear_caltype() {
  caltype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& calibrationTable::caltype() const {
  // @@protoc_insertion_point(field_get:pb.calibrationTable.caltype)
  return caltype_.GetNoArena();
}
inline void calibrationTable::set_caltype(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  caltype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.calibrationTable.caltype)
}
#if LANG_CXX11
inline void calibrationTable::set_caltype(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  caltype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.calibrationTable.caltype)
}
#endif
inline void calibrationTable::set_caltype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  caltype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.calibrationTable.caltype)
}
inline void calibrationTable::set_caltype(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  caltype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.calibrationTable.caltype)
}
inline ::std::string* calibrationTable::mutable_caltype() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:pb.calibrationTable.caltype)
  return caltype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* calibrationTable::release_caltype() {
  // @@protoc_insertion_point(field_release:pb.calibrationTable.caltype)
  if (!has_caltype()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return caltype_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void calibrationTable::set_allocated_caltype(::std::string* caltype) {
  if (caltype != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  caltype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), caltype);
  // @@protoc_insertion_point(field_set_allocated:pb.calibrationTable.caltype)
}

// optional bool flag = 8;
inline bool calibrationTable::has_flag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void calibrationTable::clear_flag() {
  flag_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool calibrationTable::flag() const {
  // @@protoc_insertion_point(field_get:pb.calibrationTable.flag)
  return flag_;
}
inline void calibrationTable::set_flag(bool value) {
  _has_bits_[0] |= 0x00000004u;
  flag_ = value;
  // @@protoc_insertion_point(field_set:pb.calibrationTable.flag)
}

// -------------------------------------------------------------------

// biexpTrans

// optional uint32 channelRange = 1;
inline bool biexpTrans::has_channelrange() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void biexpTrans::clear_channelrange() {
  channelrange_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 biexpTrans::channelrange() const {
  // @@protoc_insertion_point(field_get:pb.biexpTrans.channelRange)
  return channelrange_;
}
inline void biexpTrans::set_channelrange(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  channelrange_ = value;
  // @@protoc_insertion_point(field_set:pb.biexpTrans.channelRange)
}

// optional float pos = 2;
inline bool biexpTrans::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void biexpTrans::clear_pos() {
  pos_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float biexpTrans::pos() const {
  // @@protoc_insertion_point(field_get:pb.biexpTrans.pos)
  return pos_;
}
inline void biexpTrans::set_pos(float value) {
  _has_bits_[0] |= 0x00000002u;
  pos_ = value;
  // @@protoc_insertion_point(field_set:pb.biexpTrans.pos)
}

// optional float neg = 3;
inline bool biexpTrans::has_neg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void biexpTrans::clear_neg() {
  neg_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float biexpTrans::neg() const {
  // @@protoc_insertion_point(field_get:pb.biexpTrans.neg)
  return neg_;
}
inline void biexpTrans::set_neg(float value) {
  _has_bits_[0] |= 0x00000004u;
  neg_ = value;
  // @@protoc_insertion_point(field_set:pb.biexpTrans.neg)
}

// optional float widthBasis = 4;
inline bool biexpTrans::has_widthbasis() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void biexpTrans::clear_widthbasis() {
  widthbasis_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float biexpTrans::widthbasis() const {
  // @@protoc_insertion_point(field_get:pb.biexpTrans.widthBasis)
  return widthbasis_;
}
inline void biexpTrans::set_widthbasis(float value) {
  _has_bits_[0] |= 0x00000008u;
  widthbasis_ = value;
  // @@protoc_insertion_point(field_set:pb.biexpTrans.widthBasis)
}

// optional float maxValue = 5;
inline bool biexpTrans::has_maxvalue() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void biexpTrans::clear_maxvalue() {
  maxvalue_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float biexpTrans::maxvalue() const {
  // @@protoc_insertion_point(field_get:pb.biexpTrans.maxValue)
  return maxvalue_;
}
inline void biexpTrans::set_maxvalue(float value) {
  _has_bits_[0] |= 0x00000010u;
  maxvalue_ = value;
  // @@protoc_insertion_point(field_set:pb.biexpTrans.maxValue)
}

// -------------------------------------------------------------------

// fasinhTrans

// optional float length = 1;
inline bool fasinhTrans::has_length() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void fasinhTrans::clear_length() {
  length_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float fasinhTrans::length() const {
  // @@protoc_insertion_point(field_get:pb.fasinhTrans.length)
  return length_;
}
inline void fasinhTrans::set_length(float value) {
  _has_bits_[0] |= 0x00000001u;
  length_ = value;
  // @@protoc_insertion_point(field_set:pb.fasinhTrans.length)
}

// optional float maxRange = 2;
inline bool fasinhTrans::has_maxrange() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void fasinhTrans::clear_maxrange() {
  maxrange_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float fasinhTrans::maxrange() const {
  // @@protoc_insertion_point(field_get:pb.fasinhTrans.maxRange)
  return maxrange_;
}
inline void fasinhTrans::set_maxrange(float value) {
  _has_bits_[0] |= 0x00000002u;
  maxrange_ = value;
  // @@protoc_insertion_point(field_set:pb.fasinhTrans.maxRange)
}

// optional float T = 3;
inline bool fasinhTrans::has_t() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void fasinhTrans::clear_t() {
  t_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float fasinhTrans::t() const {
  // @@protoc_insertion_point(field_get:pb.fasinhTrans.T)
  return t_;
}
inline void fasinhTrans::set_t(float value) {
  _has_bits_[0] |= 0x00000004u;
  t_ = value;
  // @@protoc_insertion_point(field_set:pb.fasinhTrans.T)
}

// optional float A = 4;
inline bool fasinhTrans::has_a() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void fasinhTrans::clear_a() {
  a_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float fasinhTrans::a() const {
  // @@protoc_insertion_point(field_get:pb.fasinhTrans.A)
  return a_;
}
inline void fasinhTrans::set_a(float value) {
  _has_bits_[0] |= 0x00000008u;
  a_ = value;
  // @@protoc_insertion_point(field_set:pb.fasinhTrans.A)
}

// optional float M = 5;
inline bool fasinhTrans::has_m() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void fasinhTrans::clear_m() {
  m_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float fasinhTrans::m() const {
  // @@protoc_insertion_point(field_get:pb.fasinhTrans.M)
  return m_;
}
inline void fasinhTrans::set_m(float value) {
  _has_bits_[0] |= 0x00000010u;
  m_ = value;
  // @@protoc_insertion_point(field_set:pb.fasinhTrans.M)
}

// -------------------------------------------------------------------

// scaleTrans

// optional float scale_factor = 1;
inline bool scaleTrans::has_scale_factor() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void scaleTrans::clear_scale_factor() {
  scale_factor_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float scaleTrans::scale_factor() const {
  // @@protoc_insertion_point(field_get:pb.scaleTrans.scale_factor)
  return scale_factor_;
}
inline void scaleTrans::set_scale_factor(float value) {
  _has_bits_[0] |= 0x00000001u;
  scale_factor_ = value;
  // @@protoc_insertion_point(field_set:pb.scaleTrans.scale_factor)
}

// -------------------------------------------------------------------

// flinTrans

// optional float min = 1;
inline bool flinTrans::has_min() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void flinTrans::clear_min() {
  min_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float flinTrans::min() const {
  // @@protoc_insertion_point(field_get:pb.flinTrans.min)
  return min_;
}
inline void flinTrans::set_min(float value) {
  _has_bits_[0] |= 0x00000001u;
  min_ = value;
  // @@protoc_insertion_point(field_set:pb.flinTrans.min)
}

// optional float max = 2;
inline bool flinTrans::has_max() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void flinTrans::clear_max() {
  max_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float flinTrans::max() const {
  // @@protoc_insertion_point(field_get:pb.flinTrans.max)
  return max_;
}
inline void flinTrans::set_max(float value) {
  _has_bits_[0] |= 0x00000002u;
  max_ = value;
  // @@protoc_insertion_point(field_set:pb.flinTrans.max)
}

// -------------------------------------------------------------------

// logTrans

// optional float offset = 1;
inline bool logTrans::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void logTrans::clear_offset() {
  offset_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float logTrans::offset() const {
  // @@protoc_insertion_point(field_get:pb.logTrans.offset)
  return offset_;
}
inline void logTrans::set_offset(float value) {
  _has_bits_[0] |= 0x00000001u;
  offset_ = value;
  // @@protoc_insertion_point(field_set:pb.logTrans.offset)
}

// optional float decade = 2;
inline bool logTrans::has_decade() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void logTrans::clear_decade() {
  decade_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float logTrans::decade() const {
  // @@protoc_insertion_point(field_get:pb.logTrans.decade)
  return decade_;
}
inline void logTrans::set_decade(float value) {
  _has_bits_[0] |= 0x00000002u;
  decade_ = value;
  // @@protoc_insertion_point(field_set:pb.logTrans.decade)
}

// optional float T = 3;
inline bool logTrans::has_t() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void logTrans::clear_t() {
  t_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float logTrans::t() const {
  // @@protoc_insertion_point(field_get:pb.logTrans.T)
  return t_;
}
inline void logTrans::set_t(float value) {
  _has_bits_[0] |= 0x00000004u;
  t_ = value;
  // @@protoc_insertion_point(field_set:pb.logTrans.T)
}

// optional float scale = 4;
inline bool logTrans::has_scale() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void logTrans::clear_scale() {
  scale_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float logTrans::scale() const {
  // @@protoc_insertion_point(field_get:pb.logTrans.scale)
  return scale_;
}
inline void logTrans::set_scale(float value) {
  _has_bits_[0] |= 0x00000008u;
  scale_ = value;
  // @@protoc_insertion_point(field_set:pb.logTrans.scale)
}

// -------------------------------------------------------------------

// logicleTrans

// optional float T = 1;
inline bool logicleTrans::has_t() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void logicleTrans::clear_t() {
  t_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float logicleTrans::t() const {
  // @@protoc_insertion_point(field_get:pb.logicleTrans.T)
  return t_;
}
inline void logicleTrans::set_t(float value) {
  _has_bits_[0] |= 0x00000001u;
  t_ = value;
  // @@protoc_insertion_point(field_set:pb.logicleTrans.T)
}

// optional float W = 2;
inline bool logicleTrans::has_w() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void logicleTrans::clear_w() {
  w_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float logicleTrans::w() const {
  // @@protoc_insertion_point(field_get:pb.logicleTrans.W)
  return w_;
}
inline void logicleTrans::set_w(float value) {
  _has_bits_[0] |= 0x00000002u;
  w_ = value;
  // @@protoc_insertion_point(field_set:pb.logicleTrans.W)
}

// optional float M = 3;
inline bool logicleTrans::has_m() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void logicleTrans::clear_m() {
  m_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float logicleTrans::m() const {
  // @@protoc_insertion_point(field_get:pb.logicleTrans.M)
  return m_;
}
inline void logicleTrans::set_m(float value) {
  _has_bits_[0] |= 0x00000004u;
  m_ = value;
  // @@protoc_insertion_point(field_set:pb.logicleTrans.M)
}

// optional float A = 4;
inline bool logicleTrans::has_a() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void logicleTrans::clear_a() {
  a_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float logicleTrans::a() const {
  // @@protoc_insertion_point(field_get:pb.logicleTrans.A)
  return a_;
}
inline void logicleTrans::set_a(float value) {
  _has_bits_[0] |= 0x00000008u;
  a_ = value;
  // @@protoc_insertion_point(field_set:pb.logicleTrans.A)
}

// optional float bins = 5;
inline bool logicleTrans::has_bins() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void logicleTrans::clear_bins() {
  bins_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float logicleTrans::bins() const {
  // @@protoc_insertion_point(field_get:pb.logicleTrans.bins)
  return bins_;
}
inline void logicleTrans::set_bins(float value) {
  _has_bits_[0] |= 0x00000010u;
  bins_ = value;
  // @@protoc_insertion_point(field_set:pb.logicleTrans.bins)
}

// optional bool isGml2 = 6;
inline bool logicleTrans::has_isgml2() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void logicleTrans::clear_isgml2() {
  isgml2_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool logicleTrans::isgml2() const {
  // @@protoc_insertion_point(field_get:pb.logicleTrans.isGml2)
  return isgml2_;
}
inline void logicleTrans::set_isgml2(bool value) {
  _has_bits_[0] |= 0x00000020u;
  isgml2_ = value;
  // @@protoc_insertion_point(field_set:pb.logicleTrans.isGml2)
}

// optional bool isInverse = 7;
inline bool logicleTrans::has_isinverse() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void logicleTrans::clear_isinverse() {
  isinverse_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool logicleTrans::isinverse() const {
  // @@protoc_insertion_point(field_get:pb.logicleTrans.isInverse)
  return isinverse_;
}
inline void logicleTrans::set_isinverse(bool value) {
  _has_bits_[0] |= 0x00000040u;
  isinverse_ = value;
  // @@protoc_insertion_point(field_set:pb.logicleTrans.isInverse)
}

// -------------------------------------------------------------------

// transformation

// optional .pb.calibrationTable calTbl = 1;
inline bool transformation::has_caltbl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void transformation::clear_caltbl() {
  if (caltbl_ != nullptr) caltbl_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::pb::calibrationTable& transformation::caltbl() const {
  const ::pb::calibrationTable* p = caltbl_;
  // @@protoc_insertion_point(field_get:pb.transformation.calTbl)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::calibrationTable*>(
      &::pb::_calibrationTable_default_instance_);
}
inline ::pb::calibrationTable* transformation::release_caltbl() {
  // @@protoc_insertion_point(field_release:pb.transformation.calTbl)
  _has_bits_[0] &= ~0x00000004u;
  ::pb::calibrationTable* temp = caltbl_;
  caltbl_ = nullptr;
  return temp;
}
inline ::pb::calibrationTable* transformation::mutable_caltbl() {
  _has_bits_[0] |= 0x00000004u;
  if (caltbl_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::calibrationTable>(GetArenaNoVirtual());
    caltbl_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.transformation.calTbl)
  return caltbl_;
}
inline void transformation::set_allocated_caltbl(::pb::calibrationTable* caltbl) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete caltbl_;
  }
  if (caltbl) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      caltbl = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, caltbl, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  caltbl_ = caltbl;
  // @@protoc_insertion_point(field_set_allocated:pb.transformation.calTbl)
}

// optional bool isGateOnly = 2;
inline bool transformation::has_isgateonly() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void transformation::clear_isgateonly() {
  isgateonly_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool transformation::isgateonly() const {
  // @@protoc_insertion_point(field_get:pb.transformation.isGateOnly)
  return isgateonly_;
}
inline void transformation::set_isgateonly(bool value) {
  _has_bits_[0] |= 0x00000400u;
  isgateonly_ = value;
  // @@protoc_insertion_point(field_set:pb.transformation.isGateOnly)
}

// optional string name = 4;
inline bool transformation::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void transformation::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& transformation::name() const {
  // @@protoc_insertion_point(field_get:pb.transformation.name)
  return name_.GetNoArena();
}
inline void transformation::set_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.transformation.name)
}
#if LANG_CXX11
inline void transformation::set_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.transformation.name)
}
#endif
inline void transformation::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.transformation.name)
}
inline void transformation::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.transformation.name)
}
inline ::std::string* transformation::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:pb.transformation.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* transformation::release_name() {
  // @@protoc_insertion_point(field_release:pb.transformation.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void transformation::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.transformation.name)
}

// optional string channel = 5;
inline bool transformation::has_channel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void transformation::clear_channel() {
  channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& transformation::channel() const {
  // @@protoc_insertion_point(field_get:pb.transformation.channel)
  return channel_.GetNoArena();
}
inline void transformation::set_channel(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.transformation.channel)
}
#if LANG_CXX11
inline void transformation::set_channel(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  channel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.transformation.channel)
}
#endif
inline void transformation::set_channel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.transformation.channel)
}
inline void transformation::set_channel(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.transformation.channel)
}
inline ::std::string* transformation::mutable_channel() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:pb.transformation.channel)
  return channel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* transformation::release_channel() {
  // @@protoc_insertion_point(field_release:pb.transformation.channel)
  if (!has_channel()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return channel_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void transformation::set_allocated_channel(::std::string* channel) {
  if (channel != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  channel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel);
  // @@protoc_insertion_point(field_set_allocated:pb.transformation.channel)
}

// optional bool isComputed = 6;
inline bool transformation::has_iscomputed() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void transformation::clear_iscomputed() {
  iscomputed_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool transformation::iscomputed() const {
  // @@protoc_insertion_point(field_get:pb.transformation.isComputed)
  return iscomputed_;
}
inline void transformation::set_iscomputed(bool value) {
  _has_bits_[0] |= 0x00000800u;
  iscomputed_ = value;
  // @@protoc_insertion_point(field_set:pb.transformation.isComputed)
}

// optional uint32 type = 12;
inline bool transformation::has_type() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void transformation::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::google::protobuf::uint32 transformation::type() const {
  // @@protoc_insertion_point(field_get:pb.transformation.type)
  return type_;
}
inline void transformation::set_type(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.transformation.type)
}

// optional .pb.TRANS_TYPE trans_type = 3;
inline bool transformation::has_trans_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void transformation::clear_trans_type() {
  trans_type_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::pb::TRANS_TYPE transformation::trans_type() const {
  // @@protoc_insertion_point(field_get:pb.transformation.trans_type)
  return static_cast< ::pb::TRANS_TYPE >(trans_type_);
}
inline void transformation::set_trans_type(::pb::TRANS_TYPE value) {
  assert(::pb::TRANS_TYPE_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  trans_type_ = value;
  // @@protoc_insertion_point(field_set:pb.transformation.trans_type)
}

// optional .pb.biexpTrans bt = 7;
inline bool transformation::has_bt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void transformation::clear_bt() {
  if (bt_ != nullptr) bt_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::pb::biexpTrans& transformation::bt() const {
  const ::pb::biexpTrans* p = bt_;
  // @@protoc_insertion_point(field_get:pb.transformation.bt)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::biexpTrans*>(
      &::pb::_biexpTrans_default_instance_);
}
inline ::pb::biexpTrans* transformation::release_bt() {
  // @@protoc_insertion_point(field_release:pb.transformation.bt)
  _has_bits_[0] &= ~0x00000008u;
  ::pb::biexpTrans* temp = bt_;
  bt_ = nullptr;
  return temp;
}
inline ::pb::biexpTrans* transformation::mutable_bt() {
  _has_bits_[0] |= 0x00000008u;
  if (bt_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::biexpTrans>(GetArenaNoVirtual());
    bt_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.transformation.bt)
  return bt_;
}
inline void transformation::set_allocated_bt(::pb::biexpTrans* bt) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bt_;
  }
  if (bt) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bt = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bt, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  bt_ = bt;
  // @@protoc_insertion_point(field_set_allocated:pb.transformation.bt)
}

// optional .pb.logTrans lt = 8;
inline bool transformation::has_lt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void transformation::clear_lt() {
  if (lt_ != nullptr) lt_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::pb::logTrans& transformation::lt() const {
  const ::pb::logTrans* p = lt_;
  // @@protoc_insertion_point(field_get:pb.transformation.lt)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::logTrans*>(
      &::pb::_logTrans_default_instance_);
}
inline ::pb::logTrans* transformation::release_lt() {
  // @@protoc_insertion_point(field_release:pb.transformation.lt)
  _has_bits_[0] &= ~0x00000010u;
  ::pb::logTrans* temp = lt_;
  lt_ = nullptr;
  return temp;
}
inline ::pb::logTrans* transformation::mutable_lt() {
  _has_bits_[0] |= 0x00000010u;
  if (lt_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::logTrans>(GetArenaNoVirtual());
    lt_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.transformation.lt)
  return lt_;
}
inline void transformation::set_allocated_lt(::pb::logTrans* lt) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete lt_;
  }
  if (lt) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lt = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lt, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  lt_ = lt;
  // @@protoc_insertion_point(field_set_allocated:pb.transformation.lt)
}

// optional .pb.flinTrans flt = 9;
inline bool transformation::has_flt() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void transformation::clear_flt() {
  if (flt_ != nullptr) flt_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::pb::flinTrans& transformation::flt() const {
  const ::pb::flinTrans* p = flt_;
  // @@protoc_insertion_point(field_get:pb.transformation.flt)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::flinTrans*>(
      &::pb::_flinTrans_default_instance_);
}
inline ::pb::flinTrans* transformation::release_flt() {
  // @@protoc_insertion_point(field_release:pb.transformation.flt)
  _has_bits_[0] &= ~0x00000020u;
  ::pb::flinTrans* temp = flt_;
  flt_ = nullptr;
  return temp;
}
inline ::pb::flinTrans* transformation::mutable_flt() {
  _has_bits_[0] |= 0x00000020u;
  if (flt_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::flinTrans>(GetArenaNoVirtual());
    flt_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.transformation.flt)
  return flt_;
}
inline void transformation::set_allocated_flt(::pb::flinTrans* flt) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete flt_;
  }
  if (flt) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      flt = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, flt, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  flt_ = flt;
  // @@protoc_insertion_point(field_set_allocated:pb.transformation.flt)
}

// optional .pb.scaleTrans st = 10;
inline bool transformation::has_st() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void transformation::clear_st() {
  if (st_ != nullptr) st_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::pb::scaleTrans& transformation::st() const {
  const ::pb::scaleTrans* p = st_;
  // @@protoc_insertion_point(field_get:pb.transformation.st)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::scaleTrans*>(
      &::pb::_scaleTrans_default_instance_);
}
inline ::pb::scaleTrans* transformation::release_st() {
  // @@protoc_insertion_point(field_release:pb.transformation.st)
  _has_bits_[0] &= ~0x00000040u;
  ::pb::scaleTrans* temp = st_;
  st_ = nullptr;
  return temp;
}
inline ::pb::scaleTrans* transformation::mutable_st() {
  _has_bits_[0] |= 0x00000040u;
  if (st_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::scaleTrans>(GetArenaNoVirtual());
    st_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.transformation.st)
  return st_;
}
inline void transformation::set_allocated_st(::pb::scaleTrans* st) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete st_;
  }
  if (st) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      st = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, st, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  st_ = st;
  // @@protoc_insertion_point(field_set_allocated:pb.transformation.st)
}

// optional .pb.fasinhTrans ft = 11;
inline bool transformation::has_ft() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void transformation::clear_ft() {
  if (ft_ != nullptr) ft_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::pb::fasinhTrans& transformation::ft() const {
  const ::pb::fasinhTrans* p = ft_;
  // @@protoc_insertion_point(field_get:pb.transformation.ft)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::fasinhTrans*>(
      &::pb::_fasinhTrans_default_instance_);
}
inline ::pb::fasinhTrans* transformation::release_ft() {
  // @@protoc_insertion_point(field_release:pb.transformation.ft)
  _has_bits_[0] &= ~0x00000080u;
  ::pb::fasinhTrans* temp = ft_;
  ft_ = nullptr;
  return temp;
}
inline ::pb::fasinhTrans* transformation::mutable_ft() {
  _has_bits_[0] |= 0x00000080u;
  if (ft_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::fasinhTrans>(GetArenaNoVirtual());
    ft_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.transformation.ft)
  return ft_;
}
inline void transformation::set_allocated_ft(::pb::fasinhTrans* ft) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ft_;
  }
  if (ft) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ft = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ft, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  ft_ = ft;
  // @@protoc_insertion_point(field_set_allocated:pb.transformation.ft)
}

// optional .pb.logicleTrans lgt = 13;
inline bool transformation::has_lgt() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void transformation::clear_lgt() {
  if (lgt_ != nullptr) lgt_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::pb::logicleTrans& transformation::lgt() const {
  const ::pb::logicleTrans* p = lgt_;
  // @@protoc_insertion_point(field_get:pb.transformation.lgt)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::logicleTrans*>(
      &::pb::_logicleTrans_default_instance_);
}
inline ::pb::logicleTrans* transformation::release_lgt() {
  // @@protoc_insertion_point(field_release:pb.transformation.lgt)
  _has_bits_[0] &= ~0x00000100u;
  ::pb::logicleTrans* temp = lgt_;
  lgt_ = nullptr;
  return temp;
}
inline ::pb::logicleTrans* transformation::mutable_lgt() {
  _has_bits_[0] |= 0x00000100u;
  if (lgt_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::logicleTrans>(GetArenaNoVirtual());
    lgt_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.transformation.lgt)
  return lgt_;
}
inline void transformation::set_allocated_lgt(::pb::logicleTrans* lgt) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete lgt_;
  }
  if (lgt) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lgt = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lgt, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  lgt_ = lgt;
  // @@protoc_insertion_point(field_set_allocated:pb.transformation.lgt)
}

// -------------------------------------------------------------------

// trans_pair

// required string name = 1;
inline bool trans_pair::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void trans_pair::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& trans_pair::name() const {
  // @@protoc_insertion_point(field_get:pb.trans_pair.name)
  return name_.GetNoArena();
}
inline void trans_pair::set_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.trans_pair.name)
}
#if LANG_CXX11
inline void trans_pair::set_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.trans_pair.name)
}
#endif
inline void trans_pair::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.trans_pair.name)
}
inline void trans_pair::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.trans_pair.name)
}
inline ::std::string* trans_pair::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:pb.trans_pair.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* trans_pair::release_name() {
  // @@protoc_insertion_point(field_release:pb.trans_pair.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void trans_pair::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.trans_pair.name)
}

// optional uint64 trans_address = 2;
inline bool trans_pair::has_trans_address() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void trans_pair::clear_trans_address() {
  trans_address_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint64 trans_pair::trans_address() const {
  // @@protoc_insertion_point(field_get:pb.trans_pair.trans_address)
  return trans_address_;
}
inline void trans_pair::set_trans_address(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  trans_address_ = value;
  // @@protoc_insertion_point(field_set:pb.trans_pair.trans_address)
}

// optional .pb.transformation trans = 3;
inline bool trans_pair::has_trans() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void trans_pair::clear_trans() {
  if (trans_ != nullptr) trans_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::pb::transformation& trans_pair::trans() const {
  const ::pb::transformation* p = trans_;
  // @@protoc_insertion_point(field_get:pb.trans_pair.trans)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::transformation*>(
      &::pb::_transformation_default_instance_);
}
inline ::pb::transformation* trans_pair::release_trans() {
  // @@protoc_insertion_point(field_release:pb.trans_pair.trans)
  _has_bits_[0] &= ~0x00000002u;
  ::pb::transformation* temp = trans_;
  trans_ = nullptr;
  return temp;
}
inline ::pb::transformation* trans_pair::mutable_trans() {
  _has_bits_[0] |= 0x00000002u;
  if (trans_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::transformation>(GetArenaNoVirtual());
    trans_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.trans_pair.trans)
  return trans_;
}
inline void trans_pair::set_allocated_trans(::pb::transformation* trans) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete trans_;
  }
  if (trans) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      trans = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, trans, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  trans_ = trans;
  // @@protoc_insertion_point(field_set_allocated:pb.trans_pair.trans)
}

// -------------------------------------------------------------------

// trans_local

// repeated .pb.trans_pair tp = 1;
inline int trans_local::tp_size() const {
  return tp_.size();
}
inline void trans_local::clear_tp() {
  tp_.Clear();
}
inline ::pb::trans_pair* trans_local::mutable_tp(int index) {
  // @@protoc_insertion_point(field_mutable:pb.trans_local.tp)
  return tp_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::trans_pair >*
trans_local::mutable_tp() {
  // @@protoc_insertion_point(field_mutable_list:pb.trans_local.tp)
  return &tp_;
}
inline const ::pb::trans_pair& trans_local::tp(int index) const {
  // @@protoc_insertion_point(field_get:pb.trans_local.tp)
  return tp_.Get(index);
}
inline ::pb::trans_pair* trans_local::add_tp() {
  // @@protoc_insertion_point(field_add:pb.trans_local.tp)
  return tp_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::trans_pair >&
trans_local::tp() const {
  // @@protoc_insertion_point(field_list:pb.trans_local.tp)
  return tp_;
}

// optional string groupName = 2;
inline bool trans_local::has_groupname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void trans_local::clear_groupname() {
  groupname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& trans_local::groupname() const {
  // @@protoc_insertion_point(field_get:pb.trans_local.groupName)
  return groupname_.GetNoArena();
}
inline void trans_local::set_groupname(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.trans_local.groupName)
}
#if LANG_CXX11
inline void trans_local::set_groupname(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  groupname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.trans_local.groupName)
}
#endif
inline void trans_local::set_groupname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.trans_local.groupName)
}
inline void trans_local::set_groupname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.trans_local.groupName)
}
inline ::std::string* trans_local::mutable_groupname() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:pb.trans_local.groupName)
  return groupname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* trans_local::release_groupname() {
  // @@protoc_insertion_point(field_release:pb.trans_local.groupName)
  if (!has_groupname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return groupname_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void trans_local::set_allocated_groupname(::std::string* groupname) {
  if (groupname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  groupname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), groupname);
  // @@protoc_insertion_point(field_set_allocated:pb.trans_local.groupName)
}

// repeated uint32 sampleIDs = 3 [packed = true];
inline int trans_local::sampleids_size() const {
  return sampleids_.size();
}
inline void trans_local::clear_sampleids() {
  sampleids_.Clear();
}
inline ::google::protobuf::uint32 trans_local::sampleids(int index) const {
  // @@protoc_insertion_point(field_get:pb.trans_local.sampleIDs)
  return sampleids_.Get(index);
}
inline void trans_local::set_sampleids(int index, ::google::protobuf::uint32 value) {
  sampleids_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.trans_local.sampleIDs)
}
inline void trans_local::add_sampleids(::google::protobuf::uint32 value) {
  sampleids_.Add(value);
  // @@protoc_insertion_point(field_add:pb.trans_local.sampleIDs)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
trans_local::sampleids() const {
  // @@protoc_insertion_point(field_list:pb.trans_local.sampleIDs)
  return sampleids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
trans_local::mutable_sampleids() {
  // @@protoc_insertion_point(field_mutable_list:pb.trans_local.sampleIDs)
  return &sampleids_;
}

// -------------------------------------------------------------------

// POPINDICES

// required uint32 nEvents = 1;
inline bool POPINDICES::has_nevents() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void POPINDICES::clear_nevents() {
  nevents_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 POPINDICES::nevents() const {
  // @@protoc_insertion_point(field_get:pb.POPINDICES.nEvents)
  return nevents_;
}
inline void POPINDICES::set_nevents(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  nevents_ = value;
  // @@protoc_insertion_point(field_set:pb.POPINDICES.nEvents)
}

// required .pb.ind_type indtype = 2;
inline bool POPINDICES::has_indtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void POPINDICES::clear_indtype() {
  indtype_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::pb::ind_type POPINDICES::indtype() const {
  // @@protoc_insertion_point(field_get:pb.POPINDICES.indtype)
  return static_cast< ::pb::ind_type >(indtype_);
}
inline void POPINDICES::set_indtype(::pb::ind_type value) {
  assert(::pb::ind_type_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  indtype_ = value;
  // @@protoc_insertion_point(field_set:pb.POPINDICES.indtype)
}

// repeated uint32 iInd = 3 [packed = true];
inline int POPINDICES::iind_size() const {
  return iind_.size();
}
inline void POPINDICES::clear_iind() {
  iind_.Clear();
}
inline ::google::protobuf::uint32 POPINDICES::iind(int index) const {
  // @@protoc_insertion_point(field_get:pb.POPINDICES.iInd)
  return iind_.Get(index);
}
inline void POPINDICES::set_iind(int index, ::google::protobuf::uint32 value) {
  iind_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.POPINDICES.iInd)
}
inline void POPINDICES::add_iind(::google::protobuf::uint32 value) {
  iind_.Add(value);
  // @@protoc_insertion_point(field_add:pb.POPINDICES.iInd)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
POPINDICES::iind() const {
  // @@protoc_insertion_point(field_list:pb.POPINDICES.iInd)
  return iind_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
POPINDICES::mutable_iind() {
  // @@protoc_insertion_point(field_mutable_list:pb.POPINDICES.iInd)
  return &iind_;
}

// optional bytes bInd = 4;
inline bool POPINDICES::has_bind() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void POPINDICES::clear_bind() {
  bind_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& POPINDICES::bind() const {
  // @@protoc_insertion_point(field_get:pb.POPINDICES.bInd)
  return bind_.GetNoArena();
}
inline void POPINDICES::set_bind(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  bind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.POPINDICES.bInd)
}
#if LANG_CXX11
inline void POPINDICES::set_bind(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  bind_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.POPINDICES.bInd)
}
#endif
inline void POPINDICES::set_bind(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  bind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.POPINDICES.bInd)
}
inline void POPINDICES::set_bind(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  bind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.POPINDICES.bInd)
}
inline ::std::string* POPINDICES::mutable_bind() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:pb.POPINDICES.bInd)
  return bind_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* POPINDICES::release_bind() {
  // @@protoc_insertion_point(field_release:pb.POPINDICES.bInd)
  if (!has_bind()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return bind_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void POPINDICES::set_allocated_bind(::std::string* bind) {
  if (bind != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  bind_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bind);
  // @@protoc_insertion_point(field_set_allocated:pb.POPINDICES.bInd)
}

// -------------------------------------------------------------------

// nodeProperties

// required string thisName = 1;
inline bool nodeProperties::has_thisname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void nodeProperties::clear_thisname() {
  thisname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& nodeProperties::thisname() const {
  // @@protoc_insertion_point(field_get:pb.nodeProperties.thisName)
  return thisname_.GetNoArena();
}
inline void nodeProperties::set_thisname(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  thisname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.nodeProperties.thisName)
}
#if LANG_CXX11
inline void nodeProperties::set_thisname(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  thisname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.nodeProperties.thisName)
}
#endif
inline void nodeProperties::set_thisname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  thisname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.nodeProperties.thisName)
}
inline void nodeProperties::set_thisname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  thisname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.nodeProperties.thisName)
}
inline ::std::string* nodeProperties::mutable_thisname() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:pb.nodeProperties.thisName)
  return thisname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* nodeProperties::release_thisname() {
  // @@protoc_insertion_point(field_release:pb.nodeProperties.thisName)
  if (!has_thisname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return thisname_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void nodeProperties::set_allocated_thisname(::std::string* thisname) {
  if (thisname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  thisname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), thisname);
  // @@protoc_insertion_point(field_set_allocated:pb.nodeProperties.thisName)
}

// repeated .pb.POPSTATS fjStats = 2;
inline int nodeProperties::fjstats_size() const {
  return fjstats_.size();
}
inline void nodeProperties::clear_fjstats() {
  fjstats_.Clear();
}
inline ::pb::POPSTATS* nodeProperties::mutable_fjstats(int index) {
  // @@protoc_insertion_point(field_mutable:pb.nodeProperties.fjStats)
  return fjstats_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::POPSTATS >*
nodeProperties::mutable_fjstats() {
  // @@protoc_insertion_point(field_mutable_list:pb.nodeProperties.fjStats)
  return &fjstats_;
}
inline const ::pb::POPSTATS& nodeProperties::fjstats(int index) const {
  // @@protoc_insertion_point(field_get:pb.nodeProperties.fjStats)
  return fjstats_.Get(index);
}
inline ::pb::POPSTATS* nodeProperties::add_fjstats() {
  // @@protoc_insertion_point(field_add:pb.nodeProperties.fjStats)
  return fjstats_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::POPSTATS >&
nodeProperties::fjstats() const {
  // @@protoc_insertion_point(field_list:pb.nodeProperties.fjStats)
  return fjstats_;
}

// repeated .pb.POPSTATS fcStats = 3;
inline int nodeProperties::fcstats_size() const {
  return fcstats_.size();
}
inline void nodeProperties::clear_fcstats() {
  fcstats_.Clear();
}
inline ::pb::POPSTATS* nodeProperties::mutable_fcstats(int index) {
  // @@protoc_insertion_point(field_mutable:pb.nodeProperties.fcStats)
  return fcstats_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::POPSTATS >*
nodeProperties::mutable_fcstats() {
  // @@protoc_insertion_point(field_mutable_list:pb.nodeProperties.fcStats)
  return &fcstats_;
}
inline const ::pb::POPSTATS& nodeProperties::fcstats(int index) const {
  // @@protoc_insertion_point(field_get:pb.nodeProperties.fcStats)
  return fcstats_.Get(index);
}
inline ::pb::POPSTATS* nodeProperties::add_fcstats() {
  // @@protoc_insertion_point(field_add:pb.nodeProperties.fcStats)
  return fcstats_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::POPSTATS >&
nodeProperties::fcstats() const {
  // @@protoc_insertion_point(field_list:pb.nodeProperties.fcStats)
  return fcstats_;
}

// required bool hidden = 4;
inline bool nodeProperties::has_hidden() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void nodeProperties::clear_hidden() {
  hidden_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool nodeProperties::hidden() const {
  // @@protoc_insertion_point(field_get:pb.nodeProperties.hidden)
  return hidden_;
}
inline void nodeProperties::set_hidden(bool value) {
  _has_bits_[0] |= 0x00000008u;
  hidden_ = value;
  // @@protoc_insertion_point(field_set:pb.nodeProperties.hidden)
}

// optional .pb.POPINDICES indices = 5;
inline bool nodeProperties::has_indices() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void nodeProperties::clear_indices() {
  if (indices_ != nullptr) indices_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::pb::POPINDICES& nodeProperties::indices() const {
  const ::pb::POPINDICES* p = indices_;
  // @@protoc_insertion_point(field_get:pb.nodeProperties.indices)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::POPINDICES*>(
      &::pb::_POPINDICES_default_instance_);
}
inline ::pb::POPINDICES* nodeProperties::release_indices() {
  // @@protoc_insertion_point(field_release:pb.nodeProperties.indices)
  _has_bits_[0] &= ~0x00000002u;
  ::pb::POPINDICES* temp = indices_;
  indices_ = nullptr;
  return temp;
}
inline ::pb::POPINDICES* nodeProperties::mutable_indices() {
  _has_bits_[0] |= 0x00000002u;
  if (indices_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::POPINDICES>(GetArenaNoVirtual());
    indices_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.nodeProperties.indices)
  return indices_;
}
inline void nodeProperties::set_allocated_indices(::pb::POPINDICES* indices) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete indices_;
  }
  if (indices) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      indices = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, indices, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  indices_ = indices;
  // @@protoc_insertion_point(field_set_allocated:pb.nodeProperties.indices)
}

// optional .pb.gate thisGate = 6;
inline bool nodeProperties::has_thisgate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void nodeProperties::clear_thisgate() {
  if (thisgate_ != nullptr) thisgate_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::pb::gate& nodeProperties::thisgate() const {
  const ::pb::gate* p = thisgate_;
  // @@protoc_insertion_point(field_get:pb.nodeProperties.thisGate)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::gate*>(
      &::pb::_gate_default_instance_);
}
inline ::pb::gate* nodeProperties::release_thisgate() {
  // @@protoc_insertion_point(field_release:pb.nodeProperties.thisGate)
  _has_bits_[0] &= ~0x00000004u;
  ::pb::gate* temp = thisgate_;
  thisgate_ = nullptr;
  return temp;
}
inline ::pb::gate* nodeProperties::mutable_thisgate() {
  _has_bits_[0] |= 0x00000004u;
  if (thisgate_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::gate>(GetArenaNoVirtual());
    thisgate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.nodeProperties.thisGate)
  return thisgate_;
}
inline void nodeProperties::set_allocated_thisgate(::pb::gate* thisgate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete thisgate_;
  }
  if (thisgate) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      thisgate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, thisgate, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  thisgate_ = thisgate;
  // @@protoc_insertion_point(field_set_allocated:pb.nodeProperties.thisGate)
}

// -------------------------------------------------------------------

// treeNodes

// required .pb.nodeProperties node = 1;
inline bool treeNodes::has_node() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void treeNodes::clear_node() {
  if (node_ != nullptr) node_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::pb::nodeProperties& treeNodes::node() const {
  const ::pb::nodeProperties* p = node_;
  // @@protoc_insertion_point(field_get:pb.treeNodes.node)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::nodeProperties*>(
      &::pb::_nodeProperties_default_instance_);
}
inline ::pb::nodeProperties* treeNodes::release_node() {
  // @@protoc_insertion_point(field_release:pb.treeNodes.node)
  _has_bits_[0] &= ~0x00000001u;
  ::pb::nodeProperties* temp = node_;
  node_ = nullptr;
  return temp;
}
inline ::pb::nodeProperties* treeNodes::mutable_node() {
  _has_bits_[0] |= 0x00000001u;
  if (node_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::nodeProperties>(GetArenaNoVirtual());
    node_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.treeNodes.node)
  return node_;
}
inline void treeNodes::set_allocated_node(::pb::nodeProperties* node) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete node_;
  }
  if (node) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      node = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, node, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  node_ = node;
  // @@protoc_insertion_point(field_set_allocated:pb.treeNodes.node)
}

// optional uint32 parent = 2;
inline bool treeNodes::has_parent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void treeNodes::clear_parent() {
  parent_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 treeNodes::parent() const {
  // @@protoc_insertion_point(field_get:pb.treeNodes.parent)
  return parent_;
}
inline void treeNodes::set_parent(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  parent_ = value;
  // @@protoc_insertion_point(field_set:pb.treeNodes.parent)
}

// -------------------------------------------------------------------

// populationTree

// repeated .pb.treeNodes node = 1;
inline int populationTree::node_size() const {
  return node_.size();
}
inline void populationTree::clear_node() {
  node_.Clear();
}
inline ::pb::treeNodes* populationTree::mutable_node(int index) {
  // @@protoc_insertion_point(field_mutable:pb.populationTree.node)
  return node_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::treeNodes >*
populationTree::mutable_node() {
  // @@protoc_insertion_point(field_mutable_list:pb.populationTree.node)
  return &node_;
}
inline const ::pb::treeNodes& populationTree::node(int index) const {
  // @@protoc_insertion_point(field_get:pb.populationTree.node)
  return node_.Get(index);
}
inline ::pb::treeNodes* populationTree::add_node() {
  // @@protoc_insertion_point(field_add:pb.populationTree.node)
  return node_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::treeNodes >&
populationTree::node() const {
  // @@protoc_insertion_point(field_list:pb.populationTree.node)
  return node_;
}

// -------------------------------------------------------------------

// COMP

// optional string cid = 1;
inline bool COMP::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void COMP::clear_cid() {
  cid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& COMP::cid() const {
  // @@protoc_insertion_point(field_get:pb.COMP.cid)
  return cid_.GetNoArena();
}
inline void COMP::set_cid(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.COMP.cid)
}
#if LANG_CXX11
inline void COMP::set_cid(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  cid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.COMP.cid)
}
#endif
inline void COMP::set_cid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.COMP.cid)
}
inline void COMP::set_cid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.COMP.cid)
}
inline ::std::string* COMP::mutable_cid() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:pb.COMP.cid)
  return cid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* COMP::release_cid() {
  // @@protoc_insertion_point(field_release:pb.COMP.cid)
  if (!has_cid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return cid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void COMP::set_allocated_cid(::std::string* cid) {
  if (cid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cid);
  // @@protoc_insertion_point(field_set_allocated:pb.COMP.cid)
}

// optional string prefix = 2;
inline bool COMP::has_prefix() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void COMP::clear_prefix() {
  prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& COMP::prefix() const {
  // @@protoc_insertion_point(field_get:pb.COMP.prefix)
  return prefix_.GetNoArena();
}
inline void COMP::set_prefix(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.COMP.prefix)
}
#if LANG_CXX11
inline void COMP::set_prefix(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.COMP.prefix)
}
#endif
inline void COMP::set_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.COMP.prefix)
}
inline void COMP::set_prefix(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.COMP.prefix)
}
inline ::std::string* COMP::mutable_prefix() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:pb.COMP.prefix)
  return prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* COMP::release_prefix() {
  // @@protoc_insertion_point(field_release:pb.COMP.prefix)
  if (!has_prefix()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return prefix_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void COMP::set_allocated_prefix(::std::string* prefix) {
  if (prefix != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prefix);
  // @@protoc_insertion_point(field_set_allocated:pb.COMP.prefix)
}

// optional string suffix = 3;
inline bool COMP::has_suffix() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void COMP::clear_suffix() {
  suffix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& COMP::suffix() const {
  // @@protoc_insertion_point(field_get:pb.COMP.suffix)
  return suffix_.GetNoArena();
}
inline void COMP::set_suffix(const ::std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  suffix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.COMP.suffix)
}
#if LANG_CXX11
inline void COMP::set_suffix(::std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  suffix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.COMP.suffix)
}
#endif
inline void COMP::set_suffix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  suffix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.COMP.suffix)
}
inline void COMP::set_suffix(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  suffix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.COMP.suffix)
}
inline ::std::string* COMP::mutable_suffix() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:pb.COMP.suffix)
  return suffix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* COMP::release_suffix() {
  // @@protoc_insertion_point(field_release:pb.COMP.suffix)
  if (!has_suffix()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return suffix_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void COMP::set_allocated_suffix(::std::string* suffix) {
  if (suffix != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  suffix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suffix);
  // @@protoc_insertion_point(field_set_allocated:pb.COMP.suffix)
}

// optional string name = 4;
inline bool COMP::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void COMP::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::std::string& COMP::name() const {
  // @@protoc_insertion_point(field_get:pb.COMP.name)
  return name_.GetNoArena();
}
inline void COMP::set_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.COMP.name)
}
#if LANG_CXX11
inline void COMP::set_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.COMP.name)
}
#endif
inline void COMP::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.COMP.name)
}
inline void COMP::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.COMP.name)
}
inline ::std::string* COMP::mutable_name() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:pb.COMP.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* COMP::release_name() {
  // @@protoc_insertion_point(field_release:pb.COMP.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void COMP::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.COMP.name)
}

// optional string comment = 5;
inline bool COMP::has_comment() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void COMP::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::std::string& COMP::comment() const {
  // @@protoc_insertion_point(field_get:pb.COMP.comment)
  return comment_.GetNoArena();
}
inline void COMP::set_comment(const ::std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.COMP.comment)
}
#if LANG_CXX11
inline void COMP::set_comment(::std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  comment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.COMP.comment)
}
#endif
inline void COMP::set_comment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.COMP.comment)
}
inline void COMP::set_comment(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.COMP.comment)
}
inline ::std::string* COMP::mutable_comment() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:pb.COMP.comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* COMP::release_comment() {
  // @@protoc_insertion_point(field_release:pb.COMP.comment)
  if (!has_comment()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return comment_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void COMP::set_allocated_comment(::std::string* comment) {
  if (comment != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:pb.COMP.comment)
}

// repeated string marker = 6;
inline int COMP::marker_size() const {
  return marker_.size();
}
inline void COMP::clear_marker() {
  marker_.Clear();
}
inline const ::std::string& COMP::marker(int index) const {
  // @@protoc_insertion_point(field_get:pb.COMP.marker)
  return marker_.Get(index);
}
inline ::std::string* COMP::mutable_marker(int index) {
  // @@protoc_insertion_point(field_mutable:pb.COMP.marker)
  return marker_.Mutable(index);
}
inline void COMP::set_marker(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.COMP.marker)
  marker_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void COMP::set_marker(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.COMP.marker)
  marker_.Mutable(index)->assign(std::move(value));
}
#endif
inline void COMP::set_marker(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  marker_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.COMP.marker)
}
inline void COMP::set_marker(int index, const char* value, size_t size) {
  marker_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.COMP.marker)
}
inline ::std::string* COMP::add_marker() {
  // @@protoc_insertion_point(field_add_mutable:pb.COMP.marker)
  return marker_.Add();
}
inline void COMP::add_marker(const ::std::string& value) {
  marker_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.COMP.marker)
}
#if LANG_CXX11
inline void COMP::add_marker(::std::string&& value) {
  marker_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.COMP.marker)
}
#endif
inline void COMP::add_marker(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  marker_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.COMP.marker)
}
inline void COMP::add_marker(const char* value, size_t size) {
  marker_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.COMP.marker)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
COMP::marker() const {
  // @@protoc_insertion_point(field_list:pb.COMP.marker)
  return marker_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
COMP::mutable_marker() {
  // @@protoc_insertion_point(field_mutable_list:pb.COMP.marker)
  return &marker_;
}

// repeated float spillOver = 7;
inline int COMP::spillover_size() const {
  return spillover_.size();
}
inline void COMP::clear_spillover() {
  spillover_.Clear();
}
inline float COMP::spillover(int index) const {
  // @@protoc_insertion_point(field_get:pb.COMP.spillOver)
  return spillover_.Get(index);
}
inline void COMP::set_spillover(int index, float value) {
  spillover_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.COMP.spillOver)
}
inline void COMP::add_spillover(float value) {
  spillover_.Add(value);
  // @@protoc_insertion_point(field_add:pb.COMP.spillOver)
}
inline const ::google::protobuf::RepeatedField< float >&
COMP::spillover() const {
  // @@protoc_insertion_point(field_list:pb.COMP.spillOver)
  return spillover_;
}
inline ::google::protobuf::RepeatedField< float >*
COMP::mutable_spillover() {
  // @@protoc_insertion_point(field_mutable_list:pb.COMP.spillOver)
  return &spillover_;
}

// -------------------------------------------------------------------

// PARAM

// optional string param = 1;
inline bool PARAM::has_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PARAM::clear_param() {
  param_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& PARAM::param() const {
  // @@protoc_insertion_point(field_get:pb.PARAM.param)
  return param_.GetNoArena();
}
inline void PARAM::set_param(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.PARAM.param)
}
#if LANG_CXX11
inline void PARAM::set_param(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  param_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.PARAM.param)
}
#endif
inline void PARAM::set_param(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.PARAM.param)
}
inline void PARAM::set_param(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.PARAM.param)
}
inline ::std::string* PARAM::mutable_param() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:pb.PARAM.param)
  return param_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PARAM::release_param() {
  // @@protoc_insertion_point(field_release:pb.PARAM.param)
  if (!has_param()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return param_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PARAM::set_allocated_param(::std::string* param) {
  if (param != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  param_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), param);
  // @@protoc_insertion_point(field_set_allocated:pb.PARAM.param)
}

// optional bool log = 2;
inline bool PARAM::has_log() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PARAM::clear_log() {
  log_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool PARAM::log() const {
  // @@protoc_insertion_point(field_get:pb.PARAM.log)
  return log_;
}
inline void PARAM::set_log(bool value) {
  _has_bits_[0] |= 0x00000002u;
  log_ = value;
  // @@protoc_insertion_point(field_set:pb.PARAM.log)
}

// optional uint32 range = 3;
inline bool PARAM::has_range() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PARAM::clear_range() {
  range_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 PARAM::range() const {
  // @@protoc_insertion_point(field_get:pb.PARAM.range)
  return range_;
}
inline void PARAM::set_range(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  range_ = value;
  // @@protoc_insertion_point(field_set:pb.PARAM.range)
}

// optional uint32 highValue = 4;
inline bool PARAM::has_highvalue() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PARAM::clear_highvalue() {
  highvalue_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 PARAM::highvalue() const {
  // @@protoc_insertion_point(field_get:pb.PARAM.highValue)
  return highvalue_;
}
inline void PARAM::set_highvalue(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  highvalue_ = value;
  // @@protoc_insertion_point(field_set:pb.PARAM.highValue)
}

// optional uint32 calibrationIndex = 5;
inline bool PARAM::has_calibrationindex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PARAM::clear_calibrationindex() {
  calibrationindex_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 PARAM::calibrationindex() const {
  // @@protoc_insertion_point(field_get:pb.PARAM.calibrationIndex)
  return calibrationindex_;
}
inline void PARAM::set_calibrationindex(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  calibrationindex_ = value;
  // @@protoc_insertion_point(field_set:pb.PARAM.calibrationIndex)
}

// -------------------------------------------------------------------

// GatingHierarchy

// required .pb.populationTree tree = 2;
inline bool GatingHierarchy::has_tree() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GatingHierarchy::clear_tree() {
  if (tree_ != nullptr) tree_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::pb::populationTree& GatingHierarchy::tree() const {
  const ::pb::populationTree* p = tree_;
  // @@protoc_insertion_point(field_get:pb.GatingHierarchy.tree)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::populationTree*>(
      &::pb::_populationTree_default_instance_);
}
inline ::pb::populationTree* GatingHierarchy::release_tree() {
  // @@protoc_insertion_point(field_release:pb.GatingHierarchy.tree)
  _has_bits_[0] &= ~0x00000002u;
  ::pb::populationTree* temp = tree_;
  tree_ = nullptr;
  return temp;
}
inline ::pb::populationTree* GatingHierarchy::mutable_tree() {
  _has_bits_[0] |= 0x00000002u;
  if (tree_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::populationTree>(GetArenaNoVirtual());
    tree_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.GatingHierarchy.tree)
  return tree_;
}
inline void GatingHierarchy::set_allocated_tree(::pb::populationTree* tree) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete tree_;
  }
  if (tree) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tree = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tree, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tree_ = tree;
  // @@protoc_insertion_point(field_set_allocated:pb.GatingHierarchy.tree)
}

// optional .pb.COMP comp = 1;
inline bool GatingHierarchy::has_comp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GatingHierarchy::clear_comp() {
  if (comp_ != nullptr) comp_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::pb::COMP& GatingHierarchy::comp() const {
  const ::pb::COMP* p = comp_;
  // @@protoc_insertion_point(field_get:pb.GatingHierarchy.comp)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::COMP*>(
      &::pb::_COMP_default_instance_);
}
inline ::pb::COMP* GatingHierarchy::release_comp() {
  // @@protoc_insertion_point(field_release:pb.GatingHierarchy.comp)
  _has_bits_[0] &= ~0x00000001u;
  ::pb::COMP* temp = comp_;
  comp_ = nullptr;
  return temp;
}
inline ::pb::COMP* GatingHierarchy::mutable_comp() {
  _has_bits_[0] |= 0x00000001u;
  if (comp_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::COMP>(GetArenaNoVirtual());
    comp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.GatingHierarchy.comp)
  return comp_;
}
inline void GatingHierarchy::set_allocated_comp(::pb::COMP* comp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete comp_;
  }
  if (comp) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      comp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, comp, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  comp_ = comp;
  // @@protoc_insertion_point(field_set_allocated:pb.GatingHierarchy.comp)
}

// optional bool isLoaded = 3;
inline bool GatingHierarchy::has_isloaded() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GatingHierarchy::clear_isloaded() {
  isloaded_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool GatingHierarchy::isloaded() const {
  // @@protoc_insertion_point(field_get:pb.GatingHierarchy.isLoaded)
  return isloaded_;
}
inline void GatingHierarchy::set_isloaded(bool value) {
  _has_bits_[0] |= 0x00000010u;
  isloaded_ = value;
  // @@protoc_insertion_point(field_set:pb.GatingHierarchy.isLoaded)
}

// repeated .pb.PARAM transFlag = 4;
inline int GatingHierarchy::transflag_size() const {
  return transflag_.size();
}
inline void GatingHierarchy::clear_transflag() {
  transflag_.Clear();
}
inline ::pb::PARAM* GatingHierarchy::mutable_transflag(int index) {
  // @@protoc_insertion_point(field_mutable:pb.GatingHierarchy.transFlag)
  return transflag_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::PARAM >*
GatingHierarchy::mutable_transflag() {
  // @@protoc_insertion_point(field_mutable_list:pb.GatingHierarchy.transFlag)
  return &transflag_;
}
inline const ::pb::PARAM& GatingHierarchy::transflag(int index) const {
  // @@protoc_insertion_point(field_get:pb.GatingHierarchy.transFlag)
  return transflag_.Get(index);
}
inline ::pb::PARAM* GatingHierarchy::add_transflag() {
  // @@protoc_insertion_point(field_add:pb.GatingHierarchy.transFlag)
  return transflag_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::PARAM >&
GatingHierarchy::transflag() const {
  // @@protoc_insertion_point(field_list:pb.GatingHierarchy.transFlag)
  return transflag_;
}

// optional .pb.trans_local trans = 5;
inline bool GatingHierarchy::has_trans() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GatingHierarchy::clear_trans() {
  if (trans_ != nullptr) trans_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::pb::trans_local& GatingHierarchy::trans() const {
  const ::pb::trans_local* p = trans_;
  // @@protoc_insertion_point(field_get:pb.GatingHierarchy.trans)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::trans_local*>(
      &::pb::_trans_local_default_instance_);
}
inline ::pb::trans_local* GatingHierarchy::release_trans() {
  // @@protoc_insertion_point(field_release:pb.GatingHierarchy.trans)
  _has_bits_[0] &= ~0x00000004u;
  ::pb::trans_local* temp = trans_;
  trans_ = nullptr;
  return temp;
}
inline ::pb::trans_local* GatingHierarchy::mutable_trans() {
  _has_bits_[0] |= 0x00000004u;
  if (trans_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::trans_local>(GetArenaNoVirtual());
    trans_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.GatingHierarchy.trans)
  return trans_;
}
inline void GatingHierarchy::set_allocated_trans(::pb::trans_local* trans) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete trans_;
  }
  if (trans) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      trans = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, trans, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  trans_ = trans;
  // @@protoc_insertion_point(field_set_allocated:pb.GatingHierarchy.trans)
}

// optional .pb.CytoFrame frame = 6;
inline bool GatingHierarchy::has_frame() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GatingHierarchy::clear_frame() {
  if (frame_ != nullptr) frame_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::pb::CytoFrame& GatingHierarchy::frame() const {
  const ::pb::CytoFrame* p = frame_;
  // @@protoc_insertion_point(field_get:pb.GatingHierarchy.frame)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::CytoFrame*>(
      &::pb::_CytoFrame_default_instance_);
}
inline ::pb::CytoFrame* GatingHierarchy::release_frame() {
  // @@protoc_insertion_point(field_release:pb.GatingHierarchy.frame)
  _has_bits_[0] &= ~0x00000008u;
  ::pb::CytoFrame* temp = frame_;
  frame_ = nullptr;
  return temp;
}
inline ::pb::CytoFrame* GatingHierarchy::mutable_frame() {
  _has_bits_[0] |= 0x00000008u;
  if (frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::CytoFrame>(GetArenaNoVirtual());
    frame_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.GatingHierarchy.frame)
  return frame_;
}
inline void GatingHierarchy::set_allocated_frame(::pb::CytoFrame* frame) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete frame_;
  }
  if (frame) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      frame = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, frame, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  frame_ = frame;
  // @@protoc_insertion_point(field_set_allocated:pb.GatingHierarchy.frame)
}

// -------------------------------------------------------------------

// CytoFrame

// required bool is_h5 = 1;
inline bool CytoFrame::has_is_h5() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CytoFrame::clear_is_h5() {
  is_h5_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CytoFrame::is_h5() const {
  // @@protoc_insertion_point(field_get:pb.CytoFrame.is_h5)
  return is_h5_;
}
inline void CytoFrame::set_is_h5(bool value) {
  _has_bits_[0] |= 0x00000001u;
  is_h5_ = value;
  // @@protoc_insertion_point(field_set:pb.CytoFrame.is_h5)
}

// -------------------------------------------------------------------

// TRANS_TBL

// optional uint64 trans_address = 1;
inline bool TRANS_TBL::has_trans_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TRANS_TBL::clear_trans_address() {
  trans_address_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 TRANS_TBL::trans_address() const {
  // @@protoc_insertion_point(field_get:pb.TRANS_TBL.trans_address)
  return trans_address_;
}
inline void TRANS_TBL::set_trans_address(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  trans_address_ = value;
  // @@protoc_insertion_point(field_set:pb.TRANS_TBL.trans_address)
}

// optional .pb.transformation trans = 2;
inline bool TRANS_TBL::has_trans() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TRANS_TBL::clear_trans() {
  if (trans_ != nullptr) trans_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::pb::transformation& TRANS_TBL::trans() const {
  const ::pb::transformation* p = trans_;
  // @@protoc_insertion_point(field_get:pb.TRANS_TBL.trans)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::transformation*>(
      &::pb::_transformation_default_instance_);
}
inline ::pb::transformation* TRANS_TBL::release_trans() {
  // @@protoc_insertion_point(field_release:pb.TRANS_TBL.trans)
  _has_bits_[0] &= ~0x00000001u;
  ::pb::transformation* temp = trans_;
  trans_ = nullptr;
  return temp;
}
inline ::pb::transformation* TRANS_TBL::mutable_trans() {
  _has_bits_[0] |= 0x00000001u;
  if (trans_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::transformation>(GetArenaNoVirtual());
    trans_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.TRANS_TBL.trans)
  return trans_;
}
inline void TRANS_TBL::set_allocated_trans(::pb::transformation* trans) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete trans_;
  }
  if (trans) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      trans = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, trans, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  trans_ = trans;
  // @@protoc_insertion_point(field_set_allocated:pb.TRANS_TBL.trans)
}

// -------------------------------------------------------------------

// GatingSet

// repeated .pb.TRANS_TBL trans_tbl = 2;
inline int GatingSet::trans_tbl_size() const {
  return trans_tbl_.size();
}
inline void GatingSet::clear_trans_tbl() {
  trans_tbl_.Clear();
}
inline ::pb::TRANS_TBL* GatingSet::mutable_trans_tbl(int index) {
  // @@protoc_insertion_point(field_mutable:pb.GatingSet.trans_tbl)
  return trans_tbl_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TRANS_TBL >*
GatingSet::mutable_trans_tbl() {
  // @@protoc_insertion_point(field_mutable_list:pb.GatingSet.trans_tbl)
  return &trans_tbl_;
}
inline const ::pb::TRANS_TBL& GatingSet::trans_tbl(int index) const {
  // @@protoc_insertion_point(field_get:pb.GatingSet.trans_tbl)
  return trans_tbl_.Get(index);
}
inline ::pb::TRANS_TBL* GatingSet::add_trans_tbl() {
  // @@protoc_insertion_point(field_add:pb.GatingSet.trans_tbl)
  return trans_tbl_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TRANS_TBL >&
GatingSet::trans_tbl() const {
  // @@protoc_insertion_point(field_list:pb.GatingSet.trans_tbl)
  return trans_tbl_;
}

// repeated string sampleName = 1;
inline int GatingSet::samplename_size() const {
  return samplename_.size();
}
inline void GatingSet::clear_samplename() {
  samplename_.Clear();
}
inline const ::std::string& GatingSet::samplename(int index) const {
  // @@protoc_insertion_point(field_get:pb.GatingSet.sampleName)
  return samplename_.Get(index);
}
inline ::std::string* GatingSet::mutable_samplename(int index) {
  // @@protoc_insertion_point(field_mutable:pb.GatingSet.sampleName)
  return samplename_.Mutable(index);
}
inline void GatingSet::set_samplename(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.GatingSet.sampleName)
  samplename_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void GatingSet::set_samplename(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.GatingSet.sampleName)
  samplename_.Mutable(index)->assign(std::move(value));
}
#endif
inline void GatingSet::set_samplename(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  samplename_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.GatingSet.sampleName)
}
inline void GatingSet::set_samplename(int index, const char* value, size_t size) {
  samplename_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.GatingSet.sampleName)
}
inline ::std::string* GatingSet::add_samplename() {
  // @@protoc_insertion_point(field_add_mutable:pb.GatingSet.sampleName)
  return samplename_.Add();
}
inline void GatingSet::add_samplename(const ::std::string& value) {
  samplename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.GatingSet.sampleName)
}
#if LANG_CXX11
inline void GatingSet::add_samplename(::std::string&& value) {
  samplename_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.GatingSet.sampleName)
}
#endif
inline void GatingSet::add_samplename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  samplename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.GatingSet.sampleName)
}
inline void GatingSet::add_samplename(const char* value, size_t size) {
  samplename_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.GatingSet.sampleName)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
GatingSet::samplename() const {
  // @@protoc_insertion_point(field_list:pb.GatingSet.sampleName)
  return samplename_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
GatingSet::mutable_samplename() {
  // @@protoc_insertion_point(field_mutable_list:pb.GatingSet.sampleName)
  return &samplename_;
}

// optional uint64 globalBiExpTrans = 3;
inline bool GatingSet::has_globalbiexptrans() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GatingSet::clear_globalbiexptrans() {
  globalbiexptrans_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 GatingSet::globalbiexptrans() const {
  // @@protoc_insertion_point(field_get:pb.GatingSet.globalBiExpTrans)
  return globalbiexptrans_;
}
inline void GatingSet::set_globalbiexptrans(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  globalbiexptrans_ = value;
  // @@protoc_insertion_point(field_set:pb.GatingSet.globalBiExpTrans)
}

// optional uint64 globalLinTrans = 4;
inline bool GatingSet::has_globallintrans() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GatingSet::clear_globallintrans() {
  globallintrans_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint64 GatingSet::globallintrans() const {
  // @@protoc_insertion_point(field_get:pb.GatingSet.globalLinTrans)
  return globallintrans_;
}
inline void GatingSet::set_globallintrans(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  globallintrans_ = value;
  // @@protoc_insertion_point(field_set:pb.GatingSet.globalLinTrans)
}

// repeated .pb.trans_local gTrans = 5;
inline int GatingSet::gtrans_size() const {
  return gtrans_.size();
}
inline void GatingSet::clear_gtrans() {
  gtrans_.Clear();
}
inline ::pb::trans_local* GatingSet::mutable_gtrans(int index) {
  // @@protoc_insertion_point(field_mutable:pb.GatingSet.gTrans)
  return gtrans_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::trans_local >*
GatingSet::mutable_gtrans() {
  // @@protoc_insertion_point(field_mutable_list:pb.GatingSet.gTrans)
  return &gtrans_;
}
inline const ::pb::trans_local& GatingSet::gtrans(int index) const {
  // @@protoc_insertion_point(field_get:pb.GatingSet.gTrans)
  return gtrans_.Get(index);
}
inline ::pb::trans_local* GatingSet::add_gtrans() {
  // @@protoc_insertion_point(field_add:pb.GatingSet.gTrans)
  return gtrans_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::trans_local >&
GatingSet::gtrans() const {
  // @@protoc_insertion_point(field_list:pb.GatingSet.gTrans)
  return gtrans_;
}

// optional string guid = 6;
inline bool GatingSet::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GatingSet::clear_guid() {
  guid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& GatingSet::guid() const {
  // @@protoc_insertion_point(field_get:pb.GatingSet.guid)
  return guid_.GetNoArena();
}
inline void GatingSet::set_guid(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.GatingSet.guid)
}
#if LANG_CXX11
inline void GatingSet::set_guid(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  guid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.GatingSet.guid)
}
#endif
inline void GatingSet::set_guid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.GatingSet.guid)
}
inline void GatingSet::set_guid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.GatingSet.guid)
}
inline ::std::string* GatingSet::mutable_guid() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:pb.GatingSet.guid)
  return guid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GatingSet::release_guid() {
  // @@protoc_insertion_point(field_release:pb.GatingSet.guid)
  if (!has_guid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return guid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GatingSet::set_allocated_guid(::std::string* guid) {
  if (guid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  guid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guid);
  // @@protoc_insertion_point(field_set_allocated:pb.GatingSet.guid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::GATE_TYPE> : ::std::true_type {};
template <> struct is_proto_enum< ::pb::ind_type> : ::std::true_type {};
template <> struct is_proto_enum< ::pb::TRANS_TYPE> : ::std::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_GatingSet_2eproto
