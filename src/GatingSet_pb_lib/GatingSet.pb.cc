// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GatingSet.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GatingSet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* paramRange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  paramRange_reflection_ = NULL;
const ::google::protobuf::Descriptor* rangeGate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rangeGate_reflection_ = NULL;
const ::google::protobuf::Descriptor* paramPoly_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  paramPoly_reflection_ = NULL;
const ::google::protobuf::Descriptor* polygonGate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  polygonGate_reflection_ = NULL;
const ::google::protobuf::Descriptor* coordinate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  coordinate_reflection_ = NULL;
const ::google::protobuf::Descriptor* ellipseGate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ellipseGate_reflection_ = NULL;
const ::google::protobuf::Descriptor* BOOL_GATE_OP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BOOL_GATE_OP_reflection_ = NULL;
const ::google::protobuf::Descriptor* boolGate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  boolGate_reflection_ = NULL;
const ::google::protobuf::Descriptor* clusterGate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  clusterGate_reflection_ = NULL;
const ::google::protobuf::Descriptor* gate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gate_reflection_ = NULL;
const ::google::protobuf::Descriptor* POPSTATS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  POPSTATS_reflection_ = NULL;
const ::google::protobuf::Descriptor* calibrationTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  calibrationTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* biexpTrans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  biexpTrans_reflection_ = NULL;
const ::google::protobuf::Descriptor* fasinhTrans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fasinhTrans_reflection_ = NULL;
const ::google::protobuf::Descriptor* scaleTrans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  scaleTrans_reflection_ = NULL;
const ::google::protobuf::Descriptor* flinTrans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  flinTrans_reflection_ = NULL;
const ::google::protobuf::Descriptor* logTrans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  logTrans_reflection_ = NULL;
const ::google::protobuf::Descriptor* logicleTrans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  logicleTrans_reflection_ = NULL;
const ::google::protobuf::Descriptor* transformation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  transformation_reflection_ = NULL;
const ::google::protobuf::Descriptor* trans_pair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  trans_pair_reflection_ = NULL;
const ::google::protobuf::Descriptor* trans_local_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  trans_local_reflection_ = NULL;
const ::google::protobuf::Descriptor* POPINDICES_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  POPINDICES_reflection_ = NULL;
const ::google::protobuf::Descriptor* nodeProperties_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  nodeProperties_reflection_ = NULL;
const ::google::protobuf::Descriptor* treeNodes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  treeNodes_reflection_ = NULL;
const ::google::protobuf::Descriptor* populationTree_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  populationTree_reflection_ = NULL;
const ::google::protobuf::Descriptor* COMP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  COMP_reflection_ = NULL;
const ::google::protobuf::Descriptor* PARAM_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PARAM_reflection_ = NULL;
const ::google::protobuf::Descriptor* GatingHierarchy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GatingHierarchy_reflection_ = NULL;
const ::google::protobuf::Descriptor* CytoFrame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CytoFrame_reflection_ = NULL;
const ::google::protobuf::Descriptor* TRANS_TBL_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TRANS_TBL_reflection_ = NULL;
const ::google::protobuf::Descriptor* GatingSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GatingSet_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GATE_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ind_type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TRANS_TYPE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_GatingSet_2eproto() {
  protobuf_AddDesc_GatingSet_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GatingSet.proto");
  GOOGLE_CHECK(file != NULL);
  paramRange_descriptor_ = file->message_type(0);
  static const int paramRange_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(paramRange, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(paramRange, min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(paramRange, max_),
  };
  paramRange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      paramRange_descriptor_,
      paramRange::default_instance_,
      paramRange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(paramRange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(paramRange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(paramRange));
  rangeGate_descriptor_ = file->message_type(1);
  static const int rangeGate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rangeGate, param_),
  };
  rangeGate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rangeGate_descriptor_,
      rangeGate::default_instance_,
      rangeGate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rangeGate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rangeGate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rangeGate));
  paramPoly_descriptor_ = file->message_type(2);
  static const int paramPoly_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(paramPoly, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(paramPoly, vertices_),
  };
  paramPoly_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      paramPoly_descriptor_,
      paramPoly::default_instance_,
      paramPoly_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(paramPoly, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(paramPoly, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(paramPoly));
  polygonGate_descriptor_ = file->message_type(3);
  static const int polygonGate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(polygonGate, param_),
  };
  polygonGate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      polygonGate_descriptor_,
      polygonGate::default_instance_,
      polygonGate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(polygonGate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(polygonGate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(polygonGate));
  coordinate_descriptor_ = file->message_type(4);
  static const int coordinate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(coordinate, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(coordinate, y_),
  };
  coordinate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      coordinate_descriptor_,
      coordinate::default_instance_,
      coordinate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(coordinate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(coordinate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(coordinate));
  ellipseGate_descriptor_ = file->message_type(5);
  static const int ellipseGate_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ellipseGate, mu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ellipseGate, cov_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ellipseGate, antipodal_vertices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ellipseGate, dist_),
  };
  ellipseGate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ellipseGate_descriptor_,
      ellipseGate::default_instance_,
      ellipseGate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ellipseGate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ellipseGate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ellipseGate));
  BOOL_GATE_OP_descriptor_ = file->message_type(6);
  static const int BOOL_GATE_OP_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOOL_GATE_OP, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOOL_GATE_OP, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOOL_GATE_OP, isnot_),
  };
  BOOL_GATE_OP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BOOL_GATE_OP_descriptor_,
      BOOL_GATE_OP::default_instance_,
      BOOL_GATE_OP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOOL_GATE_OP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOOL_GATE_OP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BOOL_GATE_OP));
  boolGate_descriptor_ = file->message_type(7);
  static const int boolGate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(boolGate, boolopspec_),
  };
  boolGate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      boolGate_descriptor_,
      boolGate::default_instance_,
      boolGate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(boolGate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(boolGate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(boolGate));
  clusterGate_descriptor_ = file->message_type(8);
  static const int clusterGate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clusterGate, cluster_method_),
  };
  clusterGate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      clusterGate_descriptor_,
      clusterGate::default_instance_,
      clusterGate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clusterGate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clusterGate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(clusterGate));
  gate_descriptor_ = file->message_type(9);
  static const int gate_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gate, neg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gate, istransformed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gate, isgained_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gate, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gate, rg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gate, pg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gate, eg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gate, bg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gate, cg_),
  };
  gate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gate_descriptor_,
      gate::default_instance_,
      gate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gate));
  POPSTATS_descriptor_ = file->message_type(10);
  static const int POPSTATS_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(POPSTATS, stattype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(POPSTATS, statval_),
  };
  POPSTATS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      POPSTATS_descriptor_,
      POPSTATS::default_instance_,
      POPSTATS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(POPSTATS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(POPSTATS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(POPSTATS));
  calibrationTable_descriptor_ = file->message_type(11);
  static const int calibrationTable_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(calibrationTable, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(calibrationTable, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(calibrationTable, b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(calibrationTable, c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(calibrationTable, d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(calibrationTable, spline_method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(calibrationTable, caltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(calibrationTable, flag_),
  };
  calibrationTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      calibrationTable_descriptor_,
      calibrationTable::default_instance_,
      calibrationTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(calibrationTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(calibrationTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(calibrationTable));
  biexpTrans_descriptor_ = file->message_type(12);
  static const int biexpTrans_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(biexpTrans, channelrange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(biexpTrans, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(biexpTrans, neg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(biexpTrans, widthbasis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(biexpTrans, maxvalue_),
  };
  biexpTrans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      biexpTrans_descriptor_,
      biexpTrans::default_instance_,
      biexpTrans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(biexpTrans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(biexpTrans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(biexpTrans));
  fasinhTrans_descriptor_ = file->message_type(13);
  static const int fasinhTrans_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fasinhTrans, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fasinhTrans, maxrange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fasinhTrans, t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fasinhTrans, a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fasinhTrans, m_),
  };
  fasinhTrans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fasinhTrans_descriptor_,
      fasinhTrans::default_instance_,
      fasinhTrans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fasinhTrans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fasinhTrans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fasinhTrans));
  scaleTrans_descriptor_ = file->message_type(14);
  static const int scaleTrans_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scaleTrans, scale_factor_),
  };
  scaleTrans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      scaleTrans_descriptor_,
      scaleTrans::default_instance_,
      scaleTrans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scaleTrans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scaleTrans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(scaleTrans));
  flinTrans_descriptor_ = file->message_type(15);
  static const int flinTrans_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flinTrans, min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flinTrans, max_),
  };
  flinTrans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      flinTrans_descriptor_,
      flinTrans::default_instance_,
      flinTrans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flinTrans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flinTrans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(flinTrans));
  logTrans_descriptor_ = file->message_type(16);
  static const int logTrans_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(logTrans, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(logTrans, decade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(logTrans, t_),
  };
  logTrans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      logTrans_descriptor_,
      logTrans::default_instance_,
      logTrans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(logTrans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(logTrans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(logTrans));
  logicleTrans_descriptor_ = file->message_type(17);
  static const int logicleTrans_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(logicleTrans, t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(logicleTrans, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(logicleTrans, m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(logicleTrans, a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(logicleTrans, bins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(logicleTrans, isgml2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(logicleTrans, isinverse_),
  };
  logicleTrans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      logicleTrans_descriptor_,
      logicleTrans::default_instance_,
      logicleTrans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(logicleTrans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(logicleTrans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(logicleTrans));
  transformation_descriptor_ = file->message_type(18);
  static const int transformation_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(transformation, caltbl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(transformation, isgateonly_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(transformation, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(transformation, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(transformation, iscomputed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(transformation, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(transformation, trans_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(transformation, bt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(transformation, lt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(transformation, flt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(transformation, st_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(transformation, ft_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(transformation, lgt_),
  };
  transformation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      transformation_descriptor_,
      transformation::default_instance_,
      transformation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(transformation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(transformation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(transformation));
  trans_pair_descriptor_ = file->message_type(19);
  static const int trans_pair_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trans_pair, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trans_pair, trans_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trans_pair, trans_),
  };
  trans_pair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      trans_pair_descriptor_,
      trans_pair::default_instance_,
      trans_pair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trans_pair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trans_pair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(trans_pair));
  trans_local_descriptor_ = file->message_type(20);
  static const int trans_local_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trans_local, tp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trans_local, groupname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trans_local, sampleids_),
  };
  trans_local_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      trans_local_descriptor_,
      trans_local::default_instance_,
      trans_local_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trans_local, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(trans_local, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(trans_local));
  POPINDICES_descriptor_ = file->message_type(21);
  static const int POPINDICES_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(POPINDICES, nevents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(POPINDICES, indtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(POPINDICES, iind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(POPINDICES, bind_),
  };
  POPINDICES_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      POPINDICES_descriptor_,
      POPINDICES::default_instance_,
      POPINDICES_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(POPINDICES, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(POPINDICES, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(POPINDICES));
  nodeProperties_descriptor_ = file->message_type(22);
  static const int nodeProperties_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nodeProperties, thisname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nodeProperties, fjstats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nodeProperties, fcstats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nodeProperties, hidden_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nodeProperties, indices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nodeProperties, thisgate_),
  };
  nodeProperties_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      nodeProperties_descriptor_,
      nodeProperties::default_instance_,
      nodeProperties_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nodeProperties, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nodeProperties, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(nodeProperties));
  treeNodes_descriptor_ = file->message_type(23);
  static const int treeNodes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treeNodes, node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treeNodes, parent_),
  };
  treeNodes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      treeNodes_descriptor_,
      treeNodes::default_instance_,
      treeNodes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treeNodes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(treeNodes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(treeNodes));
  populationTree_descriptor_ = file->message_type(24);
  static const int populationTree_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(populationTree, node_),
  };
  populationTree_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      populationTree_descriptor_,
      populationTree::default_instance_,
      populationTree_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(populationTree, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(populationTree, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(populationTree));
  COMP_descriptor_ = file->message_type(25);
  static const int COMP_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COMP, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COMP, prefix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COMP, suffix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COMP, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COMP, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COMP, marker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COMP, spillover_),
  };
  COMP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      COMP_descriptor_,
      COMP::default_instance_,
      COMP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COMP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COMP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(COMP));
  PARAM_descriptor_ = file->message_type(26);
  static const int PARAM_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PARAM, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PARAM, log_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PARAM, range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PARAM, highvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PARAM, calibrationindex_),
  };
  PARAM_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PARAM_descriptor_,
      PARAM::default_instance_,
      PARAM_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PARAM, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PARAM, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PARAM));
  GatingHierarchy_descriptor_ = file->message_type(27);
  static const int GatingHierarchy_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatingHierarchy, tree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatingHierarchy, comp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatingHierarchy, isloaded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatingHierarchy, transflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatingHierarchy, trans_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatingHierarchy, frame_),
  };
  GatingHierarchy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GatingHierarchy_descriptor_,
      GatingHierarchy::default_instance_,
      GatingHierarchy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatingHierarchy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatingHierarchy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GatingHierarchy));
  CytoFrame_descriptor_ = file->message_type(28);
  static const int CytoFrame_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CytoFrame, is_h5_),
  };
  CytoFrame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CytoFrame_descriptor_,
      CytoFrame::default_instance_,
      CytoFrame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CytoFrame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CytoFrame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CytoFrame));
  TRANS_TBL_descriptor_ = file->message_type(29);
  static const int TRANS_TBL_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRANS_TBL, trans_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRANS_TBL, trans_),
  };
  TRANS_TBL_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TRANS_TBL_descriptor_,
      TRANS_TBL::default_instance_,
      TRANS_TBL_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRANS_TBL, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRANS_TBL, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TRANS_TBL));
  GatingSet_descriptor_ = file->message_type(30);
  static const int GatingSet_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatingSet, trans_tbl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatingSet, samplename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatingSet, globalbiexptrans_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatingSet, globallintrans_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatingSet, gtrans_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatingSet, guid_),
  };
  GatingSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GatingSet_descriptor_,
      GatingSet::default_instance_,
      GatingSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatingSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatingSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GatingSet));
  GATE_TYPE_descriptor_ = file->enum_type(0);
  ind_type_descriptor_ = file->enum_type(1);
  TRANS_TYPE_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GatingSet_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    paramRange_descriptor_, &paramRange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rangeGate_descriptor_, &rangeGate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    paramPoly_descriptor_, &paramPoly::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    polygonGate_descriptor_, &polygonGate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    coordinate_descriptor_, &coordinate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ellipseGate_descriptor_, &ellipseGate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BOOL_GATE_OP_descriptor_, &BOOL_GATE_OP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    boolGate_descriptor_, &boolGate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    clusterGate_descriptor_, &clusterGate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gate_descriptor_, &gate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    POPSTATS_descriptor_, &POPSTATS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    calibrationTable_descriptor_, &calibrationTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    biexpTrans_descriptor_, &biexpTrans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fasinhTrans_descriptor_, &fasinhTrans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    scaleTrans_descriptor_, &scaleTrans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    flinTrans_descriptor_, &flinTrans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    logTrans_descriptor_, &logTrans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    logicleTrans_descriptor_, &logicleTrans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    transformation_descriptor_, &transformation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    trans_pair_descriptor_, &trans_pair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    trans_local_descriptor_, &trans_local::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    POPINDICES_descriptor_, &POPINDICES::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    nodeProperties_descriptor_, &nodeProperties::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    treeNodes_descriptor_, &treeNodes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    populationTree_descriptor_, &populationTree::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    COMP_descriptor_, &COMP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PARAM_descriptor_, &PARAM::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GatingHierarchy_descriptor_, &GatingHierarchy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CytoFrame_descriptor_, &CytoFrame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TRANS_TBL_descriptor_, &TRANS_TBL::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GatingSet_descriptor_, &GatingSet::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GatingSet_2eproto() {
  delete paramRange::default_instance_;
  delete paramRange_reflection_;
  delete rangeGate::default_instance_;
  delete rangeGate_reflection_;
  delete paramPoly::default_instance_;
  delete paramPoly_reflection_;
  delete polygonGate::default_instance_;
  delete polygonGate_reflection_;
  delete coordinate::default_instance_;
  delete coordinate_reflection_;
  delete ellipseGate::default_instance_;
  delete ellipseGate_reflection_;
  delete BOOL_GATE_OP::default_instance_;
  delete BOOL_GATE_OP_reflection_;
  delete boolGate::default_instance_;
  delete boolGate_reflection_;
  delete clusterGate::default_instance_;
  delete clusterGate_reflection_;
  delete gate::default_instance_;
  delete gate_reflection_;
  delete POPSTATS::default_instance_;
  delete POPSTATS_reflection_;
  delete calibrationTable::default_instance_;
  delete calibrationTable_reflection_;
  delete biexpTrans::default_instance_;
  delete biexpTrans_reflection_;
  delete fasinhTrans::default_instance_;
  delete fasinhTrans_reflection_;
  delete scaleTrans::default_instance_;
  delete scaleTrans_reflection_;
  delete flinTrans::default_instance_;
  delete flinTrans_reflection_;
  delete logTrans::default_instance_;
  delete logTrans_reflection_;
  delete logicleTrans::default_instance_;
  delete logicleTrans_reflection_;
  delete transformation::default_instance_;
  delete transformation_reflection_;
  delete trans_pair::default_instance_;
  delete trans_pair_reflection_;
  delete trans_local::default_instance_;
  delete trans_local_reflection_;
  delete POPINDICES::default_instance_;
  delete POPINDICES_reflection_;
  delete nodeProperties::default_instance_;
  delete nodeProperties_reflection_;
  delete treeNodes::default_instance_;
  delete treeNodes_reflection_;
  delete populationTree::default_instance_;
  delete populationTree_reflection_;
  delete COMP::default_instance_;
  delete COMP_reflection_;
  delete PARAM::default_instance_;
  delete PARAM_reflection_;
  delete GatingHierarchy::default_instance_;
  delete GatingHierarchy_reflection_;
  delete CytoFrame::default_instance_;
  delete CytoFrame_reflection_;
  delete TRANS_TBL::default_instance_;
  delete TRANS_TBL_reflection_;
  delete GatingSet::default_instance_;
  delete GatingSet_reflection_;
}

void protobuf_AddDesc_GatingSet_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017GatingSet.proto\022\002pb\"4\n\nparamRange\022\014\n\004n"
    "ame\030\001 \002(\t\022\013\n\003min\030\002 \002(\002\022\013\n\003max\030\003 \002(\002\"*\n\tr"
    "angeGate\022\035\n\005param\030\001 \002(\0132\016.pb.paramRange\""
    "=\n\tparamPoly\022\016\n\006params\030\001 \003(\t\022 \n\010vertices"
    "\030\002 \003(\0132\016.pb.coordinate\"+\n\013polygonGate\022\034\n"
    "\005param\030\001 \002(\0132\r.pb.paramPoly\"\"\n\ncoordinat"
    "e\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\"\200\001\n\013ellipseGate\022"
    "\032\n\002mu\030\001 \002(\0132\016.pb.coordinate\022\033\n\003cov\030\002 \003(\013"
    "2\016.pb.coordinate\022*\n\022antipodal_vertices\030\003"
    " \003(\0132\016.pb.coordinate\022\014\n\004dist\030\004 \001(\002\"7\n\014BO"
    "OL_GATE_OP\022\014\n\004path\030\001 \003(\t\022\n\n\002op\030\002 \002(\r\022\r\n\005"
    "isNot\030\003 \002(\010\"0\n\010boolGate\022$\n\nboolOpSpec\030\001 "
    "\003(\0132\020.pb.BOOL_GATE_OP\"%\n\013clusterGate\022\026\n\016"
    "cluster_method\030\001 \002(\t\"\345\001\n\004gate\022\013\n\003neg\030\001 \002"
    "(\010\022\025\n\risTransformed\030\002 \002(\010\022\020\n\010isGained\030\003 "
    "\002(\010\022\033\n\004type\030\004 \002(\0162\r.pb.GATE_TYPE\022\031\n\002rg\030\005"
    " \001(\0132\r.pb.rangeGate\022\033\n\002pg\030\006 \001(\0132\017.pb.pol"
    "ygonGate\022\033\n\002eg\030\007 \001(\0132\017.pb.ellipseGate\022\030\n"
    "\002bg\030\010 \001(\0132\014.pb.boolGate\022\033\n\002cg\030\t \001(\0132\017.pb"
    ".clusterGate\"-\n\010POPSTATS\022\020\n\010statType\030\001 \002"
    "(\t\022\017\n\007statVal\030\002 \002(\002\"\223\001\n\020calibrationTable"
    "\022\r\n\001x\030\001 \003(\002B\002\020\001\022\r\n\001y\030\002 \003(\002B\002\020\001\022\r\n\001b\030\003 \003("
    "\002B\002\020\001\022\r\n\001c\030\004 \003(\002B\002\020\001\022\r\n\001d\030\005 \003(\002B\002\020\001\022\025\n\rs"
    "pline_method\030\006 \001(\r\022\017\n\007caltype\030\007 \001(\t\022\014\n\004f"
    "lag\030\010 \001(\010\"b\n\nbiexpTrans\022\024\n\014channelRange\030"
    "\001 \001(\r\022\013\n\003pos\030\002 \001(\002\022\013\n\003neg\030\003 \001(\002\022\022\n\nwidth"
    "Basis\030\004 \001(\002\022\020\n\010maxValue\030\005 \001(\002\"P\n\013fasinhT"
    "rans\022\016\n\006length\030\001 \001(\002\022\020\n\010maxRange\030\002 \001(\002\022\t"
    "\n\001T\030\003 \001(\002\022\t\n\001A\030\004 \001(\002\022\t\n\001M\030\005 \001(\002\"\"\n\nscale"
    "Trans\022\024\n\014scale_factor\030\001 \001(\002\"%\n\tflinTrans"
    "\022\013\n\003min\030\001 \001(\002\022\013\n\003max\030\002 \001(\002\"5\n\010logTrans\022\016"
    "\n\006offset\030\001 \001(\002\022\016\n\006decade\030\002 \001(\002\022\t\n\001T\030\003 \001("
    "\002\"k\n\014logicleTrans\022\t\n\001T\030\001 \001(\002\022\t\n\001W\030\002 \001(\002\022"
    "\t\n\001M\030\003 \001(\002\022\t\n\001A\030\004 \001(\002\022\014\n\004bins\030\005 \001(\002\022\016\n\006i"
    "sGml2\030\006 \001(\010\022\021\n\tisInverse\030\007 \001(\010\"\331\002\n\016trans"
    "formation\022$\n\006calTbl\030\001 \001(\0132\024.pb.calibrati"
    "onTable\022\022\n\nisGateOnly\030\002 \001(\010\022\014\n\004name\030\004 \001("
    "\t\022\017\n\007channel\030\005 \001(\t\022\022\n\nisComputed\030\006 \001(\010\022\014"
    "\n\004type\030\014 \001(\r\022\"\n\ntrans_type\030\003 \001(\0162\016.pb.TR"
    "ANS_TYPE\022\032\n\002bt\030\007 \001(\0132\016.pb.biexpTrans\022\030\n\002"
    "lt\030\010 \001(\0132\014.pb.logTrans\022\032\n\003flt\030\t \001(\0132\r.pb"
    ".flinTrans\022\032\n\002st\030\n \001(\0132\016.pb.scaleTrans\022\033"
    "\n\002ft\030\013 \001(\0132\017.pb.fasinhTrans\022\035\n\003lgt\030\r \001(\013"
    "2\020.pb.logicleTrans\"T\n\ntrans_pair\022\014\n\004name"
    "\030\001 \002(\t\022\025\n\rtrans_address\030\002 \001(\004\022!\n\005trans\030\003"
    " \001(\0132\022.pb.transformation\"S\n\013trans_local\022"
    "\032\n\002tp\030\001 \003(\0132\016.pb.trans_pair\022\021\n\tgroupName"
    "\030\002 \001(\t\022\025\n\tsampleIDs\030\003 \003(\rB\002\020\001\"\\\n\nPOPINDI"
    "CES\022\017\n\007nEvents\030\001 \002(\r\022\035\n\007indtype\030\002 \002(\0162\014."
    "pb.ind_type\022\020\n\004iInd\030\003 \003(\rB\002\020\001\022\014\n\004bInd\030\004 "
    "\001(\014\"\255\001\n\016nodeProperties\022\020\n\010thisName\030\001 \002(\t"
    "\022\035\n\007fjStats\030\002 \003(\0132\014.pb.POPSTATS\022\035\n\007fcSta"
    "ts\030\003 \003(\0132\014.pb.POPSTATS\022\016\n\006hidden\030\004 \002(\010\022\037"
    "\n\007indices\030\005 \001(\0132\016.pb.POPINDICES\022\032\n\010thisG"
    "ate\030\006 \001(\0132\010.pb.gate\"=\n\ttreeNodes\022 \n\004node"
    "\030\001 \002(\0132\022.pb.nodeProperties\022\016\n\006parent\030\002 \001"
    "(\r\"-\n\016populationTree\022\033\n\004node\030\001 \003(\0132\r.pb."
    "treeNodes\"u\n\004COMP\022\013\n\003cid\030\001 \001(\t\022\016\n\006prefix"
    "\030\002 \001(\t\022\016\n\006suffix\030\003 \001(\t\022\014\n\004name\030\004 \001(\t\022\017\n\007"
    "comment\030\005 \001(\t\022\016\n\006marker\030\006 \003(\t\022\021\n\tspillOv"
    "er\030\007 \003(\002\"_\n\005PARAM\022\r\n\005param\030\001 \001(\t\022\013\n\003log\030"
    "\002 \001(\010\022\r\n\005range\030\003 \001(\r\022\021\n\thighValue\030\004 \001(\r\022"
    "\030\n\020calibrationIndex\030\005 \001(\r\"\271\001\n\017GatingHier"
    "archy\022 \n\004tree\030\002 \002(\0132\022.pb.populationTree\022"
    "\026\n\004comp\030\001 \001(\0132\010.pb.COMP\022\020\n\010isLoaded\030\003 \001("
    "\010\022\034\n\ttransFlag\030\004 \003(\0132\t.pb.PARAM\022\036\n\005trans"
    "\030\005 \001(\0132\017.pb.trans_local\022\034\n\005frame\030\006 \001(\0132\r"
    ".pb.CytoFrame\"\032\n\tCytoFrame\022\r\n\005is_h5\030\001 \002("
    "\010\"E\n\tTRANS_TBL\022\025\n\rtrans_address\030\001 \001(\004\022!\n"
    "\005trans\030\002 \001(\0132\022.pb.transformation\"\242\001\n\tGat"
    "ingSet\022 \n\ttrans_tbl\030\002 \003(\0132\r.pb.TRANS_TBL"
    "\022\022\n\nsampleName\030\001 \003(\t\022\030\n\020globalBiExpTrans"
    "\030\003 \001(\004\022\026\n\016globalLinTrans\030\004 \001(\004\022\037\n\006gTrans"
    "\030\005 \003(\0132\017.pb.trans_local\022\014\n\004guid\030\006 \001(\t*\225\001"
    "\n\tGATE_TYPE\022\020\n\014POLYGON_GATE\020\001\022\016\n\nRANGE_G"
    "ATE\020\002\022\r\n\tBOOL_GATE\020\003\022\020\n\014ELLIPSE_GATE\020\004\022\r"
    "\n\tRECT_GATE\020\005\022\020\n\014LOGICAL_GATE\020\006\022\022\n\016ELLIP"
    "SOID_GATE\020\007\022\020\n\014CLUSTER_GATE\020\010*\'\n\010ind_typ"
    "e\022\010\n\004BOOL\020\000\022\007\n\003INT\020\001\022\010\n\004ROOT\020\002*n\n\nTRANS_"
    "TYPE\022\r\n\tPB_CALTBL\020\000\022\n\n\006PB_LOG\020\001\022\n\n\006PB_LI"
    "N\020\002\022\013\n\007PB_FLIN\020\003\022\016\n\nPB_FASIGNH\020\004\022\014\n\010PB_B"
    "IEXP\020\005\022\016\n\nPB_LOGICLE\020\006", 3262);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GatingSet.proto", &protobuf_RegisterTypes);
  paramRange::default_instance_ = new paramRange();
  rangeGate::default_instance_ = new rangeGate();
  paramPoly::default_instance_ = new paramPoly();
  polygonGate::default_instance_ = new polygonGate();
  coordinate::default_instance_ = new coordinate();
  ellipseGate::default_instance_ = new ellipseGate();
  BOOL_GATE_OP::default_instance_ = new BOOL_GATE_OP();
  boolGate::default_instance_ = new boolGate();
  clusterGate::default_instance_ = new clusterGate();
  gate::default_instance_ = new gate();
  POPSTATS::default_instance_ = new POPSTATS();
  calibrationTable::default_instance_ = new calibrationTable();
  biexpTrans::default_instance_ = new biexpTrans();
  fasinhTrans::default_instance_ = new fasinhTrans();
  scaleTrans::default_instance_ = new scaleTrans();
  flinTrans::default_instance_ = new flinTrans();
  logTrans::default_instance_ = new logTrans();
  logicleTrans::default_instance_ = new logicleTrans();
  transformation::default_instance_ = new transformation();
  trans_pair::default_instance_ = new trans_pair();
  trans_local::default_instance_ = new trans_local();
  POPINDICES::default_instance_ = new POPINDICES();
  nodeProperties::default_instance_ = new nodeProperties();
  treeNodes::default_instance_ = new treeNodes();
  populationTree::default_instance_ = new populationTree();
  COMP::default_instance_ = new COMP();
  PARAM::default_instance_ = new PARAM();
  GatingHierarchy::default_instance_ = new GatingHierarchy();
  CytoFrame::default_instance_ = new CytoFrame();
  TRANS_TBL::default_instance_ = new TRANS_TBL();
  GatingSet::default_instance_ = new GatingSet();
  paramRange::default_instance_->InitAsDefaultInstance();
  rangeGate::default_instance_->InitAsDefaultInstance();
  paramPoly::default_instance_->InitAsDefaultInstance();
  polygonGate::default_instance_->InitAsDefaultInstance();
  coordinate::default_instance_->InitAsDefaultInstance();
  ellipseGate::default_instance_->InitAsDefaultInstance();
  BOOL_GATE_OP::default_instance_->InitAsDefaultInstance();
  boolGate::default_instance_->InitAsDefaultInstance();
  clusterGate::default_instance_->InitAsDefaultInstance();
  gate::default_instance_->InitAsDefaultInstance();
  POPSTATS::default_instance_->InitAsDefaultInstance();
  calibrationTable::default_instance_->InitAsDefaultInstance();
  biexpTrans::default_instance_->InitAsDefaultInstance();
  fasinhTrans::default_instance_->InitAsDefaultInstance();
  scaleTrans::default_instance_->InitAsDefaultInstance();
  flinTrans::default_instance_->InitAsDefaultInstance();
  logTrans::default_instance_->InitAsDefaultInstance();
  logicleTrans::default_instance_->InitAsDefaultInstance();
  transformation::default_instance_->InitAsDefaultInstance();
  trans_pair::default_instance_->InitAsDefaultInstance();
  trans_local::default_instance_->InitAsDefaultInstance();
  POPINDICES::default_instance_->InitAsDefaultInstance();
  nodeProperties::default_instance_->InitAsDefaultInstance();
  treeNodes::default_instance_->InitAsDefaultInstance();
  populationTree::default_instance_->InitAsDefaultInstance();
  COMP::default_instance_->InitAsDefaultInstance();
  PARAM::default_instance_->InitAsDefaultInstance();
  GatingHierarchy::default_instance_->InitAsDefaultInstance();
  CytoFrame::default_instance_->InitAsDefaultInstance();
  TRANS_TBL::default_instance_->InitAsDefaultInstance();
  GatingSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GatingSet_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GatingSet_2eproto {
  StaticDescriptorInitializer_GatingSet_2eproto() {
    protobuf_AddDesc_GatingSet_2eproto();
  }
} static_descriptor_initializer_GatingSet_2eproto_;
const ::google::protobuf::EnumDescriptor* GATE_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GATE_TYPE_descriptor_;
}
bool GATE_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ind_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ind_type_descriptor_;
}
bool ind_type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TRANS_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TRANS_TYPE_descriptor_;
}
bool TRANS_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int paramRange::kNameFieldNumber;
const int paramRange::kMinFieldNumber;
const int paramRange::kMaxFieldNumber;
#endif  // !_MSC_VER

paramRange::paramRange()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.paramRange)
}

void paramRange::InitAsDefaultInstance() {
}

paramRange::paramRange(const paramRange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.paramRange)
}

void paramRange::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  min_ = 0;
  max_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

paramRange::~paramRange() {
  // @@protoc_insertion_point(destructor:pb.paramRange)
  SharedDtor();
}

void paramRange::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void paramRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* paramRange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return paramRange_descriptor_;
}

const paramRange& paramRange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GatingSet_2eproto();
  return *default_instance_;
}

paramRange* paramRange::default_instance_ = NULL;

paramRange* paramRange::New() const {
  return new paramRange;
}

void paramRange::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<paramRange*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(min_, max_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool paramRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.paramRange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_min;
        break;
      }

      // required float min = 2;
      case 2: {
        if (tag == 21) {
         parse_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_)));
          set_has_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_max;
        break;
      }

      // required float max = 3;
      case 3: {
        if (tag == 29) {
         parse_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_)));
          set_has_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.paramRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.paramRange)
  return false;
#undef DO_
}

void paramRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.paramRange)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required float min = 2;
  if (has_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->min(), output);
  }

  // required float max = 3;
  if (has_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->max(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.paramRange)
}

::google::protobuf::uint8* paramRange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.paramRange)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required float min = 2;
  if (has_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->min(), target);
  }

  // required float max = 3;
  if (has_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->max(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.paramRange)
  return target;
}

int paramRange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required float min = 2;
    if (has_min()) {
      total_size += 1 + 4;
    }

    // required float max = 3;
    if (has_max()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void paramRange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const paramRange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const paramRange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void paramRange::MergeFrom(const paramRange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_min()) {
      set_min(from.min());
    }
    if (from.has_max()) {
      set_max(from.max());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void paramRange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void paramRange::CopyFrom(const paramRange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool paramRange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void paramRange::Swap(paramRange* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(min_, other->min_);
    std::swap(max_, other->max_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata paramRange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = paramRange_descriptor_;
  metadata.reflection = paramRange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int rangeGate::kParamFieldNumber;
#endif  // !_MSC_VER

rangeGate::rangeGate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.rangeGate)
}

void rangeGate::InitAsDefaultInstance() {
  param_ = const_cast< ::pb::paramRange*>(&::pb::paramRange::default_instance());
}

rangeGate::rangeGate(const rangeGate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.rangeGate)
}

void rangeGate::SharedCtor() {
  _cached_size_ = 0;
  param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rangeGate::~rangeGate() {
  // @@protoc_insertion_point(destructor:pb.rangeGate)
  SharedDtor();
}

void rangeGate::SharedDtor() {
  if (this != default_instance_) {
    delete param_;
  }
}

void rangeGate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rangeGate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rangeGate_descriptor_;
}

const rangeGate& rangeGate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GatingSet_2eproto();
  return *default_instance_;
}

rangeGate* rangeGate::default_instance_ = NULL;

rangeGate* rangeGate::New() const {
  return new rangeGate;
}

void rangeGate::Clear() {
  if (has_param()) {
    if (param_ != NULL) param_->::pb::paramRange::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rangeGate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.rangeGate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.paramRange param = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.rangeGate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.rangeGate)
  return false;
#undef DO_
}

void rangeGate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.rangeGate)
  // required .pb.paramRange param = 1;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.rangeGate)
}

::google::protobuf::uint8* rangeGate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.rangeGate)
  // required .pb.paramRange param = 1;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.rangeGate)
  return target;
}

int rangeGate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.paramRange param = 1;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rangeGate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rangeGate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rangeGate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rangeGate::MergeFrom(const rangeGate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_param()) {
      mutable_param()->::pb::paramRange::MergeFrom(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rangeGate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rangeGate::CopyFrom(const rangeGate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rangeGate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_param()) {
    if (!this->param().IsInitialized()) return false;
  }
  return true;
}

void rangeGate::Swap(rangeGate* other) {
  if (other != this) {
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rangeGate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rangeGate_descriptor_;
  metadata.reflection = rangeGate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int paramPoly::kParamsFieldNumber;
const int paramPoly::kVerticesFieldNumber;
#endif  // !_MSC_VER

paramPoly::paramPoly()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.paramPoly)
}

void paramPoly::InitAsDefaultInstance() {
}

paramPoly::paramPoly(const paramPoly& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.paramPoly)
}

void paramPoly::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

paramPoly::~paramPoly() {
  // @@protoc_insertion_point(destructor:pb.paramPoly)
  SharedDtor();
}

void paramPoly::SharedDtor() {
  if (this != default_instance_) {
  }
}

void paramPoly::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* paramPoly::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return paramPoly_descriptor_;
}

const paramPoly& paramPoly::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GatingSet_2eproto();
  return *default_instance_;
}

paramPoly* paramPoly::default_instance_ = NULL;

paramPoly* paramPoly::New() const {
  return new paramPoly;
}

void paramPoly::Clear() {
  params_.Clear();
  vertices_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool paramPoly::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.paramPoly)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string params = 1;
      case 1: {
        if (tag == 10) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_params()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->params(this->params_size() - 1).data(),
            this->params(this->params_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "params");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_params;
        if (input->ExpectTag(18)) goto parse_vertices;
        break;
      }

      // repeated .pb.coordinate vertices = 2;
      case 2: {
        if (tag == 18) {
         parse_vertices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vertices()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_vertices;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.paramPoly)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.paramPoly)
  return false;
#undef DO_
}

void paramPoly::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.paramPoly)
  // repeated string params = 1;
  for (int i = 0; i < this->params_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->params(i).data(), this->params(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "params");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->params(i), output);
  }

  // repeated .pb.coordinate vertices = 2;
  for (int i = 0; i < this->vertices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->vertices(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.paramPoly)
}

::google::protobuf::uint8* paramPoly::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.paramPoly)
  // repeated string params = 1;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->params(i).data(), this->params(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "params");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->params(i), target);
  }

  // repeated .pb.coordinate vertices = 2;
  for (int i = 0; i < this->vertices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->vertices(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.paramPoly)
  return target;
}

int paramPoly::ByteSize() const {
  int total_size = 0;

  // repeated string params = 1;
  total_size += 1 * this->params_size();
  for (int i = 0; i < this->params_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->params(i));
  }

  // repeated .pb.coordinate vertices = 2;
  total_size += 1 * this->vertices_size();
  for (int i = 0; i < this->vertices_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vertices(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void paramPoly::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const paramPoly* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const paramPoly*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void paramPoly::MergeFrom(const paramPoly& from) {
  GOOGLE_CHECK_NE(&from, this);
  params_.MergeFrom(from.params_);
  vertices_.MergeFrom(from.vertices_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void paramPoly::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void paramPoly::CopyFrom(const paramPoly& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool paramPoly::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->vertices())) return false;
  return true;
}

void paramPoly::Swap(paramPoly* other) {
  if (other != this) {
    params_.Swap(&other->params_);
    vertices_.Swap(&other->vertices_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata paramPoly::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = paramPoly_descriptor_;
  metadata.reflection = paramPoly_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int polygonGate::kParamFieldNumber;
#endif  // !_MSC_VER

polygonGate::polygonGate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.polygonGate)
}

void polygonGate::InitAsDefaultInstance() {
  param_ = const_cast< ::pb::paramPoly*>(&::pb::paramPoly::default_instance());
}

polygonGate::polygonGate(const polygonGate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.polygonGate)
}

void polygonGate::SharedCtor() {
  _cached_size_ = 0;
  param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

polygonGate::~polygonGate() {
  // @@protoc_insertion_point(destructor:pb.polygonGate)
  SharedDtor();
}

void polygonGate::SharedDtor() {
  if (this != default_instance_) {
    delete param_;
  }
}

void polygonGate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* polygonGate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return polygonGate_descriptor_;
}

const polygonGate& polygonGate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GatingSet_2eproto();
  return *default_instance_;
}

polygonGate* polygonGate::default_instance_ = NULL;

polygonGate* polygonGate::New() const {
  return new polygonGate;
}

void polygonGate::Clear() {
  if (has_param()) {
    if (param_ != NULL) param_->::pb::paramPoly::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool polygonGate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.polygonGate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.paramPoly param = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.polygonGate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.polygonGate)
  return false;
#undef DO_
}

void polygonGate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.polygonGate)
  // required .pb.paramPoly param = 1;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.polygonGate)
}

::google::protobuf::uint8* polygonGate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.polygonGate)
  // required .pb.paramPoly param = 1;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.polygonGate)
  return target;
}

int polygonGate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.paramPoly param = 1;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void polygonGate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const polygonGate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const polygonGate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void polygonGate::MergeFrom(const polygonGate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_param()) {
      mutable_param()->::pb::paramPoly::MergeFrom(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void polygonGate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void polygonGate::CopyFrom(const polygonGate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool polygonGate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_param()) {
    if (!this->param().IsInitialized()) return false;
  }
  return true;
}

void polygonGate::Swap(polygonGate* other) {
  if (other != this) {
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata polygonGate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = polygonGate_descriptor_;
  metadata.reflection = polygonGate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int coordinate::kXFieldNumber;
const int coordinate::kYFieldNumber;
#endif  // !_MSC_VER

coordinate::coordinate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.coordinate)
}

void coordinate::InitAsDefaultInstance() {
}

coordinate::coordinate(const coordinate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.coordinate)
}

void coordinate::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

coordinate::~coordinate() {
  // @@protoc_insertion_point(destructor:pb.coordinate)
  SharedDtor();
}

void coordinate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void coordinate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* coordinate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return coordinate_descriptor_;
}

const coordinate& coordinate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GatingSet_2eproto();
  return *default_instance_;
}

coordinate* coordinate::default_instance_ = NULL;

coordinate* coordinate::New() const {
  return new coordinate;
}

void coordinate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<coordinate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool coordinate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.coordinate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.coordinate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.coordinate)
  return false;
#undef DO_
}

void coordinate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.coordinate)
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.coordinate)
}

::google::protobuf::uint8* coordinate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.coordinate)
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.coordinate)
  return target;
}

int coordinate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void coordinate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const coordinate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const coordinate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void coordinate::MergeFrom(const coordinate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void coordinate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void coordinate::CopyFrom(const coordinate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool coordinate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void coordinate::Swap(coordinate* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata coordinate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = coordinate_descriptor_;
  metadata.reflection = coordinate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ellipseGate::kMuFieldNumber;
const int ellipseGate::kCovFieldNumber;
const int ellipseGate::kAntipodalVerticesFieldNumber;
const int ellipseGate::kDistFieldNumber;
#endif  // !_MSC_VER

ellipseGate::ellipseGate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ellipseGate)
}

void ellipseGate::InitAsDefaultInstance() {
  mu_ = const_cast< ::pb::coordinate*>(&::pb::coordinate::default_instance());
}

ellipseGate::ellipseGate(const ellipseGate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.ellipseGate)
}

void ellipseGate::SharedCtor() {
  _cached_size_ = 0;
  mu_ = NULL;
  dist_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ellipseGate::~ellipseGate() {
  // @@protoc_insertion_point(destructor:pb.ellipseGate)
  SharedDtor();
}

void ellipseGate::SharedDtor() {
  if (this != default_instance_) {
    delete mu_;
  }
}

void ellipseGate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ellipseGate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ellipseGate_descriptor_;
}

const ellipseGate& ellipseGate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GatingSet_2eproto();
  return *default_instance_;
}

ellipseGate* ellipseGate::default_instance_ = NULL;

ellipseGate* ellipseGate::New() const {
  return new ellipseGate;
}

void ellipseGate::Clear() {
  if (_has_bits_[0 / 32] & 9) {
    if (has_mu()) {
      if (mu_ != NULL) mu_->::pb::coordinate::Clear();
    }
    dist_ = 0;
  }
  cov_.Clear();
  antipodal_vertices_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ellipseGate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.ellipseGate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.coordinate mu = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mu()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cov;
        break;
      }

      // repeated .pb.coordinate cov = 2;
      case 2: {
        if (tag == 18) {
         parse_cov:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cov()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cov;
        if (input->ExpectTag(26)) goto parse_antipodal_vertices;
        break;
      }

      // repeated .pb.coordinate antipodal_vertices = 3;
      case 3: {
        if (tag == 26) {
         parse_antipodal_vertices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_antipodal_vertices()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_antipodal_vertices;
        if (input->ExpectTag(37)) goto parse_dist;
        break;
      }

      // optional float dist = 4;
      case 4: {
        if (tag == 37) {
         parse_dist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dist_)));
          set_has_dist();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.ellipseGate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.ellipseGate)
  return false;
#undef DO_
}

void ellipseGate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.ellipseGate)
  // required .pb.coordinate mu = 1;
  if (has_mu()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mu(), output);
  }

  // repeated .pb.coordinate cov = 2;
  for (int i = 0; i < this->cov_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cov(i), output);
  }

  // repeated .pb.coordinate antipodal_vertices = 3;
  for (int i = 0; i < this->antipodal_vertices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->antipodal_vertices(i), output);
  }

  // optional float dist = 4;
  if (has_dist()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->dist(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.ellipseGate)
}

::google::protobuf::uint8* ellipseGate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ellipseGate)
  // required .pb.coordinate mu = 1;
  if (has_mu()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mu(), target);
  }

  // repeated .pb.coordinate cov = 2;
  for (int i = 0; i < this->cov_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cov(i), target);
  }

  // repeated .pb.coordinate antipodal_vertices = 3;
  for (int i = 0; i < this->antipodal_vertices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->antipodal_vertices(i), target);
  }

  // optional float dist = 4;
  if (has_dist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->dist(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ellipseGate)
  return target;
}

int ellipseGate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.coordinate mu = 1;
    if (has_mu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mu());
    }

    // optional float dist = 4;
    if (has_dist()) {
      total_size += 1 + 4;
    }

  }
  // repeated .pb.coordinate cov = 2;
  total_size += 1 * this->cov_size();
  for (int i = 0; i < this->cov_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cov(i));
  }

  // repeated .pb.coordinate antipodal_vertices = 3;
  total_size += 1 * this->antipodal_vertices_size();
  for (int i = 0; i < this->antipodal_vertices_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->antipodal_vertices(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ellipseGate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ellipseGate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ellipseGate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ellipseGate::MergeFrom(const ellipseGate& from) {
  GOOGLE_CHECK_NE(&from, this);
  cov_.MergeFrom(from.cov_);
  antipodal_vertices_.MergeFrom(from.antipodal_vertices_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mu()) {
      mutable_mu()->::pb::coordinate::MergeFrom(from.mu());
    }
    if (from.has_dist()) {
      set_dist(from.dist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ellipseGate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ellipseGate::CopyFrom(const ellipseGate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ellipseGate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_mu()) {
    if (!this->mu().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->cov())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->antipodal_vertices())) return false;
  return true;
}

void ellipseGate::Swap(ellipseGate* other) {
  if (other != this) {
    std::swap(mu_, other->mu_);
    cov_.Swap(&other->cov_);
    antipodal_vertices_.Swap(&other->antipodal_vertices_);
    std::swap(dist_, other->dist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ellipseGate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ellipseGate_descriptor_;
  metadata.reflection = ellipseGate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BOOL_GATE_OP::kPathFieldNumber;
const int BOOL_GATE_OP::kOpFieldNumber;
const int BOOL_GATE_OP::kIsNotFieldNumber;
#endif  // !_MSC_VER

BOOL_GATE_OP::BOOL_GATE_OP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BOOL_GATE_OP)
}

void BOOL_GATE_OP::InitAsDefaultInstance() {
}

BOOL_GATE_OP::BOOL_GATE_OP(const BOOL_GATE_OP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BOOL_GATE_OP)
}

void BOOL_GATE_OP::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  op_ = 0u;
  isnot_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BOOL_GATE_OP::~BOOL_GATE_OP() {
  // @@protoc_insertion_point(destructor:pb.BOOL_GATE_OP)
  SharedDtor();
}

void BOOL_GATE_OP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BOOL_GATE_OP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BOOL_GATE_OP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BOOL_GATE_OP_descriptor_;
}

const BOOL_GATE_OP& BOOL_GATE_OP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GatingSet_2eproto();
  return *default_instance_;
}

BOOL_GATE_OP* BOOL_GATE_OP::default_instance_ = NULL;

BOOL_GATE_OP* BOOL_GATE_OP::New() const {
  return new BOOL_GATE_OP;
}

void BOOL_GATE_OP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BOOL_GATE_OP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(op_, isnot_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  path_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BOOL_GATE_OP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BOOL_GATE_OP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string path = 1;
      case 1: {
        if (tag == 10) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path(this->path_size() - 1).data(),
            this->path(this->path_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_path;
        if (input->ExpectTag(16)) goto parse_op;
        break;
      }

      // required uint32 op = 2;
      case 2: {
        if (tag == 16) {
         parse_op:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &op_)));
          set_has_op();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_isNot;
        break;
      }

      // required bool isNot = 3;
      case 3: {
        if (tag == 24) {
         parse_isNot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isnot_)));
          set_has_isnot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BOOL_GATE_OP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BOOL_GATE_OP)
  return false;
#undef DO_
}

void BOOL_GATE_OP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BOOL_GATE_OP)
  // repeated string path = 1;
  for (int i = 0; i < this->path_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->path(i).data(), this->path(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "path");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(i), output);
  }

  // required uint32 op = 2;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->op(), output);
  }

  // required bool isNot = 3;
  if (has_isnot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isnot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BOOL_GATE_OP)
}

::google::protobuf::uint8* BOOL_GATE_OP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BOOL_GATE_OP)
  // repeated string path = 1;
  for (int i = 0; i < this->path_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path(i).data(), this->path(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->path(i), target);
  }

  // required uint32 op = 2;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->op(), target);
  }

  // required bool isNot = 3;
  if (has_isnot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isnot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BOOL_GATE_OP)
  return target;
}

int BOOL_GATE_OP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 op = 2;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->op());
    }

    // required bool isNot = 3;
    if (has_isnot()) {
      total_size += 1 + 1;
    }

  }
  // repeated string path = 1;
  total_size += 1 * this->path_size();
  for (int i = 0; i < this->path_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->path(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BOOL_GATE_OP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BOOL_GATE_OP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BOOL_GATE_OP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BOOL_GATE_OP::MergeFrom(const BOOL_GATE_OP& from) {
  GOOGLE_CHECK_NE(&from, this);
  path_.MergeFrom(from.path_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_op()) {
      set_op(from.op());
    }
    if (from.has_isnot()) {
      set_isnot(from.isnot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BOOL_GATE_OP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BOOL_GATE_OP::CopyFrom(const BOOL_GATE_OP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BOOL_GATE_OP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void BOOL_GATE_OP::Swap(BOOL_GATE_OP* other) {
  if (other != this) {
    path_.Swap(&other->path_);
    std::swap(op_, other->op_);
    std::swap(isnot_, other->isnot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BOOL_GATE_OP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BOOL_GATE_OP_descriptor_;
  metadata.reflection = BOOL_GATE_OP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int boolGate::kBoolOpSpecFieldNumber;
#endif  // !_MSC_VER

boolGate::boolGate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.boolGate)
}

void boolGate::InitAsDefaultInstance() {
}

boolGate::boolGate(const boolGate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.boolGate)
}

void boolGate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

boolGate::~boolGate() {
  // @@protoc_insertion_point(destructor:pb.boolGate)
  SharedDtor();
}

void boolGate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void boolGate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* boolGate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return boolGate_descriptor_;
}

const boolGate& boolGate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GatingSet_2eproto();
  return *default_instance_;
}

boolGate* boolGate::default_instance_ = NULL;

boolGate* boolGate::New() const {
  return new boolGate;
}

void boolGate::Clear() {
  boolopspec_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool boolGate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.boolGate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.BOOL_GATE_OP boolOpSpec = 1;
      case 1: {
        if (tag == 10) {
         parse_boolOpSpec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_boolopspec()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_boolOpSpec;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.boolGate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.boolGate)
  return false;
#undef DO_
}

void boolGate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.boolGate)
  // repeated .pb.BOOL_GATE_OP boolOpSpec = 1;
  for (int i = 0; i < this->boolopspec_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->boolopspec(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.boolGate)
}

::google::protobuf::uint8* boolGate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.boolGate)
  // repeated .pb.BOOL_GATE_OP boolOpSpec = 1;
  for (int i = 0; i < this->boolopspec_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->boolopspec(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.boolGate)
  return target;
}

int boolGate::ByteSize() const {
  int total_size = 0;

  // repeated .pb.BOOL_GATE_OP boolOpSpec = 1;
  total_size += 1 * this->boolopspec_size();
  for (int i = 0; i < this->boolopspec_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->boolopspec(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void boolGate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const boolGate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const boolGate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void boolGate::MergeFrom(const boolGate& from) {
  GOOGLE_CHECK_NE(&from, this);
  boolopspec_.MergeFrom(from.boolopspec_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void boolGate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void boolGate::CopyFrom(const boolGate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool boolGate::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->boolopspec())) return false;
  return true;
}

void boolGate::Swap(boolGate* other) {
  if (other != this) {
    boolopspec_.Swap(&other->boolopspec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata boolGate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = boolGate_descriptor_;
  metadata.reflection = boolGate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int clusterGate::kClusterMethodFieldNumber;
#endif  // !_MSC_VER

clusterGate::clusterGate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.clusterGate)
}

void clusterGate::InitAsDefaultInstance() {
}

clusterGate::clusterGate(const clusterGate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.clusterGate)
}

void clusterGate::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cluster_method_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

clusterGate::~clusterGate() {
  // @@protoc_insertion_point(destructor:pb.clusterGate)
  SharedDtor();
}

void clusterGate::SharedDtor() {
  if (cluster_method_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cluster_method_;
  }
  if (this != default_instance_) {
  }
}

void clusterGate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* clusterGate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return clusterGate_descriptor_;
}

const clusterGate& clusterGate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GatingSet_2eproto();
  return *default_instance_;
}

clusterGate* clusterGate::default_instance_ = NULL;

clusterGate* clusterGate::New() const {
  return new clusterGate;
}

void clusterGate::Clear() {
  if (has_cluster_method()) {
    if (cluster_method_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      cluster_method_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool clusterGate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.clusterGate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string cluster_method = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_method()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cluster_method().data(), this->cluster_method().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cluster_method");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.clusterGate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.clusterGate)
  return false;
#undef DO_
}

void clusterGate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.clusterGate)
  // required string cluster_method = 1;
  if (has_cluster_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cluster_method().data(), this->cluster_method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cluster_method");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cluster_method(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.clusterGate)
}

::google::protobuf::uint8* clusterGate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.clusterGate)
  // required string cluster_method = 1;
  if (has_cluster_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cluster_method().data(), this->cluster_method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cluster_method");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cluster_method(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.clusterGate)
  return target;
}

int clusterGate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string cluster_method = 1;
    if (has_cluster_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cluster_method());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void clusterGate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const clusterGate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const clusterGate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void clusterGate::MergeFrom(const clusterGate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cluster_method()) {
      set_cluster_method(from.cluster_method());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void clusterGate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void clusterGate::CopyFrom(const clusterGate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool clusterGate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void clusterGate::Swap(clusterGate* other) {
  if (other != this) {
    std::swap(cluster_method_, other->cluster_method_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata clusterGate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = clusterGate_descriptor_;
  metadata.reflection = clusterGate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gate::kNegFieldNumber;
const int gate::kIsTransformedFieldNumber;
const int gate::kIsGainedFieldNumber;
const int gate::kTypeFieldNumber;
const int gate::kRgFieldNumber;
const int gate::kPgFieldNumber;
const int gate::kEgFieldNumber;
const int gate::kBgFieldNumber;
const int gate::kCgFieldNumber;
#endif  // !_MSC_VER

gate::gate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.gate)
}

void gate::InitAsDefaultInstance() {
  rg_ = const_cast< ::pb::rangeGate*>(&::pb::rangeGate::default_instance());
  pg_ = const_cast< ::pb::polygonGate*>(&::pb::polygonGate::default_instance());
  eg_ = const_cast< ::pb::ellipseGate*>(&::pb::ellipseGate::default_instance());
  bg_ = const_cast< ::pb::boolGate*>(&::pb::boolGate::default_instance());
  cg_ = const_cast< ::pb::clusterGate*>(&::pb::clusterGate::default_instance());
}

gate::gate(const gate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.gate)
}

void gate::SharedCtor() {
  _cached_size_ = 0;
  neg_ = false;
  istransformed_ = false;
  isgained_ = false;
  type_ = 1;
  rg_ = NULL;
  pg_ = NULL;
  eg_ = NULL;
  bg_ = NULL;
  cg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gate::~gate() {
  // @@protoc_insertion_point(destructor:pb.gate)
  SharedDtor();
}

void gate::SharedDtor() {
  if (this != default_instance_) {
    delete rg_;
    delete pg_;
    delete eg_;
    delete bg_;
    delete cg_;
  }
}

void gate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gate_descriptor_;
}

const gate& gate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GatingSet_2eproto();
  return *default_instance_;
}

gate* gate::default_instance_ = NULL;

gate* gate::New() const {
  return new gate;
}

void gate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<gate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(neg_, isgained_);
    type_ = 1;
    if (has_rg()) {
      if (rg_ != NULL) rg_->::pb::rangeGate::Clear();
    }
    if (has_pg()) {
      if (pg_ != NULL) pg_->::pb::polygonGate::Clear();
    }
    if (has_eg()) {
      if (eg_ != NULL) eg_->::pb::ellipseGate::Clear();
    }
    if (has_bg()) {
      if (bg_ != NULL) bg_->::pb::boolGate::Clear();
    }
  }
  if (has_cg()) {
    if (cg_ != NULL) cg_->::pb::clusterGate::Clear();
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.gate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool neg = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &neg_)));
          set_has_neg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isTransformed;
        break;
      }

      // required bool isTransformed = 2;
      case 2: {
        if (tag == 16) {
         parse_isTransformed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istransformed_)));
          set_has_istransformed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_isGained;
        break;
      }

      // required bool isGained = 3;
      case 3: {
        if (tag == 24) {
         parse_isGained:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isgained_)));
          set_has_isgained();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // required .pb.GATE_TYPE type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::GATE_TYPE_IsValid(value)) {
            set_type(static_cast< ::pb::GATE_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_rg;
        break;
      }

      // optional .pb.rangeGate rg = 5;
      case 5: {
        if (tag == 42) {
         parse_rg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_pg;
        break;
      }

      // optional .pb.polygonGate pg = 6;
      case 6: {
        if (tag == 50) {
         parse_pg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_eg;
        break;
      }

      // optional .pb.ellipseGate eg = 7;
      case 7: {
        if (tag == 58) {
         parse_eg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_bg;
        break;
      }

      // optional .pb.boolGate bg = 8;
      case 8: {
        if (tag == 66) {
         parse_bg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_cg;
        break;
      }

      // optional .pb.clusterGate cg = 9;
      case 9: {
        if (tag == 74) {
         parse_cg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.gate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.gate)
  return false;
#undef DO_
}

void gate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.gate)
  // required bool neg = 1;
  if (has_neg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->neg(), output);
  }

  // required bool isTransformed = 2;
  if (has_istransformed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->istransformed(), output);
  }

  // required bool isGained = 3;
  if (has_isgained()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isgained(), output);
  }

  // required .pb.GATE_TYPE type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // optional .pb.rangeGate rg = 5;
  if (has_rg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->rg(), output);
  }

  // optional .pb.polygonGate pg = 6;
  if (has_pg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->pg(), output);
  }

  // optional .pb.ellipseGate eg = 7;
  if (has_eg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->eg(), output);
  }

  // optional .pb.boolGate bg = 8;
  if (has_bg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->bg(), output);
  }

  // optional .pb.clusterGate cg = 9;
  if (has_cg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->cg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.gate)
}

::google::protobuf::uint8* gate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.gate)
  // required bool neg = 1;
  if (has_neg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->neg(), target);
  }

  // required bool isTransformed = 2;
  if (has_istransformed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->istransformed(), target);
  }

  // required bool isGained = 3;
  if (has_isgained()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isgained(), target);
  }

  // required .pb.GATE_TYPE type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // optional .pb.rangeGate rg = 5;
  if (has_rg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->rg(), target);
  }

  // optional .pb.polygonGate pg = 6;
  if (has_pg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->pg(), target);
  }

  // optional .pb.ellipseGate eg = 7;
  if (has_eg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->eg(), target);
  }

  // optional .pb.boolGate bg = 8;
  if (has_bg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->bg(), target);
  }

  // optional .pb.clusterGate cg = 9;
  if (has_cg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->cg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.gate)
  return target;
}

int gate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool neg = 1;
    if (has_neg()) {
      total_size += 1 + 1;
    }

    // required bool isTransformed = 2;
    if (has_istransformed()) {
      total_size += 1 + 1;
    }

    // required bool isGained = 3;
    if (has_isgained()) {
      total_size += 1 + 1;
    }

    // required .pb.GATE_TYPE type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .pb.rangeGate rg = 5;
    if (has_rg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rg());
    }

    // optional .pb.polygonGate pg = 6;
    if (has_pg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pg());
    }

    // optional .pb.ellipseGate eg = 7;
    if (has_eg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->eg());
    }

    // optional .pb.boolGate bg = 8;
    if (has_bg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bg());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .pb.clusterGate cg = 9;
    if (has_cg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gate::MergeFrom(const gate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_neg()) {
      set_neg(from.neg());
    }
    if (from.has_istransformed()) {
      set_istransformed(from.istransformed());
    }
    if (from.has_isgained()) {
      set_isgained(from.isgained());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_rg()) {
      mutable_rg()->::pb::rangeGate::MergeFrom(from.rg());
    }
    if (from.has_pg()) {
      mutable_pg()->::pb::polygonGate::MergeFrom(from.pg());
    }
    if (from.has_eg()) {
      mutable_eg()->::pb::ellipseGate::MergeFrom(from.eg());
    }
    if (from.has_bg()) {
      mutable_bg()->::pb::boolGate::MergeFrom(from.bg());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cg()) {
      mutable_cg()->::pb::clusterGate::MergeFrom(from.cg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gate::CopyFrom(const gate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gate::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_rg()) {
    if (!this->rg().IsInitialized()) return false;
  }
  if (has_pg()) {
    if (!this->pg().IsInitialized()) return false;
  }
  if (has_eg()) {
    if (!this->eg().IsInitialized()) return false;
  }
  if (has_bg()) {
    if (!this->bg().IsInitialized()) return false;
  }
  if (has_cg()) {
    if (!this->cg().IsInitialized()) return false;
  }
  return true;
}

void gate::Swap(gate* other) {
  if (other != this) {
    std::swap(neg_, other->neg_);
    std::swap(istransformed_, other->istransformed_);
    std::swap(isgained_, other->isgained_);
    std::swap(type_, other->type_);
    std::swap(rg_, other->rg_);
    std::swap(pg_, other->pg_);
    std::swap(eg_, other->eg_);
    std::swap(bg_, other->bg_);
    std::swap(cg_, other->cg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gate_descriptor_;
  metadata.reflection = gate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int POPSTATS::kStatTypeFieldNumber;
const int POPSTATS::kStatValFieldNumber;
#endif  // !_MSC_VER

POPSTATS::POPSTATS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.POPSTATS)
}

void POPSTATS::InitAsDefaultInstance() {
}

POPSTATS::POPSTATS(const POPSTATS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.POPSTATS)
}

void POPSTATS::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  stattype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  statval_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

POPSTATS::~POPSTATS() {
  // @@protoc_insertion_point(destructor:pb.POPSTATS)
  SharedDtor();
}

void POPSTATS::SharedDtor() {
  if (stattype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stattype_;
  }
  if (this != default_instance_) {
  }
}

void POPSTATS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* POPSTATS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return POPSTATS_descriptor_;
}

const POPSTATS& POPSTATS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GatingSet_2eproto();
  return *default_instance_;
}

POPSTATS* POPSTATS::default_instance_ = NULL;

POPSTATS* POPSTATS::New() const {
  return new POPSTATS;
}

void POPSTATS::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_stattype()) {
      if (stattype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        stattype_->clear();
      }
    }
    statval_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool POPSTATS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.POPSTATS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string statType = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stattype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stattype().data(), this->stattype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "stattype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_statVal;
        break;
      }

      // required float statVal = 2;
      case 2: {
        if (tag == 21) {
         parse_statVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &statval_)));
          set_has_statval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.POPSTATS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.POPSTATS)
  return false;
#undef DO_
}

void POPSTATS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.POPSTATS)
  // required string statType = 1;
  if (has_stattype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stattype().data(), this->stattype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stattype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stattype(), output);
  }

  // required float statVal = 2;
  if (has_statval()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->statval(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.POPSTATS)
}

::google::protobuf::uint8* POPSTATS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.POPSTATS)
  // required string statType = 1;
  if (has_stattype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stattype().data(), this->stattype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stattype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stattype(), target);
  }

  // required float statVal = 2;
  if (has_statval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->statval(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.POPSTATS)
  return target;
}

int POPSTATS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string statType = 1;
    if (has_stattype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stattype());
    }

    // required float statVal = 2;
    if (has_statval()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void POPSTATS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const POPSTATS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const POPSTATS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void POPSTATS::MergeFrom(const POPSTATS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stattype()) {
      set_stattype(from.stattype());
    }
    if (from.has_statval()) {
      set_statval(from.statval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void POPSTATS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void POPSTATS::CopyFrom(const POPSTATS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool POPSTATS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void POPSTATS::Swap(POPSTATS* other) {
  if (other != this) {
    std::swap(stattype_, other->stattype_);
    std::swap(statval_, other->statval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata POPSTATS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = POPSTATS_descriptor_;
  metadata.reflection = POPSTATS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int calibrationTable::kXFieldNumber;
const int calibrationTable::kYFieldNumber;
const int calibrationTable::kBFieldNumber;
const int calibrationTable::kCFieldNumber;
const int calibrationTable::kDFieldNumber;
const int calibrationTable::kSplineMethodFieldNumber;
const int calibrationTable::kCaltypeFieldNumber;
const int calibrationTable::kFlagFieldNumber;
#endif  // !_MSC_VER

calibrationTable::calibrationTable()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.calibrationTable)
}

void calibrationTable::InitAsDefaultInstance() {
}

calibrationTable::calibrationTable(const calibrationTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.calibrationTable)
}

void calibrationTable::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  spline_method_ = 0u;
  caltype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

calibrationTable::~calibrationTable() {
  // @@protoc_insertion_point(destructor:pb.calibrationTable)
  SharedDtor();
}

void calibrationTable::SharedDtor() {
  if (caltype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete caltype_;
  }
  if (this != default_instance_) {
  }
}

void calibrationTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* calibrationTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return calibrationTable_descriptor_;
}

const calibrationTable& calibrationTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GatingSet_2eproto();
  return *default_instance_;
}

calibrationTable* calibrationTable::default_instance_ = NULL;

calibrationTable* calibrationTable::New() const {
  return new calibrationTable;
}

void calibrationTable::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<calibrationTable*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 224) {
    ZR_(spline_method_, flag_);
    if (has_caltype()) {
      if (caltype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        caltype_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  x_.Clear();
  y_.Clear();
  b_.Clear();
  c_.Clear();
  d_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool calibrationTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.calibrationTable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float x = 1 [packed = true];
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_x())));
        } else if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10, input, this->mutable_x())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_y;
        break;
      }

      // repeated float y = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_y())));
        } else if (tag == 21) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18, input, this->mutable_y())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_b;
        break;
      }

      // repeated float b = 3 [packed = true];
      case 3: {
        if (tag == 26) {
         parse_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_b())));
        } else if (tag == 29) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26, input, this->mutable_b())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_c;
        break;
      }

      // repeated float c = 4 [packed = true];
      case 4: {
        if (tag == 34) {
         parse_c:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_c())));
        } else if (tag == 37) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34, input, this->mutable_c())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_d;
        break;
      }

      // repeated float d = 5 [packed = true];
      case 5: {
        if (tag == 42) {
         parse_d:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_d())));
        } else if (tag == 45) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 42, input, this->mutable_d())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_spline_method;
        break;
      }

      // optional uint32 spline_method = 6;
      case 6: {
        if (tag == 48) {
         parse_spline_method:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spline_method_)));
          set_has_spline_method();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_caltype;
        break;
      }

      // optional string caltype = 7;
      case 7: {
        if (tag == 58) {
         parse_caltype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_caltype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->caltype().data(), this->caltype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caltype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_flag;
        break;
      }

      // optional bool flag = 8;
      case 8: {
        if (tag == 64) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.calibrationTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.calibrationTable)
  return false;
#undef DO_
}

void calibrationTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.calibrationTable)
  // repeated float x = 1 [packed = true];
  if (this->x_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_x_cached_byte_size_);
  }
  for (int i = 0; i < this->x_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->x(i), output);
  }

  // repeated float y = 2 [packed = true];
  if (this->y_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_y_cached_byte_size_);
  }
  for (int i = 0; i < this->y_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->y(i), output);
  }

  // repeated float b = 3 [packed = true];
  if (this->b_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_b_cached_byte_size_);
  }
  for (int i = 0; i < this->b_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->b(i), output);
  }

  // repeated float c = 4 [packed = true];
  if (this->c_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_c_cached_byte_size_);
  }
  for (int i = 0; i < this->c_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->c(i), output);
  }

  // repeated float d = 5 [packed = true];
  if (this->d_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_d_cached_byte_size_);
  }
  for (int i = 0; i < this->d_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->d(i), output);
  }

  // optional uint32 spline_method = 6;
  if (has_spline_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->spline_method(), output);
  }

  // optional string caltype = 7;
  if (has_caltype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->caltype().data(), this->caltype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caltype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->caltype(), output);
  }

  // optional bool flag = 8;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.calibrationTable)
}

::google::protobuf::uint8* calibrationTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.calibrationTable)
  // repeated float x = 1 [packed = true];
  if (this->x_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _x_cached_byte_size_, target);
  }
  for (int i = 0; i < this->x_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->x(i), target);
  }

  // repeated float y = 2 [packed = true];
  if (this->y_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _y_cached_byte_size_, target);
  }
  for (int i = 0; i < this->y_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->y(i), target);
  }

  // repeated float b = 3 [packed = true];
  if (this->b_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _b_cached_byte_size_, target);
  }
  for (int i = 0; i < this->b_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->b(i), target);
  }

  // repeated float c = 4 [packed = true];
  if (this->c_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _c_cached_byte_size_, target);
  }
  for (int i = 0; i < this->c_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->c(i), target);
  }

  // repeated float d = 5 [packed = true];
  if (this->d_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _d_cached_byte_size_, target);
  }
  for (int i = 0; i < this->d_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->d(i), target);
  }

  // optional uint32 spline_method = 6;
  if (has_spline_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->spline_method(), target);
  }

  // optional string caltype = 7;
  if (has_caltype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->caltype().data(), this->caltype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caltype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->caltype(), target);
  }

  // optional bool flag = 8;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.calibrationTable)
  return target;
}

int calibrationTable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[5 / 32] & (0xffu << (5 % 32))) {
    // optional uint32 spline_method = 6;
    if (has_spline_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spline_method());
    }

    // optional string caltype = 7;
    if (has_caltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->caltype());
    }

    // optional bool flag = 8;
    if (has_flag()) {
      total_size += 1 + 1;
    }

  }
  // repeated float x = 1 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->x_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _x_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float y = 2 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->y_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _y_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float b = 3 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->b_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _b_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float c = 4 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->c_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _c_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float d = 5 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->d_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _d_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void calibrationTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const calibrationTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const calibrationTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void calibrationTable::MergeFrom(const calibrationTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  x_.MergeFrom(from.x_);
  y_.MergeFrom(from.y_);
  b_.MergeFrom(from.b_);
  c_.MergeFrom(from.c_);
  d_.MergeFrom(from.d_);
  if (from._has_bits_[5 / 32] & (0xffu << (5 % 32))) {
    if (from.has_spline_method()) {
      set_spline_method(from.spline_method());
    }
    if (from.has_caltype()) {
      set_caltype(from.caltype());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void calibrationTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void calibrationTable::CopyFrom(const calibrationTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool calibrationTable::IsInitialized() const {

  return true;
}

void calibrationTable::Swap(calibrationTable* other) {
  if (other != this) {
    x_.Swap(&other->x_);
    y_.Swap(&other->y_);
    b_.Swap(&other->b_);
    c_.Swap(&other->c_);
    d_.Swap(&other->d_);
    std::swap(spline_method_, other->spline_method_);
    std::swap(caltype_, other->caltype_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata calibrationTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = calibrationTable_descriptor_;
  metadata.reflection = calibrationTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int biexpTrans::kChannelRangeFieldNumber;
const int biexpTrans::kPosFieldNumber;
const int biexpTrans::kNegFieldNumber;
const int biexpTrans::kWidthBasisFieldNumber;
const int biexpTrans::kMaxValueFieldNumber;
#endif  // !_MSC_VER

biexpTrans::biexpTrans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.biexpTrans)
}

void biexpTrans::InitAsDefaultInstance() {
}

biexpTrans::biexpTrans(const biexpTrans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.biexpTrans)
}

void biexpTrans::SharedCtor() {
  _cached_size_ = 0;
  channelrange_ = 0u;
  pos_ = 0;
  neg_ = 0;
  widthbasis_ = 0;
  maxvalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

biexpTrans::~biexpTrans() {
  // @@protoc_insertion_point(destructor:pb.biexpTrans)
  SharedDtor();
}

void biexpTrans::SharedDtor() {
  if (this != default_instance_) {
  }
}

void biexpTrans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* biexpTrans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return biexpTrans_descriptor_;
}

const biexpTrans& biexpTrans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GatingSet_2eproto();
  return *default_instance_;
}

biexpTrans* biexpTrans::default_instance_ = NULL;

biexpTrans* biexpTrans::New() const {
  return new biexpTrans;
}

void biexpTrans::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<biexpTrans*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(channelrange_, maxvalue_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool biexpTrans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.biexpTrans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 channelRange = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelrange_)));
          set_has_channelrange();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_pos;
        break;
      }

      // optional float pos = 2;
      case 2: {
        if (tag == 21) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_neg;
        break;
      }

      // optional float neg = 3;
      case 3: {
        if (tag == 29) {
         parse_neg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &neg_)));
          set_has_neg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_widthBasis;
        break;
      }

      // optional float widthBasis = 4;
      case 4: {
        if (tag == 37) {
         parse_widthBasis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &widthbasis_)));
          set_has_widthbasis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_maxValue;
        break;
      }

      // optional float maxValue = 5;
      case 5: {
        if (tag == 45) {
         parse_maxValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxvalue_)));
          set_has_maxvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.biexpTrans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.biexpTrans)
  return false;
#undef DO_
}

void biexpTrans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.biexpTrans)
  // optional uint32 channelRange = 1;
  if (has_channelrange()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channelrange(), output);
  }

  // optional float pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->pos(), output);
  }

  // optional float neg = 3;
  if (has_neg()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->neg(), output);
  }

  // optional float widthBasis = 4;
  if (has_widthbasis()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->widthbasis(), output);
  }

  // optional float maxValue = 5;
  if (has_maxvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->maxvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.biexpTrans)
}

::google::protobuf::uint8* biexpTrans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.biexpTrans)
  // optional uint32 channelRange = 1;
  if (has_channelrange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channelrange(), target);
  }

  // optional float pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->pos(), target);
  }

  // optional float neg = 3;
  if (has_neg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->neg(), target);
  }

  // optional float widthBasis = 4;
  if (has_widthbasis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->widthbasis(), target);
  }

  // optional float maxValue = 5;
  if (has_maxvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->maxvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.biexpTrans)
  return target;
}

int biexpTrans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 channelRange = 1;
    if (has_channelrange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelrange());
    }

    // optional float pos = 2;
    if (has_pos()) {
      total_size += 1 + 4;
    }

    // optional float neg = 3;
    if (has_neg()) {
      total_size += 1 + 4;
    }

    // optional float widthBasis = 4;
    if (has_widthbasis()) {
      total_size += 1 + 4;
    }

    // optional float maxValue = 5;
    if (has_maxvalue()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void biexpTrans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const biexpTrans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const biexpTrans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void biexpTrans::MergeFrom(const biexpTrans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channelrange()) {
      set_channelrange(from.channelrange());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_neg()) {
      set_neg(from.neg());
    }
    if (from.has_widthbasis()) {
      set_widthbasis(from.widthbasis());
    }
    if (from.has_maxvalue()) {
      set_maxvalue(from.maxvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void biexpTrans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void biexpTrans::CopyFrom(const biexpTrans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool biexpTrans::IsInitialized() const {

  return true;
}

void biexpTrans::Swap(biexpTrans* other) {
  if (other != this) {
    std::swap(channelrange_, other->channelrange_);
    std::swap(pos_, other->pos_);
    std::swap(neg_, other->neg_);
    std::swap(widthbasis_, other->widthbasis_);
    std::swap(maxvalue_, other->maxvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata biexpTrans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = biexpTrans_descriptor_;
  metadata.reflection = biexpTrans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fasinhTrans::kLengthFieldNumber;
const int fasinhTrans::kMaxRangeFieldNumber;
const int fasinhTrans::kTFieldNumber;
const int fasinhTrans::kAFieldNumber;
const int fasinhTrans::kMFieldNumber;
#endif  // !_MSC_VER

fasinhTrans::fasinhTrans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.fasinhTrans)
}

void fasinhTrans::InitAsDefaultInstance() {
}

fasinhTrans::fasinhTrans(const fasinhTrans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.fasinhTrans)
}

void fasinhTrans::SharedCtor() {
  _cached_size_ = 0;
  length_ = 0;
  maxrange_ = 0;
  t_ = 0;
  a_ = 0;
  m_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fasinhTrans::~fasinhTrans() {
  // @@protoc_insertion_point(destructor:pb.fasinhTrans)
  SharedDtor();
}

void fasinhTrans::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fasinhTrans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fasinhTrans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fasinhTrans_descriptor_;
}

const fasinhTrans& fasinhTrans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GatingSet_2eproto();
  return *default_instance_;
}

fasinhTrans* fasinhTrans::default_instance_ = NULL;

fasinhTrans* fasinhTrans::New() const {
  return new fasinhTrans;
}

void fasinhTrans::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<fasinhTrans*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(length_, m_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fasinhTrans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.fasinhTrans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float length = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_maxRange;
        break;
      }

      // optional float maxRange = 2;
      case 2: {
        if (tag == 21) {
         parse_maxRange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxrange_)));
          set_has_maxrange();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_T;
        break;
      }

      // optional float T = 3;
      case 3: {
        if (tag == 29) {
         parse_T:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &t_)));
          set_has_t();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_A;
        break;
      }

      // optional float A = 4;
      case 4: {
        if (tag == 37) {
         parse_A:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &a_)));
          set_has_a();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_M;
        break;
      }

      // optional float M = 5;
      case 5: {
        if (tag == 45) {
         parse_M:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &m_)));
          set_has_m();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.fasinhTrans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.fasinhTrans)
  return false;
#undef DO_
}

void fasinhTrans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.fasinhTrans)
  // optional float length = 1;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->length(), output);
  }

  // optional float maxRange = 2;
  if (has_maxrange()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->maxrange(), output);
  }

  // optional float T = 3;
  if (has_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->t(), output);
  }

  // optional float A = 4;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->a(), output);
  }

  // optional float M = 5;
  if (has_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->m(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.fasinhTrans)
}

::google::protobuf::uint8* fasinhTrans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.fasinhTrans)
  // optional float length = 1;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->length(), target);
  }

  // optional float maxRange = 2;
  if (has_maxrange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->maxrange(), target);
  }

  // optional float T = 3;
  if (has_t()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->t(), target);
  }

  // optional float A = 4;
  if (has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->a(), target);
  }

  // optional float M = 5;
  if (has_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->m(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.fasinhTrans)
  return target;
}

int fasinhTrans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float length = 1;
    if (has_length()) {
      total_size += 1 + 4;
    }

    // optional float maxRange = 2;
    if (has_maxrange()) {
      total_size += 1 + 4;
    }

    // optional float T = 3;
    if (has_t()) {
      total_size += 1 + 4;
    }

    // optional float A = 4;
    if (has_a()) {
      total_size += 1 + 4;
    }

    // optional float M = 5;
    if (has_m()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fasinhTrans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fasinhTrans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fasinhTrans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fasinhTrans::MergeFrom(const fasinhTrans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_maxrange()) {
      set_maxrange(from.maxrange());
    }
    if (from.has_t()) {
      set_t(from.t());
    }
    if (from.has_a()) {
      set_a(from.a());
    }
    if (from.has_m()) {
      set_m(from.m());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fasinhTrans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fasinhTrans::CopyFrom(const fasinhTrans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fasinhTrans::IsInitialized() const {

  return true;
}

void fasinhTrans::Swap(fasinhTrans* other) {
  if (other != this) {
    std::swap(length_, other->length_);
    std::swap(maxrange_, other->maxrange_);
    std::swap(t_, other->t_);
    std::swap(a_, other->a_);
    std::swap(m_, other->m_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fasinhTrans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fasinhTrans_descriptor_;
  metadata.reflection = fasinhTrans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int scaleTrans::kScaleFactorFieldNumber;
#endif  // !_MSC_VER

scaleTrans::scaleTrans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.scaleTrans)
}

void scaleTrans::InitAsDefaultInstance() {
}

scaleTrans::scaleTrans(const scaleTrans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.scaleTrans)
}

void scaleTrans::SharedCtor() {
  _cached_size_ = 0;
  scale_factor_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

scaleTrans::~scaleTrans() {
  // @@protoc_insertion_point(destructor:pb.scaleTrans)
  SharedDtor();
}

void scaleTrans::SharedDtor() {
  if (this != default_instance_) {
  }
}

void scaleTrans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* scaleTrans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return scaleTrans_descriptor_;
}

const scaleTrans& scaleTrans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GatingSet_2eproto();
  return *default_instance_;
}

scaleTrans* scaleTrans::default_instance_ = NULL;

scaleTrans* scaleTrans::New() const {
  return new scaleTrans;
}

void scaleTrans::Clear() {
  scale_factor_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool scaleTrans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.scaleTrans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float scale_factor = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_factor_)));
          set_has_scale_factor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.scaleTrans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.scaleTrans)
  return false;
#undef DO_
}

void scaleTrans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.scaleTrans)
  // optional float scale_factor = 1;
  if (has_scale_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->scale_factor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.scaleTrans)
}

::google::protobuf::uint8* scaleTrans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.scaleTrans)
  // optional float scale_factor = 1;
  if (has_scale_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->scale_factor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.scaleTrans)
  return target;
}

int scaleTrans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float scale_factor = 1;
    if (has_scale_factor()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void scaleTrans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const scaleTrans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const scaleTrans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void scaleTrans::MergeFrom(const scaleTrans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scale_factor()) {
      set_scale_factor(from.scale_factor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void scaleTrans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void scaleTrans::CopyFrom(const scaleTrans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool scaleTrans::IsInitialized() const {

  return true;
}

void scaleTrans::Swap(scaleTrans* other) {
  if (other != this) {
    std::swap(scale_factor_, other->scale_factor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata scaleTrans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = scaleTrans_descriptor_;
  metadata.reflection = scaleTrans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int flinTrans::kMinFieldNumber;
const int flinTrans::kMaxFieldNumber;
#endif  // !_MSC_VER

flinTrans::flinTrans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.flinTrans)
}

void flinTrans::InitAsDefaultInstance() {
}

flinTrans::flinTrans(const flinTrans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.flinTrans)
}

void flinTrans::SharedCtor() {
  _cached_size_ = 0;
  min_ = 0;
  max_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

flinTrans::~flinTrans() {
  // @@protoc_insertion_point(destructor:pb.flinTrans)
  SharedDtor();
}

void flinTrans::SharedDtor() {
  if (this != default_instance_) {
  }
}

void flinTrans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flinTrans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return flinTrans_descriptor_;
}

const flinTrans& flinTrans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GatingSet_2eproto();
  return *default_instance_;
}

flinTrans* flinTrans::default_instance_ = NULL;

flinTrans* flinTrans::New() const {
  return new flinTrans;
}

void flinTrans::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<flinTrans*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(min_, max_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool flinTrans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.flinTrans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float min = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_)));
          set_has_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_max;
        break;
      }

      // optional float max = 2;
      case 2: {
        if (tag == 21) {
         parse_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_)));
          set_has_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.flinTrans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.flinTrans)
  return false;
#undef DO_
}

void flinTrans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.flinTrans)
  // optional float min = 1;
  if (has_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->min(), output);
  }

  // optional float max = 2;
  if (has_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->max(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.flinTrans)
}

::google::protobuf::uint8* flinTrans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.flinTrans)
  // optional float min = 1;
  if (has_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->min(), target);
  }

  // optional float max = 2;
  if (has_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->max(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.flinTrans)
  return target;
}

int flinTrans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float min = 1;
    if (has_min()) {
      total_size += 1 + 4;
    }

    // optional float max = 2;
    if (has_max()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flinTrans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const flinTrans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const flinTrans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void flinTrans::MergeFrom(const flinTrans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_min()) {
      set_min(from.min());
    }
    if (from.has_max()) {
      set_max(from.max());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void flinTrans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flinTrans::CopyFrom(const flinTrans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flinTrans::IsInitialized() const {

  return true;
}

void flinTrans::Swap(flinTrans* other) {
  if (other != this) {
    std::swap(min_, other->min_);
    std::swap(max_, other->max_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata flinTrans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = flinTrans_descriptor_;
  metadata.reflection = flinTrans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int logTrans::kOffsetFieldNumber;
const int logTrans::kDecadeFieldNumber;
const int logTrans::kTFieldNumber;
#endif  // !_MSC_VER

logTrans::logTrans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.logTrans)
}

void logTrans::InitAsDefaultInstance() {
}

logTrans::logTrans(const logTrans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.logTrans)
}

void logTrans::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0;
  decade_ = 0;
  t_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

logTrans::~logTrans() {
  // @@protoc_insertion_point(destructor:pb.logTrans)
  SharedDtor();
}

void logTrans::SharedDtor() {
  if (this != default_instance_) {
  }
}

void logTrans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* logTrans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return logTrans_descriptor_;
}

const logTrans& logTrans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GatingSet_2eproto();
  return *default_instance_;
}

logTrans* logTrans::default_instance_ = NULL;

logTrans* logTrans::New() const {
  return new logTrans;
}

void logTrans::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<logTrans*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(offset_, t_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool logTrans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.logTrans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float offset = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_decade;
        break;
      }

      // optional float decade = 2;
      case 2: {
        if (tag == 21) {
         parse_decade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &decade_)));
          set_has_decade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_T;
        break;
      }

      // optional float T = 3;
      case 3: {
        if (tag == 29) {
         parse_T:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &t_)));
          set_has_t();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.logTrans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.logTrans)
  return false;
#undef DO_
}

void logTrans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.logTrans)
  // optional float offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->offset(), output);
  }

  // optional float decade = 2;
  if (has_decade()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->decade(), output);
  }

  // optional float T = 3;
  if (has_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->t(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.logTrans)
}

::google::protobuf::uint8* logTrans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.logTrans)
  // optional float offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->offset(), target);
  }

  // optional float decade = 2;
  if (has_decade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->decade(), target);
  }

  // optional float T = 3;
  if (has_t()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->t(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.logTrans)
  return target;
}

int logTrans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float offset = 1;
    if (has_offset()) {
      total_size += 1 + 4;
    }

    // optional float decade = 2;
    if (has_decade()) {
      total_size += 1 + 4;
    }

    // optional float T = 3;
    if (has_t()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void logTrans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const logTrans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const logTrans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void logTrans::MergeFrom(const logTrans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_decade()) {
      set_decade(from.decade());
    }
    if (from.has_t()) {
      set_t(from.t());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void logTrans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void logTrans::CopyFrom(const logTrans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool logTrans::IsInitialized() const {

  return true;
}

void logTrans::Swap(logTrans* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(decade_, other->decade_);
    std::swap(t_, other->t_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata logTrans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = logTrans_descriptor_;
  metadata.reflection = logTrans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int logicleTrans::kTFieldNumber;
const int logicleTrans::kWFieldNumber;
const int logicleTrans::kMFieldNumber;
const int logicleTrans::kAFieldNumber;
const int logicleTrans::kBinsFieldNumber;
const int logicleTrans::kIsGml2FieldNumber;
const int logicleTrans::kIsInverseFieldNumber;
#endif  // !_MSC_VER

logicleTrans::logicleTrans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.logicleTrans)
}

void logicleTrans::InitAsDefaultInstance() {
}

logicleTrans::logicleTrans(const logicleTrans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.logicleTrans)
}

void logicleTrans::SharedCtor() {
  _cached_size_ = 0;
  t_ = 0;
  w_ = 0;
  m_ = 0;
  a_ = 0;
  bins_ = 0;
  isgml2_ = false;
  isinverse_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

logicleTrans::~logicleTrans() {
  // @@protoc_insertion_point(destructor:pb.logicleTrans)
  SharedDtor();
}

void logicleTrans::SharedDtor() {
  if (this != default_instance_) {
  }
}

void logicleTrans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* logicleTrans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return logicleTrans_descriptor_;
}

const logicleTrans& logicleTrans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GatingSet_2eproto();
  return *default_instance_;
}

logicleTrans* logicleTrans::default_instance_ = NULL;

logicleTrans* logicleTrans::New() const {
  return new logicleTrans;
}

void logicleTrans::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<logicleTrans*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(t_, isinverse_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool logicleTrans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.logicleTrans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float T = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &t_)));
          set_has_t();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_W;
        break;
      }

      // optional float W = 2;
      case 2: {
        if (tag == 21) {
         parse_W:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_M;
        break;
      }

      // optional float M = 3;
      case 3: {
        if (tag == 29) {
         parse_M:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &m_)));
          set_has_m();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_A;
        break;
      }

      // optional float A = 4;
      case 4: {
        if (tag == 37) {
         parse_A:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &a_)));
          set_has_a();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_bins;
        break;
      }

      // optional float bins = 5;
      case 5: {
        if (tag == 45) {
         parse_bins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bins_)));
          set_has_bins();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_isGml2;
        break;
      }

      // optional bool isGml2 = 6;
      case 6: {
        if (tag == 48) {
         parse_isGml2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isgml2_)));
          set_has_isgml2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_isInverse;
        break;
      }

      // optional bool isInverse = 7;
      case 7: {
        if (tag == 56) {
         parse_isInverse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isinverse_)));
          set_has_isinverse();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.logicleTrans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.logicleTrans)
  return false;
#undef DO_
}

void logicleTrans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.logicleTrans)
  // optional float T = 1;
  if (has_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->t(), output);
  }

  // optional float W = 2;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->w(), output);
  }

  // optional float M = 3;
  if (has_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->m(), output);
  }

  // optional float A = 4;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->a(), output);
  }

  // optional float bins = 5;
  if (has_bins()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->bins(), output);
  }

  // optional bool isGml2 = 6;
  if (has_isgml2()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isgml2(), output);
  }

  // optional bool isInverse = 7;
  if (has_isinverse()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isinverse(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.logicleTrans)
}

::google::protobuf::uint8* logicleTrans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.logicleTrans)
  // optional float T = 1;
  if (has_t()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->t(), target);
  }

  // optional float W = 2;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->w(), target);
  }

  // optional float M = 3;
  if (has_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->m(), target);
  }

  // optional float A = 4;
  if (has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->a(), target);
  }

  // optional float bins = 5;
  if (has_bins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->bins(), target);
  }

  // optional bool isGml2 = 6;
  if (has_isgml2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isgml2(), target);
  }

  // optional bool isInverse = 7;
  if (has_isinverse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isinverse(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.logicleTrans)
  return target;
}

int logicleTrans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float T = 1;
    if (has_t()) {
      total_size += 1 + 4;
    }

    // optional float W = 2;
    if (has_w()) {
      total_size += 1 + 4;
    }

    // optional float M = 3;
    if (has_m()) {
      total_size += 1 + 4;
    }

    // optional float A = 4;
    if (has_a()) {
      total_size += 1 + 4;
    }

    // optional float bins = 5;
    if (has_bins()) {
      total_size += 1 + 4;
    }

    // optional bool isGml2 = 6;
    if (has_isgml2()) {
      total_size += 1 + 1;
    }

    // optional bool isInverse = 7;
    if (has_isinverse()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void logicleTrans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const logicleTrans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const logicleTrans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void logicleTrans::MergeFrom(const logicleTrans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_t()) {
      set_t(from.t());
    }
    if (from.has_w()) {
      set_w(from.w());
    }
    if (from.has_m()) {
      set_m(from.m());
    }
    if (from.has_a()) {
      set_a(from.a());
    }
    if (from.has_bins()) {
      set_bins(from.bins());
    }
    if (from.has_isgml2()) {
      set_isgml2(from.isgml2());
    }
    if (from.has_isinverse()) {
      set_isinverse(from.isinverse());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void logicleTrans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void logicleTrans::CopyFrom(const logicleTrans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool logicleTrans::IsInitialized() const {

  return true;
}

void logicleTrans::Swap(logicleTrans* other) {
  if (other != this) {
    std::swap(t_, other->t_);
    std::swap(w_, other->w_);
    std::swap(m_, other->m_);
    std::swap(a_, other->a_);
    std::swap(bins_, other->bins_);
    std::swap(isgml2_, other->isgml2_);
    std::swap(isinverse_, other->isinverse_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata logicleTrans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = logicleTrans_descriptor_;
  metadata.reflection = logicleTrans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int transformation::kCalTblFieldNumber;
const int transformation::kIsGateOnlyFieldNumber;
const int transformation::kNameFieldNumber;
const int transformation::kChannelFieldNumber;
const int transformation::kIsComputedFieldNumber;
const int transformation::kTypeFieldNumber;
const int transformation::kTransTypeFieldNumber;
const int transformation::kBtFieldNumber;
const int transformation::kLtFieldNumber;
const int transformation::kFltFieldNumber;
const int transformation::kStFieldNumber;
const int transformation::kFtFieldNumber;
const int transformation::kLgtFieldNumber;
#endif  // !_MSC_VER

transformation::transformation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.transformation)
}

void transformation::InitAsDefaultInstance() {
  caltbl_ = const_cast< ::pb::calibrationTable*>(&::pb::calibrationTable::default_instance());
  bt_ = const_cast< ::pb::biexpTrans*>(&::pb::biexpTrans::default_instance());
  lt_ = const_cast< ::pb::logTrans*>(&::pb::logTrans::default_instance());
  flt_ = const_cast< ::pb::flinTrans*>(&::pb::flinTrans::default_instance());
  st_ = const_cast< ::pb::scaleTrans*>(&::pb::scaleTrans::default_instance());
  ft_ = const_cast< ::pb::fasinhTrans*>(&::pb::fasinhTrans::default_instance());
  lgt_ = const_cast< ::pb::logicleTrans*>(&::pb::logicleTrans::default_instance());
}

transformation::transformation(const transformation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.transformation)
}

void transformation::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  caltbl_ = NULL;
  isgateonly_ = false;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iscomputed_ = false;
  type_ = 0u;
  trans_type_ = 0;
  bt_ = NULL;
  lt_ = NULL;
  flt_ = NULL;
  st_ = NULL;
  ft_ = NULL;
  lgt_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

transformation::~transformation() {
  // @@protoc_insertion_point(destructor:pb.transformation)
  SharedDtor();
}

void transformation::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (channel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channel_;
  }
  if (this != default_instance_) {
    delete caltbl_;
    delete bt_;
    delete lt_;
    delete flt_;
    delete st_;
    delete ft_;
    delete lgt_;
  }
}

void transformation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* transformation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return transformation_descriptor_;
}

const transformation& transformation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GatingSet_2eproto();
  return *default_instance_;
}

transformation* transformation::default_instance_ = NULL;

transformation* transformation::New() const {
  return new transformation;
}

void transformation::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<transformation*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(isgateonly_, type_);
    if (has_caltbl()) {
      if (caltbl_ != NULL) caltbl_->::pb::calibrationTable::Clear();
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_channel()) {
      if (channel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        channel_->clear();
      }
    }
    trans_type_ = 0;
    if (has_bt()) {
      if (bt_ != NULL) bt_->::pb::biexpTrans::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    if (has_lt()) {
      if (lt_ != NULL) lt_->::pb::logTrans::Clear();
    }
    if (has_flt()) {
      if (flt_ != NULL) flt_->::pb::flinTrans::Clear();
    }
    if (has_st()) {
      if (st_ != NULL) st_->::pb::scaleTrans::Clear();
    }
    if (has_ft()) {
      if (ft_ != NULL) ft_->::pb::fasinhTrans::Clear();
    }
    if (has_lgt()) {
      if (lgt_ != NULL) lgt_->::pb::logicleTrans::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool transformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.transformation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.calibrationTable calTbl = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_caltbl()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isGateOnly;
        break;
      }

      // optional bool isGateOnly = 2;
      case 2: {
        if (tag == 16) {
         parse_isGateOnly:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isgateonly_)));
          set_has_isgateonly();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_trans_type;
        break;
      }

      // optional .pb.TRANS_TYPE trans_type = 3;
      case 3: {
        if (tag == 24) {
         parse_trans_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::TRANS_TYPE_IsValid(value)) {
            set_trans_type(static_cast< ::pb::TRANS_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_channel;
        break;
      }

      // optional string channel = 5;
      case 5: {
        if (tag == 42) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channel().data(), this->channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "channel");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_isComputed;
        break;
      }

      // optional bool isComputed = 6;
      case 6: {
        if (tag == 48) {
         parse_isComputed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscomputed_)));
          set_has_iscomputed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_bt;
        break;
      }

      // optional .pb.biexpTrans bt = 7;
      case 7: {
        if (tag == 58) {
         parse_bt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_lt;
        break;
      }

      // optional .pb.logTrans lt = 8;
      case 8: {
        if (tag == 66) {
         parse_lt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_flt;
        break;
      }

      // optional .pb.flinTrans flt = 9;
      case 9: {
        if (tag == 74) {
         parse_flt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_st;
        break;
      }

      // optional .pb.scaleTrans st = 10;
      case 10: {
        if (tag == 82) {
         parse_st:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_st()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_ft;
        break;
      }

      // optional .pb.fasinhTrans ft = 11;
      case 11: {
        if (tag == 90) {
         parse_ft:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ft()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_type;
        break;
      }

      // optional uint32 type = 12;
      case 12: {
        if (tag == 96) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_lgt;
        break;
      }

      // optional .pb.logicleTrans lgt = 13;
      case 13: {
        if (tag == 106) {
         parse_lgt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lgt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.transformation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.transformation)
  return false;
#undef DO_
}

void transformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.transformation)
  // optional .pb.calibrationTable calTbl = 1;
  if (has_caltbl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->caltbl(), output);
  }

  // optional bool isGateOnly = 2;
  if (has_isgateonly()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isgateonly(), output);
  }

  // optional .pb.TRANS_TYPE trans_type = 3;
  if (has_trans_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->trans_type(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // optional string channel = 5;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->channel(), output);
  }

  // optional bool isComputed = 6;
  if (has_iscomputed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->iscomputed(), output);
  }

  // optional .pb.biexpTrans bt = 7;
  if (has_bt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->bt(), output);
  }

  // optional .pb.logTrans lt = 8;
  if (has_lt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->lt(), output);
  }

  // optional .pb.flinTrans flt = 9;
  if (has_flt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->flt(), output);
  }

  // optional .pb.scaleTrans st = 10;
  if (has_st()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->st(), output);
  }

  // optional .pb.fasinhTrans ft = 11;
  if (has_ft()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->ft(), output);
  }

  // optional uint32 type = 12;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->type(), output);
  }

  // optional .pb.logicleTrans lgt = 13;
  if (has_lgt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->lgt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.transformation)
}

::google::protobuf::uint8* transformation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.transformation)
  // optional .pb.calibrationTable calTbl = 1;
  if (has_caltbl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->caltbl(), target);
  }

  // optional bool isGateOnly = 2;
  if (has_isgateonly()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isgateonly(), target);
  }

  // optional .pb.TRANS_TYPE trans_type = 3;
  if (has_trans_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->trans_type(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional string channel = 5;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->channel(), target);
  }

  // optional bool isComputed = 6;
  if (has_iscomputed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->iscomputed(), target);
  }

  // optional .pb.biexpTrans bt = 7;
  if (has_bt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->bt(), target);
  }

  // optional .pb.logTrans lt = 8;
  if (has_lt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->lt(), target);
  }

  // optional .pb.flinTrans flt = 9;
  if (has_flt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->flt(), target);
  }

  // optional .pb.scaleTrans st = 10;
  if (has_st()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->st(), target);
  }

  // optional .pb.fasinhTrans ft = 11;
  if (has_ft()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->ft(), target);
  }

  // optional uint32 type = 12;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->type(), target);
  }

  // optional .pb.logicleTrans lgt = 13;
  if (has_lgt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->lgt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.transformation)
  return target;
}

int transformation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.calibrationTable calTbl = 1;
    if (has_caltbl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->caltbl());
    }

    // optional bool isGateOnly = 2;
    if (has_isgateonly()) {
      total_size += 1 + 1;
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string channel = 5;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }

    // optional bool isComputed = 6;
    if (has_iscomputed()) {
      total_size += 1 + 1;
    }

    // optional uint32 type = 12;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional .pb.TRANS_TYPE trans_type = 3;
    if (has_trans_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->trans_type());
    }

    // optional .pb.biexpTrans bt = 7;
    if (has_bt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bt());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .pb.logTrans lt = 8;
    if (has_lt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lt());
    }

    // optional .pb.flinTrans flt = 9;
    if (has_flt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->flt());
    }

    // optional .pb.scaleTrans st = 10;
    if (has_st()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->st());
    }

    // optional .pb.fasinhTrans ft = 11;
    if (has_ft()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ft());
    }

    // optional .pb.logicleTrans lgt = 13;
    if (has_lgt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lgt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void transformation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const transformation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const transformation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void transformation::MergeFrom(const transformation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_caltbl()) {
      mutable_caltbl()->::pb::calibrationTable::MergeFrom(from.caltbl());
    }
    if (from.has_isgateonly()) {
      set_isgateonly(from.isgateonly());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_iscomputed()) {
      set_iscomputed(from.iscomputed());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_trans_type()) {
      set_trans_type(from.trans_type());
    }
    if (from.has_bt()) {
      mutable_bt()->::pb::biexpTrans::MergeFrom(from.bt());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lt()) {
      mutable_lt()->::pb::logTrans::MergeFrom(from.lt());
    }
    if (from.has_flt()) {
      mutable_flt()->::pb::flinTrans::MergeFrom(from.flt());
    }
    if (from.has_st()) {
      mutable_st()->::pb::scaleTrans::MergeFrom(from.st());
    }
    if (from.has_ft()) {
      mutable_ft()->::pb::fasinhTrans::MergeFrom(from.ft());
    }
    if (from.has_lgt()) {
      mutable_lgt()->::pb::logicleTrans::MergeFrom(from.lgt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void transformation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void transformation::CopyFrom(const transformation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool transformation::IsInitialized() const {

  return true;
}

void transformation::Swap(transformation* other) {
  if (other != this) {
    std::swap(caltbl_, other->caltbl_);
    std::swap(isgateonly_, other->isgateonly_);
    std::swap(name_, other->name_);
    std::swap(channel_, other->channel_);
    std::swap(iscomputed_, other->iscomputed_);
    std::swap(type_, other->type_);
    std::swap(trans_type_, other->trans_type_);
    std::swap(bt_, other->bt_);
    std::swap(lt_, other->lt_);
    std::swap(flt_, other->flt_);
    std::swap(st_, other->st_);
    std::swap(ft_, other->ft_);
    std::swap(lgt_, other->lgt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata transformation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = transformation_descriptor_;
  metadata.reflection = transformation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int trans_pair::kNameFieldNumber;
const int trans_pair::kTransAddressFieldNumber;
const int trans_pair::kTransFieldNumber;
#endif  // !_MSC_VER

trans_pair::trans_pair()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.trans_pair)
}

void trans_pair::InitAsDefaultInstance() {
  trans_ = const_cast< ::pb::transformation*>(&::pb::transformation::default_instance());
}

trans_pair::trans_pair(const trans_pair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.trans_pair)
}

void trans_pair::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trans_address_ = GOOGLE_ULONGLONG(0);
  trans_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

trans_pair::~trans_pair() {
  // @@protoc_insertion_point(destructor:pb.trans_pair)
  SharedDtor();
}

void trans_pair::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete trans_;
  }
}

void trans_pair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* trans_pair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return trans_pair_descriptor_;
}

const trans_pair& trans_pair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GatingSet_2eproto();
  return *default_instance_;
}

trans_pair* trans_pair::default_instance_ = NULL;

trans_pair* trans_pair::New() const {
  return new trans_pair;
}

void trans_pair::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    trans_address_ = GOOGLE_ULONGLONG(0);
    if (has_trans()) {
      if (trans_ != NULL) trans_->::pb::transformation::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool trans_pair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.trans_pair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_trans_address;
        break;
      }

      // optional uint64 trans_address = 2;
      case 2: {
        if (tag == 16) {
         parse_trans_address:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &trans_address_)));
          set_has_trans_address();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_trans;
        break;
      }

      // optional .pb.transformation trans = 3;
      case 3: {
        if (tag == 26) {
         parse_trans:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trans()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.trans_pair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.trans_pair)
  return false;
#undef DO_
}

void trans_pair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.trans_pair)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint64 trans_address = 2;
  if (has_trans_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->trans_address(), output);
  }

  // optional .pb.transformation trans = 3;
  if (has_trans()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->trans(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.trans_pair)
}

::google::protobuf::uint8* trans_pair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.trans_pair)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint64 trans_address = 2;
  if (has_trans_address()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->trans_address(), target);
  }

  // optional .pb.transformation trans = 3;
  if (has_trans()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->trans(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.trans_pair)
  return target;
}

int trans_pair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 trans_address = 2;
    if (has_trans_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->trans_address());
    }

    // optional .pb.transformation trans = 3;
    if (has_trans()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trans());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void trans_pair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const trans_pair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const trans_pair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void trans_pair::MergeFrom(const trans_pair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_trans_address()) {
      set_trans_address(from.trans_address());
    }
    if (from.has_trans()) {
      mutable_trans()->::pb::transformation::MergeFrom(from.trans());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void trans_pair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void trans_pair::CopyFrom(const trans_pair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool trans_pair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void trans_pair::Swap(trans_pair* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(trans_address_, other->trans_address_);
    std::swap(trans_, other->trans_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata trans_pair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = trans_pair_descriptor_;
  metadata.reflection = trans_pair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int trans_local::kTpFieldNumber;
const int trans_local::kGroupNameFieldNumber;
const int trans_local::kSampleIDsFieldNumber;
#endif  // !_MSC_VER

trans_local::trans_local()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.trans_local)
}

void trans_local::InitAsDefaultInstance() {
}

trans_local::trans_local(const trans_local& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.trans_local)
}

void trans_local::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  groupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

trans_local::~trans_local() {
  // @@protoc_insertion_point(destructor:pb.trans_local)
  SharedDtor();
}

void trans_local::SharedDtor() {
  if (groupname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete groupname_;
  }
  if (this != default_instance_) {
  }
}

void trans_local::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* trans_local::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return trans_local_descriptor_;
}

const trans_local& trans_local::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GatingSet_2eproto();
  return *default_instance_;
}

trans_local* trans_local::default_instance_ = NULL;

trans_local* trans_local::New() const {
  return new trans_local;
}

void trans_local::Clear() {
  if (has_groupname()) {
    if (groupname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      groupname_->clear();
    }
  }
  tp_.Clear();
  sampleids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool trans_local::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.trans_local)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.trans_pair tp = 1;
      case 1: {
        if (tag == 10) {
         parse_tp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_tp;
        if (input->ExpectTag(18)) goto parse_groupName;
        break;
      }

      // optional string groupName = 2;
      case 2: {
        if (tag == 18) {
         parse_groupName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupname().data(), this->groupname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "groupname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sampleIDs;
        break;
      }

      // repeated uint32 sampleIDs = 3 [packed = true];
      case 3: {
        if (tag == 26) {
         parse_sampleIDs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_sampleids())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26, input, this->mutable_sampleids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.trans_local)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.trans_local)
  return false;
#undef DO_
}

void trans_local::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.trans_local)
  // repeated .pb.trans_pair tp = 1;
  for (int i = 0; i < this->tp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tp(i), output);
  }

  // optional string groupName = 2;
  if (has_groupname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupname().data(), this->groupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "groupname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->groupname(), output);
  }

  // repeated uint32 sampleIDs = 3 [packed = true];
  if (this->sampleids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_sampleids_cached_byte_size_);
  }
  for (int i = 0; i < this->sampleids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->sampleids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.trans_local)
}

::google::protobuf::uint8* trans_local::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.trans_local)
  // repeated .pb.trans_pair tp = 1;
  for (int i = 0; i < this->tp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tp(i), target);
  }

  // optional string groupName = 2;
  if (has_groupname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupname().data(), this->groupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "groupname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->groupname(), target);
  }

  // repeated uint32 sampleIDs = 3 [packed = true];
  if (this->sampleids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _sampleids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->sampleids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->sampleids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.trans_local)
  return target;
}

int trans_local::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string groupName = 2;
    if (has_groupname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupname());
    }

  }
  // repeated .pb.trans_pair tp = 1;
  total_size += 1 * this->tp_size();
  for (int i = 0; i < this->tp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tp(i));
  }

  // repeated uint32 sampleIDs = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->sampleids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->sampleids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _sampleids_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void trans_local::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const trans_local* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const trans_local*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void trans_local::MergeFrom(const trans_local& from) {
  GOOGLE_CHECK_NE(&from, this);
  tp_.MergeFrom(from.tp_);
  sampleids_.MergeFrom(from.sampleids_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_groupname()) {
      set_groupname(from.groupname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void trans_local::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void trans_local::CopyFrom(const trans_local& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool trans_local::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->tp())) return false;
  return true;
}

void trans_local::Swap(trans_local* other) {
  if (other != this) {
    tp_.Swap(&other->tp_);
    std::swap(groupname_, other->groupname_);
    sampleids_.Swap(&other->sampleids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata trans_local::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = trans_local_descriptor_;
  metadata.reflection = trans_local_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int POPINDICES::kNEventsFieldNumber;
const int POPINDICES::kIndtypeFieldNumber;
const int POPINDICES::kIIndFieldNumber;
const int POPINDICES::kBIndFieldNumber;
#endif  // !_MSC_VER

POPINDICES::POPINDICES()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.POPINDICES)
}

void POPINDICES::InitAsDefaultInstance() {
}

POPINDICES::POPINDICES(const POPINDICES& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.POPINDICES)
}

void POPINDICES::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  nevents_ = 0u;
  indtype_ = 0;
  bind_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

POPINDICES::~POPINDICES() {
  // @@protoc_insertion_point(destructor:pb.POPINDICES)
  SharedDtor();
}

void POPINDICES::SharedDtor() {
  if (bind_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bind_;
  }
  if (this != default_instance_) {
  }
}

void POPINDICES::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* POPINDICES::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return POPINDICES_descriptor_;
}

const POPINDICES& POPINDICES::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GatingSet_2eproto();
  return *default_instance_;
}

POPINDICES* POPINDICES::default_instance_ = NULL;

POPINDICES* POPINDICES::New() const {
  return new POPINDICES;
}

void POPINDICES::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<POPINDICES*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 11) {
    ZR_(nevents_, indtype_);
    if (has_bind()) {
      if (bind_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bind_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  iind_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool POPINDICES::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.POPINDICES)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 nEvents = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nevents_)));
          set_has_nevents();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_indtype;
        break;
      }

      // required .pb.ind_type indtype = 2;
      case 2: {
        if (tag == 16) {
         parse_indtype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ind_type_IsValid(value)) {
            set_indtype(static_cast< ::pb::ind_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_iInd;
        break;
      }

      // repeated uint32 iInd = 3 [packed = true];
      case 3: {
        if (tag == 26) {
         parse_iInd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_iind())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26, input, this->mutable_iind())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_bInd;
        break;
      }

      // optional bytes bInd = 4;
      case 4: {
        if (tag == 34) {
         parse_bInd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bind()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.POPINDICES)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.POPINDICES)
  return false;
#undef DO_
}

void POPINDICES::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.POPINDICES)
  // required uint32 nEvents = 1;
  if (has_nevents()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nevents(), output);
  }

  // required .pb.ind_type indtype = 2;
  if (has_indtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->indtype(), output);
  }

  // repeated uint32 iInd = 3 [packed = true];
  if (this->iind_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_iind_cached_byte_size_);
  }
  for (int i = 0; i < this->iind_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->iind(i), output);
  }

  // optional bytes bInd = 4;
  if (has_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->bind(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.POPINDICES)
}

::google::protobuf::uint8* POPINDICES::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.POPINDICES)
  // required uint32 nEvents = 1;
  if (has_nevents()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nevents(), target);
  }

  // required .pb.ind_type indtype = 2;
  if (has_indtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->indtype(), target);
  }

  // repeated uint32 iInd = 3 [packed = true];
  if (this->iind_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _iind_cached_byte_size_, target);
  }
  for (int i = 0; i < this->iind_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->iind(i), target);
  }

  // optional bytes bInd = 4;
  if (has_bind()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->bind(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.POPINDICES)
  return target;
}

int POPINDICES::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 nEvents = 1;
    if (has_nevents()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nevents());
    }

    // required .pb.ind_type indtype = 2;
    if (has_indtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->indtype());
    }

    // optional bytes bInd = 4;
    if (has_bind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bind());
    }

  }
  // repeated uint32 iInd = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->iind_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->iind(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _iind_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void POPINDICES::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const POPINDICES* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const POPINDICES*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void POPINDICES::MergeFrom(const POPINDICES& from) {
  GOOGLE_CHECK_NE(&from, this);
  iind_.MergeFrom(from.iind_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nevents()) {
      set_nevents(from.nevents());
    }
    if (from.has_indtype()) {
      set_indtype(from.indtype());
    }
    if (from.has_bind()) {
      set_bind(from.bind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void POPINDICES::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void POPINDICES::CopyFrom(const POPINDICES& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool POPINDICES::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void POPINDICES::Swap(POPINDICES* other) {
  if (other != this) {
    std::swap(nevents_, other->nevents_);
    std::swap(indtype_, other->indtype_);
    iind_.Swap(&other->iind_);
    std::swap(bind_, other->bind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata POPINDICES::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = POPINDICES_descriptor_;
  metadata.reflection = POPINDICES_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int nodeProperties::kThisNameFieldNumber;
const int nodeProperties::kFjStatsFieldNumber;
const int nodeProperties::kFcStatsFieldNumber;
const int nodeProperties::kHiddenFieldNumber;
const int nodeProperties::kIndicesFieldNumber;
const int nodeProperties::kThisGateFieldNumber;
#endif  // !_MSC_VER

nodeProperties::nodeProperties()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.nodeProperties)
}

void nodeProperties::InitAsDefaultInstance() {
  indices_ = const_cast< ::pb::POPINDICES*>(&::pb::POPINDICES::default_instance());
  thisgate_ = const_cast< ::pb::gate*>(&::pb::gate::default_instance());
}

nodeProperties::nodeProperties(const nodeProperties& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.nodeProperties)
}

void nodeProperties::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  thisname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hidden_ = false;
  indices_ = NULL;
  thisgate_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

nodeProperties::~nodeProperties() {
  // @@protoc_insertion_point(destructor:pb.nodeProperties)
  SharedDtor();
}

void nodeProperties::SharedDtor() {
  if (thisname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete thisname_;
  }
  if (this != default_instance_) {
    delete indices_;
    delete thisgate_;
  }
}

void nodeProperties::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* nodeProperties::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return nodeProperties_descriptor_;
}

const nodeProperties& nodeProperties::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GatingSet_2eproto();
  return *default_instance_;
}

nodeProperties* nodeProperties::default_instance_ = NULL;

nodeProperties* nodeProperties::New() const {
  return new nodeProperties;
}

void nodeProperties::Clear() {
  if (_has_bits_[0 / 32] & 57) {
    if (has_thisname()) {
      if (thisname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        thisname_->clear();
      }
    }
    hidden_ = false;
    if (has_indices()) {
      if (indices_ != NULL) indices_->::pb::POPINDICES::Clear();
    }
    if (has_thisgate()) {
      if (thisgate_ != NULL) thisgate_->::pb::gate::Clear();
    }
  }
  fjstats_.Clear();
  fcstats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool nodeProperties::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.nodeProperties)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string thisName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thisname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->thisname().data(), this->thisname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "thisname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fjStats;
        break;
      }

      // repeated .pb.POPSTATS fjStats = 2;
      case 2: {
        if (tag == 18) {
         parse_fjStats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fjstats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fjStats;
        if (input->ExpectTag(26)) goto parse_fcStats;
        break;
      }

      // repeated .pb.POPSTATS fcStats = 3;
      case 3: {
        if (tag == 26) {
         parse_fcStats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fcstats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fcStats;
        if (input->ExpectTag(32)) goto parse_hidden;
        break;
      }

      // required bool hidden = 4;
      case 4: {
        if (tag == 32) {
         parse_hidden:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hidden_)));
          set_has_hidden();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_indices;
        break;
      }

      // optional .pb.POPINDICES indices = 5;
      case 5: {
        if (tag == 42) {
         parse_indices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_indices()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_thisGate;
        break;
      }

      // optional .pb.gate thisGate = 6;
      case 6: {
        if (tag == 50) {
         parse_thisGate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_thisgate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.nodeProperties)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.nodeProperties)
  return false;
#undef DO_
}

void nodeProperties::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.nodeProperties)
  // required string thisName = 1;
  if (has_thisname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thisname().data(), this->thisname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "thisname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->thisname(), output);
  }

  // repeated .pb.POPSTATS fjStats = 2;
  for (int i = 0; i < this->fjstats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fjstats(i), output);
  }

  // repeated .pb.POPSTATS fcStats = 3;
  for (int i = 0; i < this->fcstats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fcstats(i), output);
  }

  // required bool hidden = 4;
  if (has_hidden()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->hidden(), output);
  }

  // optional .pb.POPINDICES indices = 5;
  if (has_indices()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->indices(), output);
  }

  // optional .pb.gate thisGate = 6;
  if (has_thisgate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->thisgate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.nodeProperties)
}

::google::protobuf::uint8* nodeProperties::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.nodeProperties)
  // required string thisName = 1;
  if (has_thisname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thisname().data(), this->thisname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "thisname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->thisname(), target);
  }

  // repeated .pb.POPSTATS fjStats = 2;
  for (int i = 0; i < this->fjstats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fjstats(i), target);
  }

  // repeated .pb.POPSTATS fcStats = 3;
  for (int i = 0; i < this->fcstats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fcstats(i), target);
  }

  // required bool hidden = 4;
  if (has_hidden()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->hidden(), target);
  }

  // optional .pb.POPINDICES indices = 5;
  if (has_indices()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->indices(), target);
  }

  // optional .pb.gate thisGate = 6;
  if (has_thisgate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->thisgate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.nodeProperties)
  return target;
}

int nodeProperties::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string thisName = 1;
    if (has_thisname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->thisname());
    }

    // required bool hidden = 4;
    if (has_hidden()) {
      total_size += 1 + 1;
    }

    // optional .pb.POPINDICES indices = 5;
    if (has_indices()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->indices());
    }

    // optional .pb.gate thisGate = 6;
    if (has_thisgate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->thisgate());
    }

  }
  // repeated .pb.POPSTATS fjStats = 2;
  total_size += 1 * this->fjstats_size();
  for (int i = 0; i < this->fjstats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fjstats(i));
  }

  // repeated .pb.POPSTATS fcStats = 3;
  total_size += 1 * this->fcstats_size();
  for (int i = 0; i < this->fcstats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fcstats(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void nodeProperties::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const nodeProperties* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const nodeProperties*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void nodeProperties::MergeFrom(const nodeProperties& from) {
  GOOGLE_CHECK_NE(&from, this);
  fjstats_.MergeFrom(from.fjstats_);
  fcstats_.MergeFrom(from.fcstats_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_thisname()) {
      set_thisname(from.thisname());
    }
    if (from.has_hidden()) {
      set_hidden(from.hidden());
    }
    if (from.has_indices()) {
      mutable_indices()->::pb::POPINDICES::MergeFrom(from.indices());
    }
    if (from.has_thisgate()) {
      mutable_thisgate()->::pb::gate::MergeFrom(from.thisgate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void nodeProperties::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nodeProperties::CopyFrom(const nodeProperties& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nodeProperties::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->fjstats())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->fcstats())) return false;
  if (has_indices()) {
    if (!this->indices().IsInitialized()) return false;
  }
  if (has_thisgate()) {
    if (!this->thisgate().IsInitialized()) return false;
  }
  return true;
}

void nodeProperties::Swap(nodeProperties* other) {
  if (other != this) {
    std::swap(thisname_, other->thisname_);
    fjstats_.Swap(&other->fjstats_);
    fcstats_.Swap(&other->fcstats_);
    std::swap(hidden_, other->hidden_);
    std::swap(indices_, other->indices_);
    std::swap(thisgate_, other->thisgate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata nodeProperties::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = nodeProperties_descriptor_;
  metadata.reflection = nodeProperties_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int treeNodes::kNodeFieldNumber;
const int treeNodes::kParentFieldNumber;
#endif  // !_MSC_VER

treeNodes::treeNodes()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.treeNodes)
}

void treeNodes::InitAsDefaultInstance() {
  node_ = const_cast< ::pb::nodeProperties*>(&::pb::nodeProperties::default_instance());
}

treeNodes::treeNodes(const treeNodes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.treeNodes)
}

void treeNodes::SharedCtor() {
  _cached_size_ = 0;
  node_ = NULL;
  parent_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

treeNodes::~treeNodes() {
  // @@protoc_insertion_point(destructor:pb.treeNodes)
  SharedDtor();
}

void treeNodes::SharedDtor() {
  if (this != default_instance_) {
    delete node_;
  }
}

void treeNodes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* treeNodes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return treeNodes_descriptor_;
}

const treeNodes& treeNodes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GatingSet_2eproto();
  return *default_instance_;
}

treeNodes* treeNodes::default_instance_ = NULL;

treeNodes* treeNodes::New() const {
  return new treeNodes;
}

void treeNodes::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_node()) {
      if (node_ != NULL) node_->::pb::nodeProperties::Clear();
    }
    parent_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool treeNodes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.treeNodes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.nodeProperties node = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_parent;
        break;
      }

      // optional uint32 parent = 2;
      case 2: {
        if (tag == 16) {
         parse_parent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parent_)));
          set_has_parent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.treeNodes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.treeNodes)
  return false;
#undef DO_
}

void treeNodes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.treeNodes)
  // required .pb.nodeProperties node = 1;
  if (has_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->node(), output);
  }

  // optional uint32 parent = 2;
  if (has_parent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->parent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.treeNodes)
}

::google::protobuf::uint8* treeNodes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.treeNodes)
  // required .pb.nodeProperties node = 1;
  if (has_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->node(), target);
  }

  // optional uint32 parent = 2;
  if (has_parent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->parent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.treeNodes)
  return target;
}

int treeNodes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.nodeProperties node = 1;
    if (has_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->node());
    }

    // optional uint32 parent = 2;
    if (has_parent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->parent());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void treeNodes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const treeNodes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const treeNodes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void treeNodes::MergeFrom(const treeNodes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node()) {
      mutable_node()->::pb::nodeProperties::MergeFrom(from.node());
    }
    if (from.has_parent()) {
      set_parent(from.parent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void treeNodes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void treeNodes::CopyFrom(const treeNodes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool treeNodes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_node()) {
    if (!this->node().IsInitialized()) return false;
  }
  return true;
}

void treeNodes::Swap(treeNodes* other) {
  if (other != this) {
    std::swap(node_, other->node_);
    std::swap(parent_, other->parent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata treeNodes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = treeNodes_descriptor_;
  metadata.reflection = treeNodes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int populationTree::kNodeFieldNumber;
#endif  // !_MSC_VER

populationTree::populationTree()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.populationTree)
}

void populationTree::InitAsDefaultInstance() {
}

populationTree::populationTree(const populationTree& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.populationTree)
}

void populationTree::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

populationTree::~populationTree() {
  // @@protoc_insertion_point(destructor:pb.populationTree)
  SharedDtor();
}

void populationTree::SharedDtor() {
  if (this != default_instance_) {
  }
}

void populationTree::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* populationTree::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return populationTree_descriptor_;
}

const populationTree& populationTree::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GatingSet_2eproto();
  return *default_instance_;
}

populationTree* populationTree::default_instance_ = NULL;

populationTree* populationTree::New() const {
  return new populationTree;
}

void populationTree::Clear() {
  node_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool populationTree::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.populationTree)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.treeNodes node = 1;
      case 1: {
        if (tag == 10) {
         parse_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_node()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_node;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.populationTree)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.populationTree)
  return false;
#undef DO_
}

void populationTree::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.populationTree)
  // repeated .pb.treeNodes node = 1;
  for (int i = 0; i < this->node_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->node(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.populationTree)
}

::google::protobuf::uint8* populationTree::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.populationTree)
  // repeated .pb.treeNodes node = 1;
  for (int i = 0; i < this->node_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->node(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.populationTree)
  return target;
}

int populationTree::ByteSize() const {
  int total_size = 0;

  // repeated .pb.treeNodes node = 1;
  total_size += 1 * this->node_size();
  for (int i = 0; i < this->node_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->node(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void populationTree::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const populationTree* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const populationTree*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void populationTree::MergeFrom(const populationTree& from) {
  GOOGLE_CHECK_NE(&from, this);
  node_.MergeFrom(from.node_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void populationTree::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void populationTree::CopyFrom(const populationTree& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool populationTree::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->node())) return false;
  return true;
}

void populationTree::Swap(populationTree* other) {
  if (other != this) {
    node_.Swap(&other->node_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata populationTree::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = populationTree_descriptor_;
  metadata.reflection = populationTree_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int COMP::kCidFieldNumber;
const int COMP::kPrefixFieldNumber;
const int COMP::kSuffixFieldNumber;
const int COMP::kNameFieldNumber;
const int COMP::kCommentFieldNumber;
const int COMP::kMarkerFieldNumber;
const int COMP::kSpillOverFieldNumber;
#endif  // !_MSC_VER

COMP::COMP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.COMP)
}

void COMP::InitAsDefaultInstance() {
}

COMP::COMP(const COMP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.COMP)
}

void COMP::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  suffix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

COMP::~COMP() {
  // @@protoc_insertion_point(destructor:pb.COMP)
  SharedDtor();
}

void COMP::SharedDtor() {
  if (cid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cid_;
  }
  if (prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete prefix_;
  }
  if (suffix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete suffix_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete comment_;
  }
  if (this != default_instance_) {
  }
}

void COMP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* COMP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return COMP_descriptor_;
}

const COMP& COMP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GatingSet_2eproto();
  return *default_instance_;
}

COMP* COMP::default_instance_ = NULL;

COMP* COMP::New() const {
  return new COMP;
}

void COMP::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_cid()) {
      if (cid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cid_->clear();
      }
    }
    if (has_prefix()) {
      if (prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        prefix_->clear();
      }
    }
    if (has_suffix()) {
      if (suffix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        suffix_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        comment_->clear();
      }
    }
  }
  marker_.Clear();
  spillover_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool COMP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.COMP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cid().data(), this->cid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_prefix;
        break;
      }

      // optional string prefix = 2;
      case 2: {
        if (tag == 18) {
         parse_prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prefix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->prefix().data(), this->prefix().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "prefix");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_suffix;
        break;
      }

      // optional string suffix = 3;
      case 3: {
        if (tag == 26) {
         parse_suffix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suffix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->suffix().data(), this->suffix().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "suffix");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_comment;
        break;
      }

      // optional string comment = 5;
      case 5: {
        if (tag == 42) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "comment");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_marker;
        break;
      }

      // repeated string marker = 6;
      case 6: {
        if (tag == 50) {
         parse_marker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_marker()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->marker(this->marker_size() - 1).data(),
            this->marker(this->marker_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "marker");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_marker;
        if (input->ExpectTag(61)) goto parse_spillOver;
        break;
      }

      // repeated float spillOver = 7;
      case 7: {
        if (tag == 61) {
         parse_spillOver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 61, input, this->mutable_spillover())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_spillover())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_spillOver;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.COMP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.COMP)
  return false;
#undef DO_
}

void COMP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.COMP)
  // optional string cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cid(), output);
  }

  // optional string prefix = 2;
  if (has_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->prefix().data(), this->prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->prefix(), output);
  }

  // optional string suffix = 3;
  if (has_suffix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->suffix().data(), this->suffix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "suffix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->suffix(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // optional string comment = 5;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->comment(), output);
  }

  // repeated string marker = 6;
  for (int i = 0; i < this->marker_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->marker(i).data(), this->marker(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "marker");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->marker(i), output);
  }

  // repeated float spillOver = 7;
  for (int i = 0; i < this->spillover_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      7, this->spillover(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.COMP)
}

::google::protobuf::uint8* COMP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.COMP)
  // optional string cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cid(), target);
  }

  // optional string prefix = 2;
  if (has_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->prefix().data(), this->prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->prefix(), target);
  }

  // optional string suffix = 3;
  if (has_suffix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->suffix().data(), this->suffix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "suffix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->suffix(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional string comment = 5;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->comment(), target);
  }

  // repeated string marker = 6;
  for (int i = 0; i < this->marker_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->marker(i).data(), this->marker(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "marker");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->marker(i), target);
  }

  // repeated float spillOver = 7;
  for (int i = 0; i < this->spillover_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(7, this->spillover(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.COMP)
  return target;
}

int COMP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cid());
    }

    // optional string prefix = 2;
    if (has_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prefix());
    }

    // optional string suffix = 3;
    if (has_suffix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->suffix());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string comment = 5;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

  }
  // repeated string marker = 6;
  total_size += 1 * this->marker_size();
  for (int i = 0; i < this->marker_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->marker(i));
  }

  // repeated float spillOver = 7;
  {
    int data_size = 0;
    data_size = 4 * this->spillover_size();
    total_size += 1 * this->spillover_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void COMP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const COMP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const COMP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void COMP::MergeFrom(const COMP& from) {
  GOOGLE_CHECK_NE(&from, this);
  marker_.MergeFrom(from.marker_);
  spillover_.MergeFrom(from.spillover_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_prefix()) {
      set_prefix(from.prefix());
    }
    if (from.has_suffix()) {
      set_suffix(from.suffix());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void COMP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void COMP::CopyFrom(const COMP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool COMP::IsInitialized() const {

  return true;
}

void COMP::Swap(COMP* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(prefix_, other->prefix_);
    std::swap(suffix_, other->suffix_);
    std::swap(name_, other->name_);
    std::swap(comment_, other->comment_);
    marker_.Swap(&other->marker_);
    spillover_.Swap(&other->spillover_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata COMP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = COMP_descriptor_;
  metadata.reflection = COMP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PARAM::kParamFieldNumber;
const int PARAM::kLogFieldNumber;
const int PARAM::kRangeFieldNumber;
const int PARAM::kHighValueFieldNumber;
const int PARAM::kCalibrationIndexFieldNumber;
#endif  // !_MSC_VER

PARAM::PARAM()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.PARAM)
}

void PARAM::InitAsDefaultInstance() {
}

PARAM::PARAM(const PARAM& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.PARAM)
}

void PARAM::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  param_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_ = false;
  range_ = 0u;
  highvalue_ = 0u;
  calibrationindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PARAM::~PARAM() {
  // @@protoc_insertion_point(destructor:pb.PARAM)
  SharedDtor();
}

void PARAM::SharedDtor() {
  if (param_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete param_;
  }
  if (this != default_instance_) {
  }
}

void PARAM::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PARAM::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PARAM_descriptor_;
}

const PARAM& PARAM::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GatingSet_2eproto();
  return *default_instance_;
}

PARAM* PARAM::default_instance_ = NULL;

PARAM* PARAM::New() const {
  return new PARAM;
}

void PARAM::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PARAM*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(log_, calibrationindex_);
    if (has_param()) {
      if (param_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        param_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PARAM::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.PARAM)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string param = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->param().data(), this->param().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "param");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_log;
        break;
      }

      // optional bool log = 2;
      case 2: {
        if (tag == 16) {
         parse_log:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &log_)));
          set_has_log();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_range;
        break;
      }

      // optional uint32 range = 3;
      case 3: {
        if (tag == 24) {
         parse_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &range_)));
          set_has_range();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_highValue;
        break;
      }

      // optional uint32 highValue = 4;
      case 4: {
        if (tag == 32) {
         parse_highValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &highvalue_)));
          set_has_highvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_calibrationIndex;
        break;
      }

      // optional uint32 calibrationIndex = 5;
      case 5: {
        if (tag == 40) {
         parse_calibrationIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &calibrationindex_)));
          set_has_calibrationindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.PARAM)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.PARAM)
  return false;
#undef DO_
}

void PARAM::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.PARAM)
  // optional string param = 1;
  if (has_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param().data(), this->param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "param");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->param(), output);
  }

  // optional bool log = 2;
  if (has_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->log(), output);
  }

  // optional uint32 range = 3;
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->range(), output);
  }

  // optional uint32 highValue = 4;
  if (has_highvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->highvalue(), output);
  }

  // optional uint32 calibrationIndex = 5;
  if (has_calibrationindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->calibrationindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.PARAM)
}

::google::protobuf::uint8* PARAM::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.PARAM)
  // optional string param = 1;
  if (has_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param().data(), this->param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "param");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->param(), target);
  }

  // optional bool log = 2;
  if (has_log()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->log(), target);
  }

  // optional uint32 range = 3;
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->range(), target);
  }

  // optional uint32 highValue = 4;
  if (has_highvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->highvalue(), target);
  }

  // optional uint32 calibrationIndex = 5;
  if (has_calibrationindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->calibrationindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.PARAM)
  return target;
}

int PARAM::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string param = 1;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->param());
    }

    // optional bool log = 2;
    if (has_log()) {
      total_size += 1 + 1;
    }

    // optional uint32 range = 3;
    if (has_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->range());
    }

    // optional uint32 highValue = 4;
    if (has_highvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->highvalue());
    }

    // optional uint32 calibrationIndex = 5;
    if (has_calibrationindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->calibrationindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PARAM::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PARAM* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PARAM*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PARAM::MergeFrom(const PARAM& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_log()) {
      set_log(from.log());
    }
    if (from.has_range()) {
      set_range(from.range());
    }
    if (from.has_highvalue()) {
      set_highvalue(from.highvalue());
    }
    if (from.has_calibrationindex()) {
      set_calibrationindex(from.calibrationindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PARAM::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PARAM::CopyFrom(const PARAM& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PARAM::IsInitialized() const {

  return true;
}

void PARAM::Swap(PARAM* other) {
  if (other != this) {
    std::swap(param_, other->param_);
    std::swap(log_, other->log_);
    std::swap(range_, other->range_);
    std::swap(highvalue_, other->highvalue_);
    std::swap(calibrationindex_, other->calibrationindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PARAM::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PARAM_descriptor_;
  metadata.reflection = PARAM_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GatingHierarchy::kTreeFieldNumber;
const int GatingHierarchy::kCompFieldNumber;
const int GatingHierarchy::kIsLoadedFieldNumber;
const int GatingHierarchy::kTransFlagFieldNumber;
const int GatingHierarchy::kTransFieldNumber;
const int GatingHierarchy::kFrameFieldNumber;
#endif  // !_MSC_VER

GatingHierarchy::GatingHierarchy()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.GatingHierarchy)
}

void GatingHierarchy::InitAsDefaultInstance() {
  tree_ = const_cast< ::pb::populationTree*>(&::pb::populationTree::default_instance());
  comp_ = const_cast< ::pb::COMP*>(&::pb::COMP::default_instance());
  trans_ = const_cast< ::pb::trans_local*>(&::pb::trans_local::default_instance());
  frame_ = const_cast< ::pb::CytoFrame*>(&::pb::CytoFrame::default_instance());
}

GatingHierarchy::GatingHierarchy(const GatingHierarchy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.GatingHierarchy)
}

void GatingHierarchy::SharedCtor() {
  _cached_size_ = 0;
  tree_ = NULL;
  comp_ = NULL;
  isloaded_ = false;
  trans_ = NULL;
  frame_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GatingHierarchy::~GatingHierarchy() {
  // @@protoc_insertion_point(destructor:pb.GatingHierarchy)
  SharedDtor();
}

void GatingHierarchy::SharedDtor() {
  if (this != default_instance_) {
    delete tree_;
    delete comp_;
    delete trans_;
    delete frame_;
  }
}

void GatingHierarchy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GatingHierarchy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GatingHierarchy_descriptor_;
}

const GatingHierarchy& GatingHierarchy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GatingSet_2eproto();
  return *default_instance_;
}

GatingHierarchy* GatingHierarchy::default_instance_ = NULL;

GatingHierarchy* GatingHierarchy::New() const {
  return new GatingHierarchy;
}

void GatingHierarchy::Clear() {
  if (_has_bits_[0 / 32] & 55) {
    if (has_tree()) {
      if (tree_ != NULL) tree_->::pb::populationTree::Clear();
    }
    if (has_comp()) {
      if (comp_ != NULL) comp_->::pb::COMP::Clear();
    }
    isloaded_ = false;
    if (has_trans()) {
      if (trans_ != NULL) trans_->::pb::trans_local::Clear();
    }
    if (has_frame()) {
      if (frame_ != NULL) frame_->::pb::CytoFrame::Clear();
    }
  }
  transflag_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GatingHierarchy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.GatingHierarchy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.COMP comp = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_comp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tree;
        break;
      }

      // required .pb.populationTree tree = 2;
      case 2: {
        if (tag == 18) {
         parse_tree:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tree()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_isLoaded;
        break;
      }

      // optional bool isLoaded = 3;
      case 3: {
        if (tag == 24) {
         parse_isLoaded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isloaded_)));
          set_has_isloaded();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_transFlag;
        break;
      }

      // repeated .pb.PARAM transFlag = 4;
      case 4: {
        if (tag == 34) {
         parse_transFlag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_transflag()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_transFlag;
        if (input->ExpectTag(42)) goto parse_trans;
        break;
      }

      // optional .pb.trans_local trans = 5;
      case 5: {
        if (tag == 42) {
         parse_trans:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trans()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_frame;
        break;
      }

      // optional .pb.CytoFrame frame = 6;
      case 6: {
        if (tag == 50) {
         parse_frame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_frame()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.GatingHierarchy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.GatingHierarchy)
  return false;
#undef DO_
}

void GatingHierarchy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.GatingHierarchy)
  // optional .pb.COMP comp = 1;
  if (has_comp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->comp(), output);
  }

  // required .pb.populationTree tree = 2;
  if (has_tree()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tree(), output);
  }

  // optional bool isLoaded = 3;
  if (has_isloaded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isloaded(), output);
  }

  // repeated .pb.PARAM transFlag = 4;
  for (int i = 0; i < this->transflag_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->transflag(i), output);
  }

  // optional .pb.trans_local trans = 5;
  if (has_trans()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->trans(), output);
  }

  // optional .pb.CytoFrame frame = 6;
  if (has_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->frame(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.GatingHierarchy)
}

::google::protobuf::uint8* GatingHierarchy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GatingHierarchy)
  // optional .pb.COMP comp = 1;
  if (has_comp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->comp(), target);
  }

  // required .pb.populationTree tree = 2;
  if (has_tree()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tree(), target);
  }

  // optional bool isLoaded = 3;
  if (has_isloaded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isloaded(), target);
  }

  // repeated .pb.PARAM transFlag = 4;
  for (int i = 0; i < this->transflag_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->transflag(i), target);
  }

  // optional .pb.trans_local trans = 5;
  if (has_trans()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->trans(), target);
  }

  // optional .pb.CytoFrame frame = 6;
  if (has_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->frame(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GatingHierarchy)
  return target;
}

int GatingHierarchy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.populationTree tree = 2;
    if (has_tree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tree());
    }

    // optional .pb.COMP comp = 1;
    if (has_comp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->comp());
    }

    // optional bool isLoaded = 3;
    if (has_isloaded()) {
      total_size += 1 + 1;
    }

    // optional .pb.trans_local trans = 5;
    if (has_trans()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trans());
    }

    // optional .pb.CytoFrame frame = 6;
    if (has_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->frame());
    }

  }
  // repeated .pb.PARAM transFlag = 4;
  total_size += 1 * this->transflag_size();
  for (int i = 0; i < this->transflag_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->transflag(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GatingHierarchy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GatingHierarchy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GatingHierarchy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GatingHierarchy::MergeFrom(const GatingHierarchy& from) {
  GOOGLE_CHECK_NE(&from, this);
  transflag_.MergeFrom(from.transflag_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tree()) {
      mutable_tree()->::pb::populationTree::MergeFrom(from.tree());
    }
    if (from.has_comp()) {
      mutable_comp()->::pb::COMP::MergeFrom(from.comp());
    }
    if (from.has_isloaded()) {
      set_isloaded(from.isloaded());
    }
    if (from.has_trans()) {
      mutable_trans()->::pb::trans_local::MergeFrom(from.trans());
    }
    if (from.has_frame()) {
      mutable_frame()->::pb::CytoFrame::MergeFrom(from.frame());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GatingHierarchy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GatingHierarchy::CopyFrom(const GatingHierarchy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GatingHierarchy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_tree()) {
    if (!this->tree().IsInitialized()) return false;
  }
  if (has_trans()) {
    if (!this->trans().IsInitialized()) return false;
  }
  if (has_frame()) {
    if (!this->frame().IsInitialized()) return false;
  }
  return true;
}

void GatingHierarchy::Swap(GatingHierarchy* other) {
  if (other != this) {
    std::swap(tree_, other->tree_);
    std::swap(comp_, other->comp_);
    std::swap(isloaded_, other->isloaded_);
    transflag_.Swap(&other->transflag_);
    std::swap(trans_, other->trans_);
    std::swap(frame_, other->frame_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GatingHierarchy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GatingHierarchy_descriptor_;
  metadata.reflection = GatingHierarchy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CytoFrame::kIsH5FieldNumber;
#endif  // !_MSC_VER

CytoFrame::CytoFrame()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CytoFrame)
}

void CytoFrame::InitAsDefaultInstance() {
}

CytoFrame::CytoFrame(const CytoFrame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.CytoFrame)
}

void CytoFrame::SharedCtor() {
  _cached_size_ = 0;
  is_h5_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CytoFrame::~CytoFrame() {
  // @@protoc_insertion_point(destructor:pb.CytoFrame)
  SharedDtor();
}

void CytoFrame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CytoFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CytoFrame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CytoFrame_descriptor_;
}

const CytoFrame& CytoFrame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GatingSet_2eproto();
  return *default_instance_;
}

CytoFrame* CytoFrame::default_instance_ = NULL;

CytoFrame* CytoFrame::New() const {
  return new CytoFrame;
}

void CytoFrame::Clear() {
  is_h5_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CytoFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CytoFrame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_h5 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_h5_)));
          set_has_is_h5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CytoFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CytoFrame)
  return false;
#undef DO_
}

void CytoFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CytoFrame)
  // required bool is_h5 = 1;
  if (has_is_h5()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_h5(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CytoFrame)
}

::google::protobuf::uint8* CytoFrame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CytoFrame)
  // required bool is_h5 = 1;
  if (has_is_h5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_h5(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CytoFrame)
  return target;
}

int CytoFrame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_h5 = 1;
    if (has_is_h5()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CytoFrame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CytoFrame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CytoFrame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CytoFrame::MergeFrom(const CytoFrame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_h5()) {
      set_is_h5(from.is_h5());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CytoFrame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CytoFrame::CopyFrom(const CytoFrame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CytoFrame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CytoFrame::Swap(CytoFrame* other) {
  if (other != this) {
    std::swap(is_h5_, other->is_h5_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CytoFrame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CytoFrame_descriptor_;
  metadata.reflection = CytoFrame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TRANS_TBL::kTransAddressFieldNumber;
const int TRANS_TBL::kTransFieldNumber;
#endif  // !_MSC_VER

TRANS_TBL::TRANS_TBL()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TRANS_TBL)
}

void TRANS_TBL::InitAsDefaultInstance() {
  trans_ = const_cast< ::pb::transformation*>(&::pb::transformation::default_instance());
}

TRANS_TBL::TRANS_TBL(const TRANS_TBL& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TRANS_TBL)
}

void TRANS_TBL::SharedCtor() {
  _cached_size_ = 0;
  trans_address_ = GOOGLE_ULONGLONG(0);
  trans_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TRANS_TBL::~TRANS_TBL() {
  // @@protoc_insertion_point(destructor:pb.TRANS_TBL)
  SharedDtor();
}

void TRANS_TBL::SharedDtor() {
  if (this != default_instance_) {
    delete trans_;
  }
}

void TRANS_TBL::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TRANS_TBL::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TRANS_TBL_descriptor_;
}

const TRANS_TBL& TRANS_TBL::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GatingSet_2eproto();
  return *default_instance_;
}

TRANS_TBL* TRANS_TBL::default_instance_ = NULL;

TRANS_TBL* TRANS_TBL::New() const {
  return new TRANS_TBL;
}

void TRANS_TBL::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    trans_address_ = GOOGLE_ULONGLONG(0);
    if (has_trans()) {
      if (trans_ != NULL) trans_->::pb::transformation::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TRANS_TBL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TRANS_TBL)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 trans_address = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &trans_address_)));
          set_has_trans_address();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_trans;
        break;
      }

      // optional .pb.transformation trans = 2;
      case 2: {
        if (tag == 18) {
         parse_trans:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trans()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TRANS_TBL)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TRANS_TBL)
  return false;
#undef DO_
}

void TRANS_TBL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TRANS_TBL)
  // optional uint64 trans_address = 1;
  if (has_trans_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->trans_address(), output);
  }

  // optional .pb.transformation trans = 2;
  if (has_trans()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->trans(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TRANS_TBL)
}

::google::protobuf::uint8* TRANS_TBL::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TRANS_TBL)
  // optional uint64 trans_address = 1;
  if (has_trans_address()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->trans_address(), target);
  }

  // optional .pb.transformation trans = 2;
  if (has_trans()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->trans(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TRANS_TBL)
  return target;
}

int TRANS_TBL::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 trans_address = 1;
    if (has_trans_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->trans_address());
    }

    // optional .pb.transformation trans = 2;
    if (has_trans()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trans());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TRANS_TBL::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TRANS_TBL* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TRANS_TBL*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TRANS_TBL::MergeFrom(const TRANS_TBL& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trans_address()) {
      set_trans_address(from.trans_address());
    }
    if (from.has_trans()) {
      mutable_trans()->::pb::transformation::MergeFrom(from.trans());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TRANS_TBL::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TRANS_TBL::CopyFrom(const TRANS_TBL& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TRANS_TBL::IsInitialized() const {

  return true;
}

void TRANS_TBL::Swap(TRANS_TBL* other) {
  if (other != this) {
    std::swap(trans_address_, other->trans_address_);
    std::swap(trans_, other->trans_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TRANS_TBL::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TRANS_TBL_descriptor_;
  metadata.reflection = TRANS_TBL_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GatingSet::kTransTblFieldNumber;
const int GatingSet::kSampleNameFieldNumber;
const int GatingSet::kGlobalBiExpTransFieldNumber;
const int GatingSet::kGlobalLinTransFieldNumber;
const int GatingSet::kGTransFieldNumber;
const int GatingSet::kGuidFieldNumber;
#endif  // !_MSC_VER

GatingSet::GatingSet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.GatingSet)
}

void GatingSet::InitAsDefaultInstance() {
}

GatingSet::GatingSet(const GatingSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.GatingSet)
}

void GatingSet::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  globalbiexptrans_ = GOOGLE_ULONGLONG(0);
  globallintrans_ = GOOGLE_ULONGLONG(0);
  guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GatingSet::~GatingSet() {
  // @@protoc_insertion_point(destructor:pb.GatingSet)
  SharedDtor();
}

void GatingSet::SharedDtor() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (this != default_instance_) {
  }
}

void GatingSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GatingSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GatingSet_descriptor_;
}

const GatingSet& GatingSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GatingSet_2eproto();
  return *default_instance_;
}

GatingSet* GatingSet::default_instance_ = NULL;

GatingSet* GatingSet::New() const {
  return new GatingSet;
}

void GatingSet::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GatingSet*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 44) {
    ZR_(globalbiexptrans_, globallintrans_);
    if (has_guid()) {
      if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  trans_tbl_.Clear();
  samplename_.Clear();
  gtrans_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GatingSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.GatingSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string sampleName = 1;
      case 1: {
        if (tag == 10) {
         parse_sampleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_samplename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->samplename(this->samplename_size() - 1).data(),
            this->samplename(this->samplename_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "samplename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_sampleName;
        if (input->ExpectTag(18)) goto parse_trans_tbl;
        break;
      }

      // repeated .pb.TRANS_TBL trans_tbl = 2;
      case 2: {
        if (tag == 18) {
         parse_trans_tbl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trans_tbl()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_trans_tbl;
        if (input->ExpectTag(24)) goto parse_globalBiExpTrans;
        break;
      }

      // optional uint64 globalBiExpTrans = 3;
      case 3: {
        if (tag == 24) {
         parse_globalBiExpTrans:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &globalbiexptrans_)));
          set_has_globalbiexptrans();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_globalLinTrans;
        break;
      }

      // optional uint64 globalLinTrans = 4;
      case 4: {
        if (tag == 32) {
         parse_globalLinTrans:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &globallintrans_)));
          set_has_globallintrans();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_gTrans;
        break;
      }

      // repeated .pb.trans_local gTrans = 5;
      case 5: {
        if (tag == 42) {
         parse_gTrans:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gtrans()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_gTrans;
        if (input->ExpectTag(50)) goto parse_guid;
        break;
      }

      // optional string guid = 6;
      case 6: {
        if (tag == 50) {
         parse_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guid().data(), this->guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.GatingSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.GatingSet)
  return false;
#undef DO_
}

void GatingSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.GatingSet)
  // repeated string sampleName = 1;
  for (int i = 0; i < this->samplename_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->samplename(i).data(), this->samplename(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "samplename");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->samplename(i), output);
  }

  // repeated .pb.TRANS_TBL trans_tbl = 2;
  for (int i = 0; i < this->trans_tbl_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->trans_tbl(i), output);
  }

  // optional uint64 globalBiExpTrans = 3;
  if (has_globalbiexptrans()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->globalbiexptrans(), output);
  }

  // optional uint64 globalLinTrans = 4;
  if (has_globallintrans()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->globallintrans(), output);
  }

  // repeated .pb.trans_local gTrans = 5;
  for (int i = 0; i < this->gtrans_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->gtrans(i), output);
  }

  // optional string guid = 6;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.GatingSet)
}

::google::protobuf::uint8* GatingSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GatingSet)
  // repeated string sampleName = 1;
  for (int i = 0; i < this->samplename_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->samplename(i).data(), this->samplename(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "samplename");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->samplename(i), target);
  }

  // repeated .pb.TRANS_TBL trans_tbl = 2;
  for (int i = 0; i < this->trans_tbl_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->trans_tbl(i), target);
  }

  // optional uint64 globalBiExpTrans = 3;
  if (has_globalbiexptrans()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->globalbiexptrans(), target);
  }

  // optional uint64 globalLinTrans = 4;
  if (has_globallintrans()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->globallintrans(), target);
  }

  // repeated .pb.trans_local gTrans = 5;
  for (int i = 0; i < this->gtrans_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->gtrans(i), target);
  }

  // optional string guid = 6;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GatingSet)
  return target;
}

int GatingSet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint64 globalBiExpTrans = 3;
    if (has_globalbiexptrans()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->globalbiexptrans());
    }

    // optional uint64 globalLinTrans = 4;
    if (has_globallintrans()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->globallintrans());
    }

    // optional string guid = 6;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }

  }
  // repeated .pb.TRANS_TBL trans_tbl = 2;
  total_size += 1 * this->trans_tbl_size();
  for (int i = 0; i < this->trans_tbl_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trans_tbl(i));
  }

  // repeated string sampleName = 1;
  total_size += 1 * this->samplename_size();
  for (int i = 0; i < this->samplename_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->samplename(i));
  }

  // repeated .pb.trans_local gTrans = 5;
  total_size += 1 * this->gtrans_size();
  for (int i = 0; i < this->gtrans_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gtrans(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GatingSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GatingSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GatingSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GatingSet::MergeFrom(const GatingSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  trans_tbl_.MergeFrom(from.trans_tbl_);
  samplename_.MergeFrom(from.samplename_);
  gtrans_.MergeFrom(from.gtrans_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_globalbiexptrans()) {
      set_globalbiexptrans(from.globalbiexptrans());
    }
    if (from.has_globallintrans()) {
      set_globallintrans(from.globallintrans());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GatingSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GatingSet::CopyFrom(const GatingSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GatingSet::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->gtrans())) return false;
  return true;
}

void GatingSet::Swap(GatingSet* other) {
  if (other != this) {
    trans_tbl_.Swap(&other->trans_tbl_);
    samplename_.Swap(&other->samplename_);
    std::swap(globalbiexptrans_, other->globalbiexptrans_);
    std::swap(globallintrans_, other->globallintrans_);
    gtrans_.Swap(&other->gtrans_);
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GatingSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GatingSet_descriptor_;
  metadata.reflection = GatingSet_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
