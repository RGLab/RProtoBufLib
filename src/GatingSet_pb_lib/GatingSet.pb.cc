// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GatingSet.proto

#include <cytolib/GatingSet.pb.h>

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_GatingSet_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BOOL_GATE_OP_GatingSet_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GatingSet_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_COMP_GatingSet_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GatingSet_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CytoFrame_GatingSet_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GatingSet_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PARAM_GatingSet_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GatingSet_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_POPINDICES_GatingSet_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GatingSet_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_POPSTATS_GatingSet_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GatingSet_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TRANS_TBL_GatingSet_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GatingSet_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_biexpTrans_GatingSet_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GatingSet_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_boolGate_GatingSet_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GatingSet_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_calibrationTable_GatingSet_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GatingSet_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_clusterGate_GatingSet_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GatingSet_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_coordinate_GatingSet_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GatingSet_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ellipseGate_GatingSet_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GatingSet_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_fasinhTrans_GatingSet_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GatingSet_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flinTrans_GatingSet_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GatingSet_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_gate_GatingSet_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GatingSet_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_logGML2Trans_GatingSet_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GatingSet_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_logTrans_GatingSet_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GatingSet_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_logicleTrans_GatingSet_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GatingSet_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_nodeProperties_GatingSet_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GatingSet_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_paramPoly_GatingSet_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GatingSet_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_paramRange_GatingSet_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GatingSet_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_polygonGate_GatingSet_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GatingSet_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_populationTree_GatingSet_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GatingSet_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_quadGate_GatingSet_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GatingSet_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_rangeGate_GatingSet_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GatingSet_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_scaleTrans_GatingSet_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GatingSet_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_trans_local_GatingSet_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GatingSet_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_trans_pair_GatingSet_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GatingSet_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_transformation_GatingSet_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GatingSet_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_treeNodes_GatingSet_2eproto;
namespace pb {
class paramRangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<paramRange> _instance;
} _paramRange_default_instance_;
class rangeGateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<rangeGate> _instance;
} _rangeGate_default_instance_;
class paramPolyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<paramPoly> _instance;
} _paramPoly_default_instance_;
class polygonGateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<polygonGate> _instance;
} _polygonGate_default_instance_;
class coordinateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<coordinate> _instance;
} _coordinate_default_instance_;
class ellipseGateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ellipseGate> _instance;
} _ellipseGate_default_instance_;
class BOOL_GATE_OPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BOOL_GATE_OP> _instance;
} _BOOL_GATE_OP_default_instance_;
class boolGateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<boolGate> _instance;
} _boolGate_default_instance_;
class clusterGateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<clusterGate> _instance;
} _clusterGate_default_instance_;
class quadGateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<quadGate> _instance;
} _quadGate_default_instance_;
class gateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<gate> _instance;
} _gate_default_instance_;
class POPSTATSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<POPSTATS> _instance;
} _POPSTATS_default_instance_;
class calibrationTableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<calibrationTable> _instance;
} _calibrationTable_default_instance_;
class biexpTransDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<biexpTrans> _instance;
} _biexpTrans_default_instance_;
class fasinhTransDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<fasinhTrans> _instance;
} _fasinhTrans_default_instance_;
class scaleTransDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<scaleTrans> _instance;
} _scaleTrans_default_instance_;
class flinTransDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flinTrans> _instance;
} _flinTrans_default_instance_;
class logTransDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<logTrans> _instance;
} _logTrans_default_instance_;
class logGML2TransDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<logGML2Trans> _instance;
} _logGML2Trans_default_instance_;
class logicleTransDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<logicleTrans> _instance;
} _logicleTrans_default_instance_;
class transformationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<transformation> _instance;
} _transformation_default_instance_;
class trans_pairDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<trans_pair> _instance;
} _trans_pair_default_instance_;
class trans_localDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<trans_local> _instance;
} _trans_local_default_instance_;
class POPINDICESDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<POPINDICES> _instance;
} _POPINDICES_default_instance_;
class nodePropertiesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<nodeProperties> _instance;
} _nodeProperties_default_instance_;
class treeNodesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<treeNodes> _instance;
} _treeNodes_default_instance_;
class populationTreeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<populationTree> _instance;
} _populationTree_default_instance_;
class COMPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<COMP> _instance;
} _COMP_default_instance_;
class PARAMDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PARAM> _instance;
} _PARAM_default_instance_;
class GatingHierarchyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GatingHierarchy> _instance;
} _GatingHierarchy_default_instance_;
class CytoFrameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CytoFrame> _instance;
} _CytoFrame_default_instance_;
class TRANS_TBLDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TRANS_TBL> _instance;
} _TRANS_TBL_default_instance_;
class GatingSetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GatingSet> _instance;
} _GatingSet_default_instance_;
}  // namespace pb
static void InitDefaultsscc_info_BOOL_GATE_OP_GatingSet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_BOOL_GATE_OP_default_instance_;
    new (ptr) ::pb::BOOL_GATE_OP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::BOOL_GATE_OP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BOOL_GATE_OP_GatingSet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BOOL_GATE_OP_GatingSet_2eproto}, {}};

static void InitDefaultsscc_info_COMP_GatingSet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_COMP_default_instance_;
    new (ptr) ::pb::COMP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::COMP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_COMP_GatingSet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_COMP_GatingSet_2eproto}, {}};

static void InitDefaultsscc_info_CytoFrame_GatingSet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CytoFrame_default_instance_;
    new (ptr) ::pb::CytoFrame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CytoFrame::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CytoFrame_GatingSet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CytoFrame_GatingSet_2eproto}, {}};

static void InitDefaultsscc_info_GatingHierarchy_GatingSet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_GatingHierarchy_default_instance_;
    new (ptr) ::pb::GatingHierarchy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::GatingHierarchy::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_GatingHierarchy_GatingSet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_GatingHierarchy_GatingSet_2eproto}, {
      &scc_info_populationTree_GatingSet_2eproto.base,
      &scc_info_COMP_GatingSet_2eproto.base,
      &scc_info_PARAM_GatingSet_2eproto.base,
      &scc_info_trans_local_GatingSet_2eproto.base,
      &scc_info_CytoFrame_GatingSet_2eproto.base,}};

static void InitDefaultsscc_info_GatingSet_GatingSet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_GatingSet_default_instance_;
    new (ptr) ::pb::GatingSet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::GatingSet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GatingSet_GatingSet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GatingSet_GatingSet_2eproto}, {
      &scc_info_TRANS_TBL_GatingSet_2eproto.base,
      &scc_info_trans_local_GatingSet_2eproto.base,}};

static void InitDefaultsscc_info_PARAM_GatingSet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_PARAM_default_instance_;
    new (ptr) ::pb::PARAM();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::PARAM::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PARAM_GatingSet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PARAM_GatingSet_2eproto}, {}};

static void InitDefaultsscc_info_POPINDICES_GatingSet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_POPINDICES_default_instance_;
    new (ptr) ::pb::POPINDICES();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::POPINDICES::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_POPINDICES_GatingSet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_POPINDICES_GatingSet_2eproto}, {}};

static void InitDefaultsscc_info_POPSTATS_GatingSet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_POPSTATS_default_instance_;
    new (ptr) ::pb::POPSTATS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::POPSTATS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_POPSTATS_GatingSet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_POPSTATS_GatingSet_2eproto}, {}};

static void InitDefaultsscc_info_TRANS_TBL_GatingSet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_TRANS_TBL_default_instance_;
    new (ptr) ::pb::TRANS_TBL();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::TRANS_TBL::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TRANS_TBL_GatingSet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TRANS_TBL_GatingSet_2eproto}, {
      &scc_info_transformation_GatingSet_2eproto.base,}};

static void InitDefaultsscc_info_biexpTrans_GatingSet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_biexpTrans_default_instance_;
    new (ptr) ::pb::biexpTrans();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::biexpTrans::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_biexpTrans_GatingSet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_biexpTrans_GatingSet_2eproto}, {}};

static void InitDefaultsscc_info_boolGate_GatingSet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_boolGate_default_instance_;
    new (ptr) ::pb::boolGate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::boolGate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_boolGate_GatingSet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_boolGate_GatingSet_2eproto}, {
      &scc_info_BOOL_GATE_OP_GatingSet_2eproto.base,}};

static void InitDefaultsscc_info_calibrationTable_GatingSet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_calibrationTable_default_instance_;
    new (ptr) ::pb::calibrationTable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::calibrationTable::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_calibrationTable_GatingSet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_calibrationTable_GatingSet_2eproto}, {}};

static void InitDefaultsscc_info_clusterGate_GatingSet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_clusterGate_default_instance_;
    new (ptr) ::pb::clusterGate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::clusterGate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_clusterGate_GatingSet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_clusterGate_GatingSet_2eproto}, {}};

static void InitDefaultsscc_info_coordinate_GatingSet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_coordinate_default_instance_;
    new (ptr) ::pb::coordinate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::coordinate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_coordinate_GatingSet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_coordinate_GatingSet_2eproto}, {}};

static void InitDefaultsscc_info_ellipseGate_GatingSet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_ellipseGate_default_instance_;
    new (ptr) ::pb::ellipseGate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ellipseGate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ellipseGate_GatingSet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ellipseGate_GatingSet_2eproto}, {
      &scc_info_coordinate_GatingSet_2eproto.base,}};

static void InitDefaultsscc_info_fasinhTrans_GatingSet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_fasinhTrans_default_instance_;
    new (ptr) ::pb::fasinhTrans();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::fasinhTrans::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_fasinhTrans_GatingSet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_fasinhTrans_GatingSet_2eproto}, {}};

static void InitDefaultsscc_info_flinTrans_GatingSet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_flinTrans_default_instance_;
    new (ptr) ::pb::flinTrans();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::flinTrans::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flinTrans_GatingSet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_flinTrans_GatingSet_2eproto}, {}};

static void InitDefaultsscc_info_gate_GatingSet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_gate_default_instance_;
    new (ptr) ::pb::gate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::gate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_gate_GatingSet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_gate_GatingSet_2eproto}, {
      &scc_info_rangeGate_GatingSet_2eproto.base,
      &scc_info_polygonGate_GatingSet_2eproto.base,
      &scc_info_ellipseGate_GatingSet_2eproto.base,
      &scc_info_boolGate_GatingSet_2eproto.base,
      &scc_info_clusterGate_GatingSet_2eproto.base,}};

static void InitDefaultsscc_info_logGML2Trans_GatingSet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_logGML2Trans_default_instance_;
    new (ptr) ::pb::logGML2Trans();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::logGML2Trans::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_logGML2Trans_GatingSet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_logGML2Trans_GatingSet_2eproto}, {}};

static void InitDefaultsscc_info_logTrans_GatingSet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_logTrans_default_instance_;
    new (ptr) ::pb::logTrans();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::logTrans::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_logTrans_GatingSet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_logTrans_GatingSet_2eproto}, {}};

static void InitDefaultsscc_info_logicleTrans_GatingSet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_logicleTrans_default_instance_;
    new (ptr) ::pb::logicleTrans();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::logicleTrans::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_logicleTrans_GatingSet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_logicleTrans_GatingSet_2eproto}, {}};

static void InitDefaultsscc_info_nodeProperties_GatingSet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_nodeProperties_default_instance_;
    new (ptr) ::pb::nodeProperties();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::nodeProperties::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_nodeProperties_GatingSet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_nodeProperties_GatingSet_2eproto}, {
      &scc_info_POPSTATS_GatingSet_2eproto.base,
      &scc_info_POPINDICES_GatingSet_2eproto.base,
      &scc_info_gate_GatingSet_2eproto.base,}};

static void InitDefaultsscc_info_paramPoly_GatingSet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_paramPoly_default_instance_;
    new (ptr) ::pb::paramPoly();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::paramPoly::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_paramPoly_GatingSet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_paramPoly_GatingSet_2eproto}, {
      &scc_info_coordinate_GatingSet_2eproto.base,}};

static void InitDefaultsscc_info_paramRange_GatingSet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_paramRange_default_instance_;
    new (ptr) ::pb::paramRange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::paramRange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_paramRange_GatingSet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_paramRange_GatingSet_2eproto}, {}};

static void InitDefaultsscc_info_polygonGate_GatingSet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_polygonGate_default_instance_;
    new (ptr) ::pb::polygonGate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::polygonGate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_polygonGate_GatingSet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_polygonGate_GatingSet_2eproto}, {
      &scc_info_paramPoly_GatingSet_2eproto.base,
      &scc_info_quadGate_GatingSet_2eproto.base,}};

static void InitDefaultsscc_info_populationTree_GatingSet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_populationTree_default_instance_;
    new (ptr) ::pb::populationTree();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::populationTree::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_populationTree_GatingSet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_populationTree_GatingSet_2eproto}, {
      &scc_info_treeNodes_GatingSet_2eproto.base,}};

static void InitDefaultsscc_info_quadGate_GatingSet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_quadGate_default_instance_;
    new (ptr) ::pb::quadGate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::quadGate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_quadGate_GatingSet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_quadGate_GatingSet_2eproto}, {}};

static void InitDefaultsscc_info_rangeGate_GatingSet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_rangeGate_default_instance_;
    new (ptr) ::pb::rangeGate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::rangeGate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_rangeGate_GatingSet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_rangeGate_GatingSet_2eproto}, {
      &scc_info_paramRange_GatingSet_2eproto.base,}};

static void InitDefaultsscc_info_scaleTrans_GatingSet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_scaleTrans_default_instance_;
    new (ptr) ::pb::scaleTrans();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::scaleTrans::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_scaleTrans_GatingSet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_scaleTrans_GatingSet_2eproto}, {}};

static void InitDefaultsscc_info_trans_local_GatingSet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_trans_local_default_instance_;
    new (ptr) ::pb::trans_local();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::trans_local::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_trans_local_GatingSet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_trans_local_GatingSet_2eproto}, {
      &scc_info_trans_pair_GatingSet_2eproto.base,}};

static void InitDefaultsscc_info_trans_pair_GatingSet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_trans_pair_default_instance_;
    new (ptr) ::pb::trans_pair();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::trans_pair::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_trans_pair_GatingSet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_trans_pair_GatingSet_2eproto}, {
      &scc_info_transformation_GatingSet_2eproto.base,}};

static void InitDefaultsscc_info_transformation_GatingSet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_transformation_default_instance_;
    new (ptr) ::pb::transformation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::transformation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_transformation_GatingSet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, 0, InitDefaultsscc_info_transformation_GatingSet_2eproto}, {
      &scc_info_calibrationTable_GatingSet_2eproto.base,
      &scc_info_biexpTrans_GatingSet_2eproto.base,
      &scc_info_logTrans_GatingSet_2eproto.base,
      &scc_info_flinTrans_GatingSet_2eproto.base,
      &scc_info_scaleTrans_GatingSet_2eproto.base,
      &scc_info_fasinhTrans_GatingSet_2eproto.base,
      &scc_info_logicleTrans_GatingSet_2eproto.base,
      &scc_info_logGML2Trans_GatingSet_2eproto.base,}};

static void InitDefaultsscc_info_treeNodes_GatingSet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_treeNodes_default_instance_;
    new (ptr) ::pb::treeNodes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::treeNodes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_treeNodes_GatingSet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_treeNodes_GatingSet_2eproto}, {
      &scc_info_nodeProperties_GatingSet_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_GatingSet_2eproto[33];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_GatingSet_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_GatingSet_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_GatingSet_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::paramRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::paramRange, name_),
  PROTOBUF_FIELD_OFFSET(::pb::paramRange, min_),
  PROTOBUF_FIELD_OFFSET(::pb::paramRange, max_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::rangeGate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::rangeGate, param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::paramPoly, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::paramPoly, params_),
  PROTOBUF_FIELD_OFFSET(::pb::paramPoly, vertices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::polygonGate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::polygonGate, param_),
  PROTOBUF_FIELD_OFFSET(::pb::polygonGate, qg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::coordinate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::coordinate, x_),
  PROTOBUF_FIELD_OFFSET(::pb::coordinate, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::ellipseGate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ellipseGate, mu_),
  PROTOBUF_FIELD_OFFSET(::pb::ellipseGate, cov_),
  PROTOBUF_FIELD_OFFSET(::pb::ellipseGate, antipodal_vertices_),
  PROTOBUF_FIELD_OFFSET(::pb::ellipseGate, dist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::BOOL_GATE_OP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::BOOL_GATE_OP, path_),
  PROTOBUF_FIELD_OFFSET(::pb::BOOL_GATE_OP, op_),
  PROTOBUF_FIELD_OFFSET(::pb::BOOL_GATE_OP, isnot_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::boolGate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::boolGate, boolopspec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::clusterGate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::clusterGate, cluster_method_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::quadGate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::quadGate, uid_),
  PROTOBUF_FIELD_OFFSET(::pb::quadGate, quadrant_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::gate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::gate, neg_),
  PROTOBUF_FIELD_OFFSET(::pb::gate, istransformed_),
  PROTOBUF_FIELD_OFFSET(::pb::gate, isgained_),
  PROTOBUF_FIELD_OFFSET(::pb::gate, type_),
  PROTOBUF_FIELD_OFFSET(::pb::gate, rg_),
  PROTOBUF_FIELD_OFFSET(::pb::gate, pg_),
  PROTOBUF_FIELD_OFFSET(::pb::gate, eg_),
  PROTOBUF_FIELD_OFFSET(::pb::gate, bg_),
  PROTOBUF_FIELD_OFFSET(::pb::gate, cg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::POPSTATS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::POPSTATS, stattype_),
  PROTOBUF_FIELD_OFFSET(::pb::POPSTATS, statval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::calibrationTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::calibrationTable, x_),
  PROTOBUF_FIELD_OFFSET(::pb::calibrationTable, y_),
  PROTOBUF_FIELD_OFFSET(::pb::calibrationTable, b_),
  PROTOBUF_FIELD_OFFSET(::pb::calibrationTable, c_),
  PROTOBUF_FIELD_OFFSET(::pb::calibrationTable, d_),
  PROTOBUF_FIELD_OFFSET(::pb::calibrationTable, spline_method_),
  PROTOBUF_FIELD_OFFSET(::pb::calibrationTable, caltype_),
  PROTOBUF_FIELD_OFFSET(::pb::calibrationTable, flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::biexpTrans, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::biexpTrans, channelrange_),
  PROTOBUF_FIELD_OFFSET(::pb::biexpTrans, pos_),
  PROTOBUF_FIELD_OFFSET(::pb::biexpTrans, neg_),
  PROTOBUF_FIELD_OFFSET(::pb::biexpTrans, widthbasis_),
  PROTOBUF_FIELD_OFFSET(::pb::biexpTrans, maxvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::fasinhTrans, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::fasinhTrans, length_),
  PROTOBUF_FIELD_OFFSET(::pb::fasinhTrans, maxrange_),
  PROTOBUF_FIELD_OFFSET(::pb::fasinhTrans, t_),
  PROTOBUF_FIELD_OFFSET(::pb::fasinhTrans, a_),
  PROTOBUF_FIELD_OFFSET(::pb::fasinhTrans, m_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::scaleTrans, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::scaleTrans, scale_factor_),
  PROTOBUF_FIELD_OFFSET(::pb::scaleTrans, t_scale_),
  PROTOBUF_FIELD_OFFSET(::pb::scaleTrans, r_scale_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::flinTrans, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::flinTrans, min_),
  PROTOBUF_FIELD_OFFSET(::pb::flinTrans, max_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::logTrans, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::logTrans, offset_),
  PROTOBUF_FIELD_OFFSET(::pb::logTrans, decade_),
  PROTOBUF_FIELD_OFFSET(::pb::logTrans, t_),
  PROTOBUF_FIELD_OFFSET(::pb::logTrans, scale_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::logGML2Trans, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::logGML2Trans, t_),
  PROTOBUF_FIELD_OFFSET(::pb::logGML2Trans, m_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::logicleTrans, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::logicleTrans, t_),
  PROTOBUF_FIELD_OFFSET(::pb::logicleTrans, w_),
  PROTOBUF_FIELD_OFFSET(::pb::logicleTrans, m_),
  PROTOBUF_FIELD_OFFSET(::pb::logicleTrans, a_),
  PROTOBUF_FIELD_OFFSET(::pb::logicleTrans, bins_),
  PROTOBUF_FIELD_OFFSET(::pb::logicleTrans, isgml2_),
  PROTOBUF_FIELD_OFFSET(::pb::logicleTrans, isinverse_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::transformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::transformation, caltbl_),
  PROTOBUF_FIELD_OFFSET(::pb::transformation, isgateonly_),
  PROTOBUF_FIELD_OFFSET(::pb::transformation, name_),
  PROTOBUF_FIELD_OFFSET(::pb::transformation, channel_),
  PROTOBUF_FIELD_OFFSET(::pb::transformation, iscomputed_),
  PROTOBUF_FIELD_OFFSET(::pb::transformation, type_),
  PROTOBUF_FIELD_OFFSET(::pb::transformation, trans_type_),
  PROTOBUF_FIELD_OFFSET(::pb::transformation, bt_),
  PROTOBUF_FIELD_OFFSET(::pb::transformation, lt_),
  PROTOBUF_FIELD_OFFSET(::pb::transformation, flt_),
  PROTOBUF_FIELD_OFFSET(::pb::transformation, st_),
  PROTOBUF_FIELD_OFFSET(::pb::transformation, ft_),
  PROTOBUF_FIELD_OFFSET(::pb::transformation, lgt_),
  PROTOBUF_FIELD_OFFSET(::pb::transformation, lgml2t_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::trans_pair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::trans_pair, name_),
  PROTOBUF_FIELD_OFFSET(::pb::trans_pair, trans_address_),
  PROTOBUF_FIELD_OFFSET(::pb::trans_pair, trans_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::trans_local, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::trans_local, tp_),
  PROTOBUF_FIELD_OFFSET(::pb::trans_local, groupname_),
  PROTOBUF_FIELD_OFFSET(::pb::trans_local, sampleids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::POPINDICES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::POPINDICES, nevents_),
  PROTOBUF_FIELD_OFFSET(::pb::POPINDICES, indtype_),
  PROTOBUF_FIELD_OFFSET(::pb::POPINDICES, iind_),
  PROTOBUF_FIELD_OFFSET(::pb::POPINDICES, bind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::nodeProperties, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::nodeProperties, thisname_),
  PROTOBUF_FIELD_OFFSET(::pb::nodeProperties, fjstats_),
  PROTOBUF_FIELD_OFFSET(::pb::nodeProperties, fcstats_),
  PROTOBUF_FIELD_OFFSET(::pb::nodeProperties, hidden_),
  PROTOBUF_FIELD_OFFSET(::pb::nodeProperties, indices_),
  PROTOBUF_FIELD_OFFSET(::pb::nodeProperties, thisgate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::treeNodes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::treeNodes, node_),
  PROTOBUF_FIELD_OFFSET(::pb::treeNodes, parent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::populationTree, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::populationTree, node_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::COMP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::COMP, cid_),
  PROTOBUF_FIELD_OFFSET(::pb::COMP, prefix_),
  PROTOBUF_FIELD_OFFSET(::pb::COMP, suffix_),
  PROTOBUF_FIELD_OFFSET(::pb::COMP, name_),
  PROTOBUF_FIELD_OFFSET(::pb::COMP, comment_),
  PROTOBUF_FIELD_OFFSET(::pb::COMP, marker_),
  PROTOBUF_FIELD_OFFSET(::pb::COMP, spillover_),
  PROTOBUF_FIELD_OFFSET(::pb::COMP, detector_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::PARAM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::PARAM, param_),
  PROTOBUF_FIELD_OFFSET(::pb::PARAM, log_),
  PROTOBUF_FIELD_OFFSET(::pb::PARAM, range_),
  PROTOBUF_FIELD_OFFSET(::pb::PARAM, highvalue_),
  PROTOBUF_FIELD_OFFSET(::pb::PARAM, calibrationindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::GatingHierarchy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::GatingHierarchy, tree_),
  PROTOBUF_FIELD_OFFSET(::pb::GatingHierarchy, comp_),
  PROTOBUF_FIELD_OFFSET(::pb::GatingHierarchy, isloaded_),
  PROTOBUF_FIELD_OFFSET(::pb::GatingHierarchy, transflag_),
  PROTOBUF_FIELD_OFFSET(::pb::GatingHierarchy, trans_),
  PROTOBUF_FIELD_OFFSET(::pb::GatingHierarchy, frame_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CytoFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CytoFrame, is_h5_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::TRANS_TBL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::TRANS_TBL, trans_address_),
  PROTOBUF_FIELD_OFFSET(::pb::TRANS_TBL, trans_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::GatingSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::GatingSet, trans_tbl_),
  PROTOBUF_FIELD_OFFSET(::pb::GatingSet, samplename_),
  PROTOBUF_FIELD_OFFSET(::pb::GatingSet, globalbiexptrans_),
  PROTOBUF_FIELD_OFFSET(::pb::GatingSet, globallintrans_),
  PROTOBUF_FIELD_OFFSET(::pb::GatingSet, gtrans_),
  PROTOBUF_FIELD_OFFSET(::pb::GatingSet, guid_),
  PROTOBUF_FIELD_OFFSET(::pb::GatingSet, cytolib_verion_),
  PROTOBUF_FIELD_OFFSET(::pb::GatingSet, pb_verion_),
  PROTOBUF_FIELD_OFFSET(::pb::GatingSet, h5_verion_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb::paramRange)},
  { 8, -1, sizeof(::pb::rangeGate)},
  { 14, -1, sizeof(::pb::paramPoly)},
  { 21, -1, sizeof(::pb::polygonGate)},
  { 28, -1, sizeof(::pb::coordinate)},
  { 35, -1, sizeof(::pb::ellipseGate)},
  { 44, -1, sizeof(::pb::BOOL_GATE_OP)},
  { 52, -1, sizeof(::pb::boolGate)},
  { 58, -1, sizeof(::pb::clusterGate)},
  { 64, -1, sizeof(::pb::quadGate)},
  { 71, -1, sizeof(::pb::gate)},
  { 85, -1, sizeof(::pb::POPSTATS)},
  { 92, -1, sizeof(::pb::calibrationTable)},
  { 105, -1, sizeof(::pb::biexpTrans)},
  { 115, -1, sizeof(::pb::fasinhTrans)},
  { 125, -1, sizeof(::pb::scaleTrans)},
  { 133, -1, sizeof(::pb::flinTrans)},
  { 140, -1, sizeof(::pb::logTrans)},
  { 149, -1, sizeof(::pb::logGML2Trans)},
  { 156, -1, sizeof(::pb::logicleTrans)},
  { 168, -1, sizeof(::pb::transformation)},
  { 187, -1, sizeof(::pb::trans_pair)},
  { 195, -1, sizeof(::pb::trans_local)},
  { 203, -1, sizeof(::pb::POPINDICES)},
  { 212, -1, sizeof(::pb::nodeProperties)},
  { 223, -1, sizeof(::pb::treeNodes)},
  { 230, -1, sizeof(::pb::populationTree)},
  { 236, -1, sizeof(::pb::COMP)},
  { 249, -1, sizeof(::pb::PARAM)},
  { 259, -1, sizeof(::pb::GatingHierarchy)},
  { 270, -1, sizeof(::pb::CytoFrame)},
  { 276, -1, sizeof(::pb::TRANS_TBL)},
  { 283, -1, sizeof(::pb::GatingSet)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_paramRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_rangeGate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_paramPoly_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_polygonGate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_coordinate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_ellipseGate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_BOOL_GATE_OP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_boolGate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_clusterGate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_quadGate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_gate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_POPSTATS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_calibrationTable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_biexpTrans_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_fasinhTrans_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_scaleTrans_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_flinTrans_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_logTrans_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_logGML2Trans_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_logicleTrans_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_transformation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_trans_pair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_trans_local_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_POPINDICES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_nodeProperties_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_treeNodes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_populationTree_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_COMP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_PARAM_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_GatingHierarchy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_CytoFrame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_TRANS_TBL_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_GatingSet_default_instance_),
};

const char descriptor_table_protodef_GatingSet_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017GatingSet.proto\022\002pb\"4\n\nparamRange\022\014\n\004n"
  "ame\030\001 \001(\t\022\013\n\003min\030\002 \001(\002\022\013\n\003max\030\003 \001(\002\"*\n\tr"
  "angeGate\022\035\n\005param\030\001 \001(\0132\016.pb.paramRange\""
  "=\n\tparamPoly\022\016\n\006params\030\001 \003(\t\022 \n\010vertices"
  "\030\002 \003(\0132\016.pb.coordinate\"E\n\013polygonGate\022\034\n"
  "\005param\030\001 \001(\0132\r.pb.paramPoly\022\030\n\002qg\030\002 \001(\0132"
  "\014.pb.quadGate\"\"\n\ncoordinate\022\t\n\001x\030\001 \001(\002\022\t"
  "\n\001y\030\002 \001(\002\"\200\001\n\013ellipseGate\022\032\n\002mu\030\001 \001(\0132\016."
  "pb.coordinate\022\033\n\003cov\030\002 \003(\0132\016.pb.coordina"
  "te\022*\n\022antipodal_vertices\030\003 \003(\0132\016.pb.coor"
  "dinate\022\014\n\004dist\030\004 \001(\002\"7\n\014BOOL_GATE_OP\022\014\n\004"
  "path\030\001 \003(\t\022\n\n\002op\030\002 \001(\r\022\r\n\005isNot\030\003 \001(\010\"0\n"
  "\010boolGate\022$\n\nboolOpSpec\030\001 \003(\0132\020.pb.BOOL_"
  "GATE_OP\"%\n\013clusterGate\022\026\n\016cluster_method"
  "\030\001 \001(\t\"7\n\010quadGate\022\013\n\003uid\030\001 \001(\t\022\036\n\010quadr"
  "ant\030\003 \001(\0162\014.pb.QUADRANT\"\345\001\n\004gate\022\013\n\003neg\030"
  "\001 \001(\010\022\025\n\risTransformed\030\002 \001(\010\022\020\n\010isGained"
  "\030\003 \001(\010\022\033\n\004type\030\004 \001(\0162\r.pb.GATE_TYPE\022\031\n\002r"
  "g\030\005 \001(\0132\r.pb.rangeGate\022\033\n\002pg\030\006 \001(\0132\017.pb."
  "polygonGate\022\033\n\002eg\030\007 \001(\0132\017.pb.ellipseGate"
  "\022\030\n\002bg\030\010 \001(\0132\014.pb.boolGate\022\033\n\002cg\030\t \001(\0132\017"
  ".pb.clusterGate\"-\n\010POPSTATS\022\020\n\010statType\030"
  "\001 \001(\t\022\017\n\007statVal\030\002 \001(\002\"\223\001\n\020calibrationTa"
  "ble\022\r\n\001x\030\001 \003(\002B\002\020\001\022\r\n\001y\030\002 \003(\002B\002\020\001\022\r\n\001b\030\003"
  " \003(\002B\002\020\001\022\r\n\001c\030\004 \003(\002B\002\020\001\022\r\n\001d\030\005 \003(\002B\002\020\001\022\025"
  "\n\rspline_method\030\006 \001(\r\022\017\n\007caltype\030\007 \001(\t\022\014"
  "\n\004flag\030\010 \001(\010\"b\n\nbiexpTrans\022\024\n\014channelRan"
  "ge\030\001 \001(\r\022\013\n\003pos\030\002 \001(\002\022\013\n\003neg\030\003 \001(\002\022\022\n\nwi"
  "dthBasis\030\004 \001(\002\022\020\n\010maxValue\030\005 \001(\002\"P\n\013fasi"
  "nhTrans\022\016\n\006length\030\001 \001(\002\022\020\n\010maxRange\030\002 \001("
  "\002\022\t\n\001T\030\003 \001(\002\022\t\n\001A\030\004 \001(\002\022\t\n\001M\030\005 \001(\002\"D\n\nsc"
  "aleTrans\022\024\n\014scale_factor\030\001 \001(\002\022\017\n\007t_scal"
  "e\030\002 \001(\002\022\017\n\007r_scale\030\003 \001(\002\"%\n\tflinTrans\022\013\n"
  "\003min\030\001 \001(\002\022\013\n\003max\030\002 \001(\002\"D\n\010logTrans\022\016\n\006o"
  "ffset\030\001 \001(\002\022\016\n\006decade\030\002 \001(\002\022\t\n\001T\030\003 \001(\002\022\r"
  "\n\005scale\030\004 \001(\002\"$\n\014logGML2Trans\022\t\n\001T\030\001 \001(\002"
  "\022\t\n\001M\030\002 \001(\002\"k\n\014logicleTrans\022\t\n\001T\030\001 \001(\002\022\t"
  "\n\001W\030\002 \001(\002\022\t\n\001M\030\003 \001(\002\022\t\n\001A\030\004 \001(\002\022\014\n\004bins\030"
  "\005 \001(\002\022\016\n\006isGml2\030\006 \001(\010\022\021\n\tisInverse\030\007 \001(\010"
  "\"\373\002\n\016transformation\022$\n\006calTbl\030\001 \001(\0132\024.pb"
  ".calibrationTable\022\022\n\nisGateOnly\030\002 \001(\010\022\014\n"
  "\004name\030\004 \001(\t\022\017\n\007channel\030\005 \001(\t\022\022\n\nisComput"
  "ed\030\006 \001(\010\022\014\n\004type\030\014 \001(\r\022\"\n\ntrans_type\030\003 \001"
  "(\0162\016.pb.TRANS_TYPE\022\032\n\002bt\030\007 \001(\0132\016.pb.biex"
  "pTrans\022\030\n\002lt\030\010 \001(\0132\014.pb.logTrans\022\032\n\003flt\030"
  "\t \001(\0132\r.pb.flinTrans\022\032\n\002st\030\n \001(\0132\016.pb.sc"
  "aleTrans\022\033\n\002ft\030\013 \001(\0132\017.pb.fasinhTrans\022\035\n"
  "\003lgt\030\r \001(\0132\020.pb.logicleTrans\022 \n\006lgml2t\030\016"
  " \001(\0132\020.pb.logGML2Trans\"T\n\ntrans_pair\022\014\n\004"
  "name\030\001 \001(\t\022\025\n\rtrans_address\030\002 \001(\004\022!\n\005tra"
  "ns\030\003 \001(\0132\022.pb.transformation\"S\n\013trans_lo"
  "cal\022\032\n\002tp\030\001 \003(\0132\016.pb.trans_pair\022\021\n\tgroup"
  "Name\030\002 \001(\t\022\025\n\tsampleIDs\030\003 \003(\rB\002\020\001\"\\\n\nPOP"
  "INDICES\022\017\n\007nEvents\030\001 \001(\r\022\035\n\007indtype\030\002 \001("
  "\0162\014.pb.ind_type\022\020\n\004iInd\030\003 \003(\rB\002\020\001\022\014\n\004bIn"
  "d\030\004 \001(\014\"\255\001\n\016nodeProperties\022\020\n\010thisName\030\001"
  " \001(\t\022\035\n\007fjStats\030\002 \003(\0132\014.pb.POPSTATS\022\035\n\007f"
  "cStats\030\003 \003(\0132\014.pb.POPSTATS\022\016\n\006hidden\030\004 \001"
  "(\010\022\037\n\007indices\030\005 \001(\0132\016.pb.POPINDICES\022\032\n\010t"
  "hisGate\030\006 \001(\0132\010.pb.gate\"=\n\ttreeNodes\022 \n\004"
  "node\030\001 \001(\0132\022.pb.nodeProperties\022\016\n\006parent"
  "\030\002 \001(\r\"-\n\016populationTree\022\033\n\004node\030\001 \003(\0132\r"
  ".pb.treeNodes\"\207\001\n\004COMP\022\013\n\003cid\030\001 \001(\t\022\016\n\006p"
  "refix\030\002 \001(\t\022\016\n\006suffix\030\003 \001(\t\022\014\n\004name\030\004 \001("
  "\t\022\017\n\007comment\030\005 \001(\t\022\016\n\006marker\030\006 \003(\t\022\021\n\tsp"
  "illOver\030\007 \003(\002\022\020\n\010detector\030\010 \003(\t\"_\n\005PARAM"
  "\022\r\n\005param\030\001 \001(\t\022\013\n\003log\030\002 \001(\010\022\r\n\005range\030\003 "
  "\001(\r\022\021\n\thighValue\030\004 \001(\r\022\030\n\020calibrationInd"
  "ex\030\005 \001(\r\"\271\001\n\017GatingHierarchy\022 \n\004tree\030\002 \001"
  "(\0132\022.pb.populationTree\022\026\n\004comp\030\001 \001(\0132\010.p"
  "b.COMP\022\020\n\010isLoaded\030\003 \001(\010\022\034\n\ttransFlag\030\004 "
  "\003(\0132\t.pb.PARAM\022\036\n\005trans\030\005 \001(\0132\017.pb.trans"
  "_local\022\034\n\005frame\030\006 \001(\0132\r.pb.CytoFrame\"\032\n\t"
  "CytoFrame\022\r\n\005is_h5\030\001 \001(\010\"E\n\tTRANS_TBL\022\025\n"
  "\rtrans_address\030\001 \001(\004\022!\n\005trans\030\002 \001(\0132\022.pb"
  ".transformation\"\340\001\n\tGatingSet\022 \n\ttrans_t"
  "bl\030\002 \003(\0132\r.pb.TRANS_TBL\022\022\n\nsampleName\030\001 "
  "\003(\t\022\030\n\020globalBiExpTrans\030\003 \001(\004\022\026\n\016globalL"
  "inTrans\030\004 \001(\004\022\037\n\006gTrans\030\005 \003(\0132\017.pb.trans"
  "_local\022\014\n\004guid\030\006 \001(\t\022\026\n\016cytolib_verion\030\007"
  " \001(\t\022\021\n\tpb_verion\030\010 \001(\t\022\021\n\th5_verion\030\t \001"
  "(\t*=\n\010QUADRANT\022\021\n\rQ_UNSPECIFIED\020\000\022\006\n\002Q1\020"
  "\001\022\006\n\002Q2\020\002\022\006\n\002Q3\020\003\022\006\n\002Q4\020\004*\272\001\n\tGATE_TYPE\022"
  "\024\n\020GATE_UNSPECIFIED\020\000\022\020\n\014POLYGON_GATE\020\001\022"
  "\016\n\nRANGE_GATE\020\002\022\r\n\tBOOL_GATE\020\003\022\020\n\014ELLIPS"
  "E_GATE\020\004\022\r\n\tRECT_GATE\020\005\022\020\n\014LOGICAL_GATE\020"
  "\006\022\022\n\016ELLIPSOID_GATE\020\007\022\020\n\014CLUSTER_GATE\020\010\022"
  "\r\n\tQUAD_GATE\020\t*\'\n\010ind_type\022\010\n\004BOOL\020\000\022\007\n\003"
  "INT\020\001\022\010\n\004ROOT\020\002*\214\001\n\nTRANS_TYPE\022\r\n\tPB_CAL"
  "TBL\020\000\022\n\n\006PB_LOG\020\001\022\n\n\006PB_LIN\020\002\022\013\n\007PB_FLIN"
  "\020\003\022\016\n\nPB_FASIGNH\020\004\022\014\n\010PB_BIEXP\020\005\022\016\n\nPB_L"
  "OGICLE\020\006\022\016\n\nPB_LOGGML2\020\007\022\014\n\010PB_SCALE\020\010b\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_GatingSet_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_GatingSet_2eproto_sccs[33] = {
  &scc_info_BOOL_GATE_OP_GatingSet_2eproto.base,
  &scc_info_COMP_GatingSet_2eproto.base,
  &scc_info_CytoFrame_GatingSet_2eproto.base,
  &scc_info_GatingHierarchy_GatingSet_2eproto.base,
  &scc_info_GatingSet_GatingSet_2eproto.base,
  &scc_info_PARAM_GatingSet_2eproto.base,
  &scc_info_POPINDICES_GatingSet_2eproto.base,
  &scc_info_POPSTATS_GatingSet_2eproto.base,
  &scc_info_TRANS_TBL_GatingSet_2eproto.base,
  &scc_info_biexpTrans_GatingSet_2eproto.base,
  &scc_info_boolGate_GatingSet_2eproto.base,
  &scc_info_calibrationTable_GatingSet_2eproto.base,
  &scc_info_clusterGate_GatingSet_2eproto.base,
  &scc_info_coordinate_GatingSet_2eproto.base,
  &scc_info_ellipseGate_GatingSet_2eproto.base,
  &scc_info_fasinhTrans_GatingSet_2eproto.base,
  &scc_info_flinTrans_GatingSet_2eproto.base,
  &scc_info_gate_GatingSet_2eproto.base,
  &scc_info_logGML2Trans_GatingSet_2eproto.base,
  &scc_info_logTrans_GatingSet_2eproto.base,
  &scc_info_logicleTrans_GatingSet_2eproto.base,
  &scc_info_nodeProperties_GatingSet_2eproto.base,
  &scc_info_paramPoly_GatingSet_2eproto.base,
  &scc_info_paramRange_GatingSet_2eproto.base,
  &scc_info_polygonGate_GatingSet_2eproto.base,
  &scc_info_populationTree_GatingSet_2eproto.base,
  &scc_info_quadGate_GatingSet_2eproto.base,
  &scc_info_rangeGate_GatingSet_2eproto.base,
  &scc_info_scaleTrans_GatingSet_2eproto.base,
  &scc_info_trans_local_GatingSet_2eproto.base,
  &scc_info_trans_pair_GatingSet_2eproto.base,
  &scc_info_transformation_GatingSet_2eproto.base,
  &scc_info_treeNodes_GatingSet_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_GatingSet_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GatingSet_2eproto = {
  false, false, descriptor_table_protodef_GatingSet_2eproto, "GatingSet.proto", 3686,
  &descriptor_table_GatingSet_2eproto_once, descriptor_table_GatingSet_2eproto_sccs, descriptor_table_GatingSet_2eproto_deps, 33, 0,
  schemas, file_default_instances, TableStruct_GatingSet_2eproto::offsets,
  file_level_metadata_GatingSet_2eproto, 33, file_level_enum_descriptors_GatingSet_2eproto, file_level_service_descriptors_GatingSet_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_GatingSet_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_GatingSet_2eproto)), true);
namespace pb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QUADRANT_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_GatingSet_2eproto);
  return file_level_enum_descriptors_GatingSet_2eproto[0];
}
bool QUADRANT_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GATE_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_GatingSet_2eproto);
  return file_level_enum_descriptors_GatingSet_2eproto[1];
}
bool GATE_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ind_type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_GatingSet_2eproto);
  return file_level_enum_descriptors_GatingSet_2eproto[2];
}
bool ind_type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TRANS_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_GatingSet_2eproto);
  return file_level_enum_descriptors_GatingSet_2eproto[3];
}
bool TRANS_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void paramRange::InitAsDefaultInstance() {
}
class paramRange::_Internal {
 public:
};

paramRange::paramRange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.paramRange)
}
paramRange::paramRange(const paramRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&min_, &from.min_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&min_)) + sizeof(max_));
  // @@protoc_insertion_point(copy_constructor:pb.paramRange)
}

void paramRange::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_paramRange_GatingSet_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_) -
      reinterpret_cast<char*>(&min_)) + sizeof(max_));
}

paramRange::~paramRange() {
  // @@protoc_insertion_point(destructor:pb.paramRange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void paramRange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void paramRange::ArenaDtor(void* object) {
  paramRange* _this = reinterpret_cast< paramRange* >(object);
  (void)_this;
}
void paramRange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void paramRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const paramRange& paramRange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_paramRange_GatingSet_2eproto.base);
  return *internal_default_instance();
}


void paramRange::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.paramRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_) -
      reinterpret_cast<char*>(&min_)) + sizeof(max_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* paramRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.paramRange.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float min = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float max = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* paramRange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.paramRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.paramRange.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // float min = 2;
  if (!(this->min() <= 0 && this->min() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_min(), target);
  }

  // float max = 3;
  if (!(this->max() <= 0 && this->max() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.paramRange)
  return target;
}

size_t paramRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.paramRange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // float min = 2;
  if (!(this->min() <= 0 && this->min() >= 0)) {
    total_size += 1 + 4;
  }

  // float max = 3;
  if (!(this->max() <= 0 && this->max() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void paramRange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.paramRange)
  GOOGLE_DCHECK_NE(&from, this);
  const paramRange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<paramRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.paramRange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.paramRange)
    MergeFrom(*source);
  }
}

void paramRange::MergeFrom(const paramRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.paramRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (!(from.min() <= 0 && from.min() >= 0)) {
    _internal_set_min(from._internal_min());
  }
  if (!(from.max() <= 0 && from.max() >= 0)) {
    _internal_set_max(from._internal_max());
  }
}

void paramRange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.paramRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void paramRange::CopyFrom(const paramRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.paramRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool paramRange::IsInitialized() const {
  return true;
}

void paramRange::InternalSwap(paramRange* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(paramRange, max_)
      + sizeof(paramRange::max_)
      - PROTOBUF_FIELD_OFFSET(paramRange, min_)>(
          reinterpret_cast<char*>(&min_),
          reinterpret_cast<char*>(&other->min_));
}

::PROTOBUF_NAMESPACE_ID::Metadata paramRange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void rangeGate::InitAsDefaultInstance() {
  ::pb::_rangeGate_default_instance_._instance.get_mutable()->param_ = const_cast< ::pb::paramRange*>(
      ::pb::paramRange::internal_default_instance());
}
class rangeGate::_Internal {
 public:
  static const ::pb::paramRange& param(const rangeGate* msg);
};

const ::pb::paramRange&
rangeGate::_Internal::param(const rangeGate* msg) {
  return *msg->param_;
}
rangeGate::rangeGate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.rangeGate)
}
rangeGate::rangeGate(const rangeGate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_param()) {
    param_ = new ::pb::paramRange(*from.param_);
  } else {
    param_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb.rangeGate)
}

void rangeGate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_rangeGate_GatingSet_2eproto.base);
  param_ = nullptr;
}

rangeGate::~rangeGate() {
  // @@protoc_insertion_point(destructor:pb.rangeGate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void rangeGate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete param_;
}

void rangeGate::ArenaDtor(void* object) {
  rangeGate* _this = reinterpret_cast< rangeGate* >(object);
  (void)_this;
}
void rangeGate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void rangeGate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const rangeGate& rangeGate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_rangeGate_GatingSet_2eproto.base);
  return *internal_default_instance();
}


void rangeGate::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.rangeGate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* rangeGate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.paramRange param = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* rangeGate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.rangeGate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.paramRange param = 1;
  if (this->has_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::param(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.rangeGate)
  return target;
}

size_t rangeGate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.rangeGate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.paramRange param = 1;
  if (this->has_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *param_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void rangeGate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.rangeGate)
  GOOGLE_DCHECK_NE(&from, this);
  const rangeGate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<rangeGate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.rangeGate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.rangeGate)
    MergeFrom(*source);
  }
}

void rangeGate::MergeFrom(const rangeGate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.rangeGate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_param()) {
    _internal_mutable_param()->::pb::paramRange::MergeFrom(from._internal_param());
  }
}

void rangeGate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.rangeGate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rangeGate::CopyFrom(const rangeGate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.rangeGate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rangeGate::IsInitialized() const {
  return true;
}

void rangeGate::InternalSwap(rangeGate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(param_, other->param_);
}

::PROTOBUF_NAMESPACE_ID::Metadata rangeGate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void paramPoly::InitAsDefaultInstance() {
}
class paramPoly::_Internal {
 public:
};

paramPoly::paramPoly(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  params_(arena),
  vertices_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.paramPoly)
}
paramPoly::paramPoly(const paramPoly& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      params_(from.params_),
      vertices_(from.vertices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.paramPoly)
}

void paramPoly::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_paramPoly_GatingSet_2eproto.base);
}

paramPoly::~paramPoly() {
  // @@protoc_insertion_point(destructor:pb.paramPoly)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void paramPoly::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void paramPoly::ArenaDtor(void* object) {
  paramPoly* _this = reinterpret_cast< paramPoly* >(object);
  (void)_this;
}
void paramPoly::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void paramPoly::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const paramPoly& paramPoly::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_paramPoly_GatingSet_2eproto.base);
  return *internal_default_instance();
}


void paramPoly::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.paramPoly)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  params_.Clear();
  vertices_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* paramPoly::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string params = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_params();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.paramPoly.params"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pb.coordinate vertices = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vertices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* paramPoly::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.paramPoly)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string params = 1;
  for (int i = 0, n = this->_internal_params_size(); i < n; i++) {
    const auto& s = this->_internal_params(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.paramPoly.params");
    target = stream->WriteString(1, s, target);
  }

  // repeated .pb.coordinate vertices = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vertices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_vertices(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.paramPoly)
  return target;
}

size_t paramPoly::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.paramPoly)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string params = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(params_.size());
  for (int i = 0, n = params_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      params_.Get(i));
  }

  // repeated .pb.coordinate vertices = 2;
  total_size += 1UL * this->_internal_vertices_size();
  for (const auto& msg : this->vertices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void paramPoly::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.paramPoly)
  GOOGLE_DCHECK_NE(&from, this);
  const paramPoly* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<paramPoly>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.paramPoly)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.paramPoly)
    MergeFrom(*source);
  }
}

void paramPoly::MergeFrom(const paramPoly& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.paramPoly)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  params_.MergeFrom(from.params_);
  vertices_.MergeFrom(from.vertices_);
}

void paramPoly::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.paramPoly)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void paramPoly::CopyFrom(const paramPoly& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.paramPoly)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool paramPoly::IsInitialized() const {
  return true;
}

void paramPoly::InternalSwap(paramPoly* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  params_.InternalSwap(&other->params_);
  vertices_.InternalSwap(&other->vertices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata paramPoly::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void polygonGate::InitAsDefaultInstance() {
  ::pb::_polygonGate_default_instance_._instance.get_mutable()->param_ = const_cast< ::pb::paramPoly*>(
      ::pb::paramPoly::internal_default_instance());
  ::pb::_polygonGate_default_instance_._instance.get_mutable()->qg_ = const_cast< ::pb::quadGate*>(
      ::pb::quadGate::internal_default_instance());
}
class polygonGate::_Internal {
 public:
  static const ::pb::paramPoly& param(const polygonGate* msg);
  static const ::pb::quadGate& qg(const polygonGate* msg);
};

const ::pb::paramPoly&
polygonGate::_Internal::param(const polygonGate* msg) {
  return *msg->param_;
}
const ::pb::quadGate&
polygonGate::_Internal::qg(const polygonGate* msg) {
  return *msg->qg_;
}
polygonGate::polygonGate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.polygonGate)
}
polygonGate::polygonGate(const polygonGate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_param()) {
    param_ = new ::pb::paramPoly(*from.param_);
  } else {
    param_ = nullptr;
  }
  if (from._internal_has_qg()) {
    qg_ = new ::pb::quadGate(*from.qg_);
  } else {
    qg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb.polygonGate)
}

void polygonGate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_polygonGate_GatingSet_2eproto.base);
  ::memset(&param_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&qg_) -
      reinterpret_cast<char*>(&param_)) + sizeof(qg_));
}

polygonGate::~polygonGate() {
  // @@protoc_insertion_point(destructor:pb.polygonGate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void polygonGate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete param_;
  if (this != internal_default_instance()) delete qg_;
}

void polygonGate::ArenaDtor(void* object) {
  polygonGate* _this = reinterpret_cast< polygonGate* >(object);
  (void)_this;
}
void polygonGate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void polygonGate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const polygonGate& polygonGate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_polygonGate_GatingSet_2eproto.base);
  return *internal_default_instance();
}


void polygonGate::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.polygonGate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
  if (GetArena() == nullptr && qg_ != nullptr) {
    delete qg_;
  }
  qg_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* polygonGate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.paramPoly param = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.quadGate qg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_qg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* polygonGate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.polygonGate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.paramPoly param = 1;
  if (this->has_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::param(this), target, stream);
  }

  // .pb.quadGate qg = 2;
  if (this->has_qg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::qg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.polygonGate)
  return target;
}

size_t polygonGate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.polygonGate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.paramPoly param = 1;
  if (this->has_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *param_);
  }

  // .pb.quadGate qg = 2;
  if (this->has_qg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *qg_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void polygonGate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.polygonGate)
  GOOGLE_DCHECK_NE(&from, this);
  const polygonGate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<polygonGate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.polygonGate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.polygonGate)
    MergeFrom(*source);
  }
}

void polygonGate::MergeFrom(const polygonGate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.polygonGate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_param()) {
    _internal_mutable_param()->::pb::paramPoly::MergeFrom(from._internal_param());
  }
  if (from.has_qg()) {
    _internal_mutable_qg()->::pb::quadGate::MergeFrom(from._internal_qg());
  }
}

void polygonGate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.polygonGate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void polygonGate::CopyFrom(const polygonGate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.polygonGate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool polygonGate::IsInitialized() const {
  return true;
}

void polygonGate::InternalSwap(polygonGate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(polygonGate, qg_)
      + sizeof(polygonGate::qg_)
      - PROTOBUF_FIELD_OFFSET(polygonGate, param_)>(
          reinterpret_cast<char*>(&param_),
          reinterpret_cast<char*>(&other->param_));
}

::PROTOBUF_NAMESPACE_ID::Metadata polygonGate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void coordinate::InitAsDefaultInstance() {
}
class coordinate::_Internal {
 public:
};

coordinate::coordinate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.coordinate)
}
coordinate::coordinate(const coordinate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:pb.coordinate)
}

void coordinate::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

coordinate::~coordinate() {
  // @@protoc_insertion_point(destructor:pb.coordinate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void coordinate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void coordinate::ArenaDtor(void* object) {
  coordinate* _this = reinterpret_cast< coordinate* >(object);
  (void)_this;
}
void coordinate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void coordinate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const coordinate& coordinate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_coordinate_GatingSet_2eproto.base);
  return *internal_default_instance();
}


void coordinate::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.coordinate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* coordinate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* coordinate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.coordinate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.coordinate)
  return target;
}

size_t coordinate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.coordinate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void coordinate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.coordinate)
  GOOGLE_DCHECK_NE(&from, this);
  const coordinate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<coordinate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.coordinate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.coordinate)
    MergeFrom(*source);
  }
}

void coordinate::MergeFrom(const coordinate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.coordinate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
}

void coordinate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.coordinate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void coordinate::CopyFrom(const coordinate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.coordinate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool coordinate::IsInitialized() const {
  return true;
}

void coordinate::InternalSwap(coordinate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(coordinate, y_)
      + sizeof(coordinate::y_)
      - PROTOBUF_FIELD_OFFSET(coordinate, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata coordinate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ellipseGate::InitAsDefaultInstance() {
  ::pb::_ellipseGate_default_instance_._instance.get_mutable()->mu_ = const_cast< ::pb::coordinate*>(
      ::pb::coordinate::internal_default_instance());
}
class ellipseGate::_Internal {
 public:
  static const ::pb::coordinate& mu(const ellipseGate* msg);
};

const ::pb::coordinate&
ellipseGate::_Internal::mu(const ellipseGate* msg) {
  return *msg->mu_;
}
ellipseGate::ellipseGate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cov_(arena),
  antipodal_vertices_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.ellipseGate)
}
ellipseGate::ellipseGate(const ellipseGate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cov_(from.cov_),
      antipodal_vertices_(from.antipodal_vertices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mu()) {
    mu_ = new ::pb::coordinate(*from.mu_);
  } else {
    mu_ = nullptr;
  }
  dist_ = from.dist_;
  // @@protoc_insertion_point(copy_constructor:pb.ellipseGate)
}

void ellipseGate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ellipseGate_GatingSet_2eproto.base);
  ::memset(&mu_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dist_) -
      reinterpret_cast<char*>(&mu_)) + sizeof(dist_));
}

ellipseGate::~ellipseGate() {
  // @@protoc_insertion_point(destructor:pb.ellipseGate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ellipseGate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete mu_;
}

void ellipseGate::ArenaDtor(void* object) {
  ellipseGate* _this = reinterpret_cast< ellipseGate* >(object);
  (void)_this;
}
void ellipseGate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ellipseGate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ellipseGate& ellipseGate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ellipseGate_GatingSet_2eproto.base);
  return *internal_default_instance();
}


void ellipseGate::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ellipseGate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cov_.Clear();
  antipodal_vertices_.Clear();
  if (GetArena() == nullptr && mu_ != nullptr) {
    delete mu_;
  }
  mu_ = nullptr;
  dist_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ellipseGate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.coordinate mu = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mu(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.coordinate cov = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cov(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pb.coordinate antipodal_vertices = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_antipodal_vertices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // float dist = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          dist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ellipseGate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ellipseGate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.coordinate mu = 1;
  if (this->has_mu()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::mu(this), target, stream);
  }

  // repeated .pb.coordinate cov = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cov_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_cov(i), target, stream);
  }

  // repeated .pb.coordinate antipodal_vertices = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_antipodal_vertices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_antipodal_vertices(i), target, stream);
  }

  // float dist = 4;
  if (!(this->dist() <= 0 && this->dist() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_dist(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ellipseGate)
  return target;
}

size_t ellipseGate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ellipseGate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.coordinate cov = 2;
  total_size += 1UL * this->_internal_cov_size();
  for (const auto& msg : this->cov_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pb.coordinate antipodal_vertices = 3;
  total_size += 1UL * this->_internal_antipodal_vertices_size();
  for (const auto& msg : this->antipodal_vertices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .pb.coordinate mu = 1;
  if (this->has_mu()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mu_);
  }

  // float dist = 4;
  if (!(this->dist() <= 0 && this->dist() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ellipseGate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ellipseGate)
  GOOGLE_DCHECK_NE(&from, this);
  const ellipseGate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ellipseGate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ellipseGate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ellipseGate)
    MergeFrom(*source);
  }
}

void ellipseGate::MergeFrom(const ellipseGate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ellipseGate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cov_.MergeFrom(from.cov_);
  antipodal_vertices_.MergeFrom(from.antipodal_vertices_);
  if (from.has_mu()) {
    _internal_mutable_mu()->::pb::coordinate::MergeFrom(from._internal_mu());
  }
  if (!(from.dist() <= 0 && from.dist() >= 0)) {
    _internal_set_dist(from._internal_dist());
  }
}

void ellipseGate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ellipseGate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ellipseGate::CopyFrom(const ellipseGate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ellipseGate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ellipseGate::IsInitialized() const {
  return true;
}

void ellipseGate::InternalSwap(ellipseGate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cov_.InternalSwap(&other->cov_);
  antipodal_vertices_.InternalSwap(&other->antipodal_vertices_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ellipseGate, dist_)
      + sizeof(ellipseGate::dist_)
      - PROTOBUF_FIELD_OFFSET(ellipseGate, mu_)>(
          reinterpret_cast<char*>(&mu_),
          reinterpret_cast<char*>(&other->mu_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ellipseGate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BOOL_GATE_OP::InitAsDefaultInstance() {
}
class BOOL_GATE_OP::_Internal {
 public:
};

BOOL_GATE_OP::BOOL_GATE_OP(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  path_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.BOOL_GATE_OP)
}
BOOL_GATE_OP::BOOL_GATE_OP(const BOOL_GATE_OP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      path_(from.path_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&op_, &from.op_,
    static_cast<size_t>(reinterpret_cast<char*>(&isnot_) -
    reinterpret_cast<char*>(&op_)) + sizeof(isnot_));
  // @@protoc_insertion_point(copy_constructor:pb.BOOL_GATE_OP)
}

void BOOL_GATE_OP::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BOOL_GATE_OP_GatingSet_2eproto.base);
  ::memset(&op_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isnot_) -
      reinterpret_cast<char*>(&op_)) + sizeof(isnot_));
}

BOOL_GATE_OP::~BOOL_GATE_OP() {
  // @@protoc_insertion_point(destructor:pb.BOOL_GATE_OP)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BOOL_GATE_OP::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BOOL_GATE_OP::ArenaDtor(void* object) {
  BOOL_GATE_OP* _this = reinterpret_cast< BOOL_GATE_OP* >(object);
  (void)_this;
}
void BOOL_GATE_OP::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BOOL_GATE_OP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BOOL_GATE_OP& BOOL_GATE_OP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BOOL_GATE_OP_GatingSet_2eproto.base);
  return *internal_default_instance();
}


void BOOL_GATE_OP::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.BOOL_GATE_OP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.Clear();
  ::memset(&op_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isnot_) -
      reinterpret_cast<char*>(&op_)) + sizeof(isnot_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BOOL_GATE_OP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_path();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.BOOL_GATE_OP.path"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 op = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          op_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isNot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          isnot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BOOL_GATE_OP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BOOL_GATE_OP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string path = 1;
  for (int i = 0, n = this->_internal_path_size(); i < n; i++) {
    const auto& s = this->_internal_path(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.BOOL_GATE_OP.path");
    target = stream->WriteString(1, s, target);
  }

  // uint32 op = 2;
  if (this->op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_op(), target);
  }

  // bool isNot = 3;
  if (this->isnot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_isnot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BOOL_GATE_OP)
  return target;
}

size_t BOOL_GATE_OP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.BOOL_GATE_OP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string path = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(path_.size());
  for (int i = 0, n = path_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      path_.Get(i));
  }

  // uint32 op = 2;
  if (this->op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_op());
  }

  // bool isNot = 3;
  if (this->isnot() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BOOL_GATE_OP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.BOOL_GATE_OP)
  GOOGLE_DCHECK_NE(&from, this);
  const BOOL_GATE_OP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BOOL_GATE_OP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.BOOL_GATE_OP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.BOOL_GATE_OP)
    MergeFrom(*source);
  }
}

void BOOL_GATE_OP::MergeFrom(const BOOL_GATE_OP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.BOOL_GATE_OP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  path_.MergeFrom(from.path_);
  if (from.op() != 0) {
    _internal_set_op(from._internal_op());
  }
  if (from.isnot() != 0) {
    _internal_set_isnot(from._internal_isnot());
  }
}

void BOOL_GATE_OP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.BOOL_GATE_OP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BOOL_GATE_OP::CopyFrom(const BOOL_GATE_OP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.BOOL_GATE_OP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BOOL_GATE_OP::IsInitialized() const {
  return true;
}

void BOOL_GATE_OP::InternalSwap(BOOL_GATE_OP* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  path_.InternalSwap(&other->path_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BOOL_GATE_OP, isnot_)
      + sizeof(BOOL_GATE_OP::isnot_)
      - PROTOBUF_FIELD_OFFSET(BOOL_GATE_OP, op_)>(
          reinterpret_cast<char*>(&op_),
          reinterpret_cast<char*>(&other->op_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BOOL_GATE_OP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void boolGate::InitAsDefaultInstance() {
}
class boolGate::_Internal {
 public:
};

boolGate::boolGate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  boolopspec_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.boolGate)
}
boolGate::boolGate(const boolGate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      boolopspec_(from.boolopspec_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.boolGate)
}

void boolGate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_boolGate_GatingSet_2eproto.base);
}

boolGate::~boolGate() {
  // @@protoc_insertion_point(destructor:pb.boolGate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void boolGate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void boolGate::ArenaDtor(void* object) {
  boolGate* _this = reinterpret_cast< boolGate* >(object);
  (void)_this;
}
void boolGate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void boolGate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const boolGate& boolGate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_boolGate_GatingSet_2eproto.base);
  return *internal_default_instance();
}


void boolGate::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.boolGate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  boolopspec_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* boolGate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.BOOL_GATE_OP boolOpSpec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_boolopspec(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* boolGate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.boolGate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.BOOL_GATE_OP boolOpSpec = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_boolopspec_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_boolopspec(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.boolGate)
  return target;
}

size_t boolGate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.boolGate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.BOOL_GATE_OP boolOpSpec = 1;
  total_size += 1UL * this->_internal_boolopspec_size();
  for (const auto& msg : this->boolopspec_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void boolGate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.boolGate)
  GOOGLE_DCHECK_NE(&from, this);
  const boolGate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<boolGate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.boolGate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.boolGate)
    MergeFrom(*source);
  }
}

void boolGate::MergeFrom(const boolGate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.boolGate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  boolopspec_.MergeFrom(from.boolopspec_);
}

void boolGate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.boolGate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void boolGate::CopyFrom(const boolGate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.boolGate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool boolGate::IsInitialized() const {
  return true;
}

void boolGate::InternalSwap(boolGate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  boolopspec_.InternalSwap(&other->boolopspec_);
}

::PROTOBUF_NAMESPACE_ID::Metadata boolGate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void clusterGate::InitAsDefaultInstance() {
}
class clusterGate::_Internal {
 public:
};

clusterGate::clusterGate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.clusterGate)
}
clusterGate::clusterGate(const clusterGate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cluster_method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cluster_method().empty()) {
    cluster_method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cluster_method(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pb.clusterGate)
}

void clusterGate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_clusterGate_GatingSet_2eproto.base);
  cluster_method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

clusterGate::~clusterGate() {
  // @@protoc_insertion_point(destructor:pb.clusterGate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void clusterGate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  cluster_method_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void clusterGate::ArenaDtor(void* object) {
  clusterGate* _this = reinterpret_cast< clusterGate* >(object);
  (void)_this;
}
void clusterGate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void clusterGate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const clusterGate& clusterGate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_clusterGate_GatingSet_2eproto.base);
  return *internal_default_instance();
}


void clusterGate::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.clusterGate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cluster_method_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* clusterGate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string cluster_method = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_cluster_method();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.clusterGate.cluster_method"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* clusterGate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.clusterGate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cluster_method = 1;
  if (this->cluster_method().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cluster_method().data(), static_cast<int>(this->_internal_cluster_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.clusterGate.cluster_method");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cluster_method(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.clusterGate)
  return target;
}

size_t clusterGate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.clusterGate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cluster_method = 1;
  if (this->cluster_method().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cluster_method());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void clusterGate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.clusterGate)
  GOOGLE_DCHECK_NE(&from, this);
  const clusterGate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<clusterGate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.clusterGate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.clusterGate)
    MergeFrom(*source);
  }
}

void clusterGate::MergeFrom(const clusterGate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.clusterGate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cluster_method().size() > 0) {
    _internal_set_cluster_method(from._internal_cluster_method());
  }
}

void clusterGate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.clusterGate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void clusterGate::CopyFrom(const clusterGate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.clusterGate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool clusterGate::IsInitialized() const {
  return true;
}

void clusterGate::InternalSwap(clusterGate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cluster_method_.Swap(&other->cluster_method_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata clusterGate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void quadGate::InitAsDefaultInstance() {
}
class quadGate::_Internal {
 public:
};

quadGate::quadGate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.quadGate)
}
quadGate::quadGate(const quadGate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uid().empty()) {
    uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_uid(),
      GetArena());
  }
  quadrant_ = from.quadrant_;
  // @@protoc_insertion_point(copy_constructor:pb.quadGate)
}

void quadGate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_quadGate_GatingSet_2eproto.base);
  uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  quadrant_ = 0;
}

quadGate::~quadGate() {
  // @@protoc_insertion_point(destructor:pb.quadGate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void quadGate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  uid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void quadGate::ArenaDtor(void* object) {
  quadGate* _this = reinterpret_cast< quadGate* >(object);
  (void)_this;
}
void quadGate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void quadGate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const quadGate& quadGate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_quadGate_GatingSet_2eproto.base);
  return *internal_default_instance();
}


void quadGate::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.quadGate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  quadrant_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* quadGate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_uid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.quadGate.uid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.QUADRANT quadrant = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_quadrant(static_cast<::pb::QUADRANT>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* quadGate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.quadGate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uid = 1;
  if (this->uid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.quadGate.uid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uid(), target);
  }

  // .pb.QUADRANT quadrant = 3;
  if (this->quadrant() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_quadrant(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.quadGate)
  return target;
}

size_t quadGate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.quadGate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uid = 1;
  if (this->uid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  // .pb.QUADRANT quadrant = 3;
  if (this->quadrant() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_quadrant());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void quadGate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.quadGate)
  GOOGLE_DCHECK_NE(&from, this);
  const quadGate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<quadGate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.quadGate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.quadGate)
    MergeFrom(*source);
  }
}

void quadGate::MergeFrom(const quadGate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.quadGate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uid().size() > 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.quadrant() != 0) {
    _internal_set_quadrant(from._internal_quadrant());
  }
}

void quadGate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.quadGate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void quadGate::CopyFrom(const quadGate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.quadGate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool quadGate::IsInitialized() const {
  return true;
}

void quadGate::InternalSwap(quadGate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  uid_.Swap(&other->uid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(quadrant_, other->quadrant_);
}

::PROTOBUF_NAMESPACE_ID::Metadata quadGate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void gate::InitAsDefaultInstance() {
  ::pb::_gate_default_instance_._instance.get_mutable()->rg_ = const_cast< ::pb::rangeGate*>(
      ::pb::rangeGate::internal_default_instance());
  ::pb::_gate_default_instance_._instance.get_mutable()->pg_ = const_cast< ::pb::polygonGate*>(
      ::pb::polygonGate::internal_default_instance());
  ::pb::_gate_default_instance_._instance.get_mutable()->eg_ = const_cast< ::pb::ellipseGate*>(
      ::pb::ellipseGate::internal_default_instance());
  ::pb::_gate_default_instance_._instance.get_mutable()->bg_ = const_cast< ::pb::boolGate*>(
      ::pb::boolGate::internal_default_instance());
  ::pb::_gate_default_instance_._instance.get_mutable()->cg_ = const_cast< ::pb::clusterGate*>(
      ::pb::clusterGate::internal_default_instance());
}
class gate::_Internal {
 public:
  static const ::pb::rangeGate& rg(const gate* msg);
  static const ::pb::polygonGate& pg(const gate* msg);
  static const ::pb::ellipseGate& eg(const gate* msg);
  static const ::pb::boolGate& bg(const gate* msg);
  static const ::pb::clusterGate& cg(const gate* msg);
};

const ::pb::rangeGate&
gate::_Internal::rg(const gate* msg) {
  return *msg->rg_;
}
const ::pb::polygonGate&
gate::_Internal::pg(const gate* msg) {
  return *msg->pg_;
}
const ::pb::ellipseGate&
gate::_Internal::eg(const gate* msg) {
  return *msg->eg_;
}
const ::pb::boolGate&
gate::_Internal::bg(const gate* msg) {
  return *msg->bg_;
}
const ::pb::clusterGate&
gate::_Internal::cg(const gate* msg) {
  return *msg->cg_;
}
gate::gate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.gate)
}
gate::gate(const gate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rg()) {
    rg_ = new ::pb::rangeGate(*from.rg_);
  } else {
    rg_ = nullptr;
  }
  if (from._internal_has_pg()) {
    pg_ = new ::pb::polygonGate(*from.pg_);
  } else {
    pg_ = nullptr;
  }
  if (from._internal_has_eg()) {
    eg_ = new ::pb::ellipseGate(*from.eg_);
  } else {
    eg_ = nullptr;
  }
  if (from._internal_has_bg()) {
    bg_ = new ::pb::boolGate(*from.bg_);
  } else {
    bg_ = nullptr;
  }
  if (from._internal_has_cg()) {
    cg_ = new ::pb::clusterGate(*from.cg_);
  } else {
    cg_ = nullptr;
  }
  ::memcpy(&neg_, &from.neg_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&neg_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:pb.gate)
}

void gate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_gate_GatingSet_2eproto.base);
  ::memset(&rg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&rg_)) + sizeof(type_));
}

gate::~gate() {
  // @@protoc_insertion_point(destructor:pb.gate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void gate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete rg_;
  if (this != internal_default_instance()) delete pg_;
  if (this != internal_default_instance()) delete eg_;
  if (this != internal_default_instance()) delete bg_;
  if (this != internal_default_instance()) delete cg_;
}

void gate::ArenaDtor(void* object) {
  gate* _this = reinterpret_cast< gate* >(object);
  (void)_this;
}
void gate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void gate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const gate& gate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_gate_GatingSet_2eproto.base);
  return *internal_default_instance();
}


void gate::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.gate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && rg_ != nullptr) {
    delete rg_;
  }
  rg_ = nullptr;
  if (GetArena() == nullptr && pg_ != nullptr) {
    delete pg_;
  }
  pg_ = nullptr;
  if (GetArena() == nullptr && eg_ != nullptr) {
    delete eg_;
  }
  eg_ = nullptr;
  if (GetArena() == nullptr && bg_ != nullptr) {
    delete bg_;
  }
  bg_ = nullptr;
  if (GetArena() == nullptr && cg_ != nullptr) {
    delete cg_;
  }
  cg_ = nullptr;
  ::memset(&neg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&neg_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* gate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool neg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          neg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isTransformed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          istransformed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isGained = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          isgained_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.GATE_TYPE type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::pb::GATE_TYPE>(val));
        } else goto handle_unusual;
        continue;
      // .pb.rangeGate rg = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_rg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.polygonGate pg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_pg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.ellipseGate eg = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_eg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.boolGate bg = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_bg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.clusterGate cg = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_cg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* gate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.gate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool neg = 1;
  if (this->neg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_neg(), target);
  }

  // bool isTransformed = 2;
  if (this->istransformed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_istransformed(), target);
  }

  // bool isGained = 3;
  if (this->isgained() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_isgained(), target);
  }

  // .pb.GATE_TYPE type = 4;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  // .pb.rangeGate rg = 5;
  if (this->has_rg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::rg(this), target, stream);
  }

  // .pb.polygonGate pg = 6;
  if (this->has_pg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::pg(this), target, stream);
  }

  // .pb.ellipseGate eg = 7;
  if (this->has_eg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::eg(this), target, stream);
  }

  // .pb.boolGate bg = 8;
  if (this->has_bg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::bg(this), target, stream);
  }

  // .pb.clusterGate cg = 9;
  if (this->has_cg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::cg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.gate)
  return target;
}

size_t gate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.gate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.rangeGate rg = 5;
  if (this->has_rg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rg_);
  }

  // .pb.polygonGate pg = 6;
  if (this->has_pg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pg_);
  }

  // .pb.ellipseGate eg = 7;
  if (this->has_eg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *eg_);
  }

  // .pb.boolGate bg = 8;
  if (this->has_bg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bg_);
  }

  // .pb.clusterGate cg = 9;
  if (this->has_cg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cg_);
  }

  // bool neg = 1;
  if (this->neg() != 0) {
    total_size += 1 + 1;
  }

  // bool isTransformed = 2;
  if (this->istransformed() != 0) {
    total_size += 1 + 1;
  }

  // bool isGained = 3;
  if (this->isgained() != 0) {
    total_size += 1 + 1;
  }

  // .pb.GATE_TYPE type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void gate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.gate)
  GOOGLE_DCHECK_NE(&from, this);
  const gate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<gate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.gate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.gate)
    MergeFrom(*source);
  }
}

void gate::MergeFrom(const gate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.gate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_rg()) {
    _internal_mutable_rg()->::pb::rangeGate::MergeFrom(from._internal_rg());
  }
  if (from.has_pg()) {
    _internal_mutable_pg()->::pb::polygonGate::MergeFrom(from._internal_pg());
  }
  if (from.has_eg()) {
    _internal_mutable_eg()->::pb::ellipseGate::MergeFrom(from._internal_eg());
  }
  if (from.has_bg()) {
    _internal_mutable_bg()->::pb::boolGate::MergeFrom(from._internal_bg());
  }
  if (from.has_cg()) {
    _internal_mutable_cg()->::pb::clusterGate::MergeFrom(from._internal_cg());
  }
  if (from.neg() != 0) {
    _internal_set_neg(from._internal_neg());
  }
  if (from.istransformed() != 0) {
    _internal_set_istransformed(from._internal_istransformed());
  }
  if (from.isgained() != 0) {
    _internal_set_isgained(from._internal_isgained());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void gate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.gate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gate::CopyFrom(const gate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.gate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gate::IsInitialized() const {
  return true;
}

void gate::InternalSwap(gate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(gate, type_)
      + sizeof(gate::type_)
      - PROTOBUF_FIELD_OFFSET(gate, rg_)>(
          reinterpret_cast<char*>(&rg_),
          reinterpret_cast<char*>(&other->rg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata gate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void POPSTATS::InitAsDefaultInstance() {
}
class POPSTATS::_Internal {
 public:
};

POPSTATS::POPSTATS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.POPSTATS)
}
POPSTATS::POPSTATS(const POPSTATS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stattype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stattype().empty()) {
    stattype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_stattype(),
      GetArena());
  }
  statval_ = from.statval_;
  // @@protoc_insertion_point(copy_constructor:pb.POPSTATS)
}

void POPSTATS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_POPSTATS_GatingSet_2eproto.base);
  stattype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  statval_ = 0;
}

POPSTATS::~POPSTATS() {
  // @@protoc_insertion_point(destructor:pb.POPSTATS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void POPSTATS::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  stattype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void POPSTATS::ArenaDtor(void* object) {
  POPSTATS* _this = reinterpret_cast< POPSTATS* >(object);
  (void)_this;
}
void POPSTATS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void POPSTATS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const POPSTATS& POPSTATS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_POPSTATS_GatingSet_2eproto.base);
  return *internal_default_instance();
}


void POPSTATS::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.POPSTATS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stattype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  statval_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* POPSTATS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string statType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_stattype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.POPSTATS.statType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float statVal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          statval_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* POPSTATS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.POPSTATS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string statType = 1;
  if (this->stattype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stattype().data(), static_cast<int>(this->_internal_stattype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.POPSTATS.statType");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stattype(), target);
  }

  // float statVal = 2;
  if (!(this->statval() <= 0 && this->statval() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_statval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.POPSTATS)
  return target;
}

size_t POPSTATS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.POPSTATS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string statType = 1;
  if (this->stattype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stattype());
  }

  // float statVal = 2;
  if (!(this->statval() <= 0 && this->statval() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void POPSTATS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.POPSTATS)
  GOOGLE_DCHECK_NE(&from, this);
  const POPSTATS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<POPSTATS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.POPSTATS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.POPSTATS)
    MergeFrom(*source);
  }
}

void POPSTATS::MergeFrom(const POPSTATS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.POPSTATS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stattype().size() > 0) {
    _internal_set_stattype(from._internal_stattype());
  }
  if (!(from.statval() <= 0 && from.statval() >= 0)) {
    _internal_set_statval(from._internal_statval());
  }
}

void POPSTATS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.POPSTATS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void POPSTATS::CopyFrom(const POPSTATS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.POPSTATS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool POPSTATS::IsInitialized() const {
  return true;
}

void POPSTATS::InternalSwap(POPSTATS* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stattype_.Swap(&other->stattype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(statval_, other->statval_);
}

::PROTOBUF_NAMESPACE_ID::Metadata POPSTATS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void calibrationTable::InitAsDefaultInstance() {
}
class calibrationTable::_Internal {
 public:
};

calibrationTable::calibrationTable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  x_(arena),
  y_(arena),
  b_(arena),
  c_(arena),
  d_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.calibrationTable)
}
calibrationTable::calibrationTable(const calibrationTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      x_(from.x_),
      y_(from.y_),
      b_(from.b_),
      c_(from.c_),
      d_(from.d_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  caltype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_caltype().empty()) {
    caltype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_caltype(),
      GetArena());
  }
  ::memcpy(&spline_method_, &from.spline_method_,
    static_cast<size_t>(reinterpret_cast<char*>(&flag_) -
    reinterpret_cast<char*>(&spline_method_)) + sizeof(flag_));
  // @@protoc_insertion_point(copy_constructor:pb.calibrationTable)
}

void calibrationTable::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_calibrationTable_GatingSet_2eproto.base);
  caltype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&spline_method_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flag_) -
      reinterpret_cast<char*>(&spline_method_)) + sizeof(flag_));
}

calibrationTable::~calibrationTable() {
  // @@protoc_insertion_point(destructor:pb.calibrationTable)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void calibrationTable::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  caltype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void calibrationTable::ArenaDtor(void* object) {
  calibrationTable* _this = reinterpret_cast< calibrationTable* >(object);
  (void)_this;
}
void calibrationTable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void calibrationTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const calibrationTable& calibrationTable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_calibrationTable_GatingSet_2eproto.base);
  return *internal_default_instance();
}


void calibrationTable::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.calibrationTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  x_.Clear();
  y_.Clear();
  b_.Clear();
  c_.Clear();
  d_.Clear();
  caltype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&spline_method_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flag_) -
      reinterpret_cast<char*>(&spline_method_)) + sizeof(flag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* calibrationTable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float x = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_x(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_x(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float y = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_y(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_y(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float b = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_b(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          _internal_add_b(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float c = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_c(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          _internal_add_c(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float d = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_d(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45) {
          _internal_add_d(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 spline_method = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          spline_method_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string caltype = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_caltype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.calibrationTable.caltype"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool flag = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* calibrationTable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.calibrationTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float x = 1 [packed = true];
  if (this->_internal_x_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_x(), target);
  }

  // repeated float y = 2 [packed = true];
  if (this->_internal_y_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_y(), target);
  }

  // repeated float b = 3 [packed = true];
  if (this->_internal_b_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_b(), target);
  }

  // repeated float c = 4 [packed = true];
  if (this->_internal_c_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_c(), target);
  }

  // repeated float d = 5 [packed = true];
  if (this->_internal_d_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_d(), target);
  }

  // uint32 spline_method = 6;
  if (this->spline_method() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_spline_method(), target);
  }

  // string caltype = 7;
  if (this->caltype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_caltype().data(), static_cast<int>(this->_internal_caltype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.calibrationTable.caltype");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_caltype(), target);
  }

  // bool flag = 8;
  if (this->flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.calibrationTable)
  return target;
}

size_t calibrationTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.calibrationTable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float x = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_x_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _x_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float y = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_y_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _y_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float b = 3 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_b_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _b_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float c = 4 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_c_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _c_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float d = 5 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_d_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _d_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string caltype = 7;
  if (this->caltype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_caltype());
  }

  // uint32 spline_method = 6;
  if (this->spline_method() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_spline_method());
  }

  // bool flag = 8;
  if (this->flag() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void calibrationTable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.calibrationTable)
  GOOGLE_DCHECK_NE(&from, this);
  const calibrationTable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<calibrationTable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.calibrationTable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.calibrationTable)
    MergeFrom(*source);
  }
}

void calibrationTable::MergeFrom(const calibrationTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.calibrationTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  x_.MergeFrom(from.x_);
  y_.MergeFrom(from.y_);
  b_.MergeFrom(from.b_);
  c_.MergeFrom(from.c_);
  d_.MergeFrom(from.d_);
  if (from.caltype().size() > 0) {
    _internal_set_caltype(from._internal_caltype());
  }
  if (from.spline_method() != 0) {
    _internal_set_spline_method(from._internal_spline_method());
  }
  if (from.flag() != 0) {
    _internal_set_flag(from._internal_flag());
  }
}

void calibrationTable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.calibrationTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void calibrationTable::CopyFrom(const calibrationTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.calibrationTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool calibrationTable::IsInitialized() const {
  return true;
}

void calibrationTable::InternalSwap(calibrationTable* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  x_.InternalSwap(&other->x_);
  y_.InternalSwap(&other->y_);
  b_.InternalSwap(&other->b_);
  c_.InternalSwap(&other->c_);
  d_.InternalSwap(&other->d_);
  caltype_.Swap(&other->caltype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(calibrationTable, flag_)
      + sizeof(calibrationTable::flag_)
      - PROTOBUF_FIELD_OFFSET(calibrationTable, spline_method_)>(
          reinterpret_cast<char*>(&spline_method_),
          reinterpret_cast<char*>(&other->spline_method_));
}

::PROTOBUF_NAMESPACE_ID::Metadata calibrationTable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void biexpTrans::InitAsDefaultInstance() {
}
class biexpTrans::_Internal {
 public:
};

biexpTrans::biexpTrans(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.biexpTrans)
}
biexpTrans::biexpTrans(const biexpTrans& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channelrange_, &from.channelrange_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxvalue_) -
    reinterpret_cast<char*>(&channelrange_)) + sizeof(maxvalue_));
  // @@protoc_insertion_point(copy_constructor:pb.biexpTrans)
}

void biexpTrans::SharedCtor() {
  ::memset(&channelrange_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxvalue_) -
      reinterpret_cast<char*>(&channelrange_)) + sizeof(maxvalue_));
}

biexpTrans::~biexpTrans() {
  // @@protoc_insertion_point(destructor:pb.biexpTrans)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void biexpTrans::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void biexpTrans::ArenaDtor(void* object) {
  biexpTrans* _this = reinterpret_cast< biexpTrans* >(object);
  (void)_this;
}
void biexpTrans::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void biexpTrans::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const biexpTrans& biexpTrans::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_biexpTrans_GatingSet_2eproto.base);
  return *internal_default_instance();
}


void biexpTrans::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.biexpTrans)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channelrange_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxvalue_) -
      reinterpret_cast<char*>(&channelrange_)) + sizeof(maxvalue_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* biexpTrans::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 channelRange = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          channelrange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          pos_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float neg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          neg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float widthBasis = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          widthbasis_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float maxValue = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          maxvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* biexpTrans::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.biexpTrans)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channelRange = 1;
  if (this->channelrange() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channelrange(), target);
  }

  // float pos = 2;
  if (!(this->pos() <= 0 && this->pos() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_pos(), target);
  }

  // float neg = 3;
  if (!(this->neg() <= 0 && this->neg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_neg(), target);
  }

  // float widthBasis = 4;
  if (!(this->widthbasis() <= 0 && this->widthbasis() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_widthbasis(), target);
  }

  // float maxValue = 5;
  if (!(this->maxvalue() <= 0 && this->maxvalue() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_maxvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.biexpTrans)
  return target;
}

size_t biexpTrans::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.biexpTrans)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 channelRange = 1;
  if (this->channelrange() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_channelrange());
  }

  // float pos = 2;
  if (!(this->pos() <= 0 && this->pos() >= 0)) {
    total_size += 1 + 4;
  }

  // float neg = 3;
  if (!(this->neg() <= 0 && this->neg() >= 0)) {
    total_size += 1 + 4;
  }

  // float widthBasis = 4;
  if (!(this->widthbasis() <= 0 && this->widthbasis() >= 0)) {
    total_size += 1 + 4;
  }

  // float maxValue = 5;
  if (!(this->maxvalue() <= 0 && this->maxvalue() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void biexpTrans::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.biexpTrans)
  GOOGLE_DCHECK_NE(&from, this);
  const biexpTrans* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<biexpTrans>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.biexpTrans)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.biexpTrans)
    MergeFrom(*source);
  }
}

void biexpTrans::MergeFrom(const biexpTrans& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.biexpTrans)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channelrange() != 0) {
    _internal_set_channelrange(from._internal_channelrange());
  }
  if (!(from.pos() <= 0 && from.pos() >= 0)) {
    _internal_set_pos(from._internal_pos());
  }
  if (!(from.neg() <= 0 && from.neg() >= 0)) {
    _internal_set_neg(from._internal_neg());
  }
  if (!(from.widthbasis() <= 0 && from.widthbasis() >= 0)) {
    _internal_set_widthbasis(from._internal_widthbasis());
  }
  if (!(from.maxvalue() <= 0 && from.maxvalue() >= 0)) {
    _internal_set_maxvalue(from._internal_maxvalue());
  }
}

void biexpTrans::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.biexpTrans)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void biexpTrans::CopyFrom(const biexpTrans& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.biexpTrans)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool biexpTrans::IsInitialized() const {
  return true;
}

void biexpTrans::InternalSwap(biexpTrans* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(biexpTrans, maxvalue_)
      + sizeof(biexpTrans::maxvalue_)
      - PROTOBUF_FIELD_OFFSET(biexpTrans, channelrange_)>(
          reinterpret_cast<char*>(&channelrange_),
          reinterpret_cast<char*>(&other->channelrange_));
}

::PROTOBUF_NAMESPACE_ID::Metadata biexpTrans::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void fasinhTrans::InitAsDefaultInstance() {
}
class fasinhTrans::_Internal {
 public:
};

fasinhTrans::fasinhTrans(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.fasinhTrans)
}
fasinhTrans::fasinhTrans(const fasinhTrans& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&length_, &from.length_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_) -
    reinterpret_cast<char*>(&length_)) + sizeof(m_));
  // @@protoc_insertion_point(copy_constructor:pb.fasinhTrans)
}

void fasinhTrans::SharedCtor() {
  ::memset(&length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_) -
      reinterpret_cast<char*>(&length_)) + sizeof(m_));
}

fasinhTrans::~fasinhTrans() {
  // @@protoc_insertion_point(destructor:pb.fasinhTrans)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void fasinhTrans::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void fasinhTrans::ArenaDtor(void* object) {
  fasinhTrans* _this = reinterpret_cast< fasinhTrans* >(object);
  (void)_this;
}
void fasinhTrans::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void fasinhTrans::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const fasinhTrans& fasinhTrans::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_fasinhTrans_GatingSet_2eproto.base);
  return *internal_default_instance();
}


void fasinhTrans::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.fasinhTrans)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_) -
      reinterpret_cast<char*>(&length_)) + sizeof(m_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* fasinhTrans::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float maxRange = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          maxrange_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float T = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float A = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float M = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* fasinhTrans::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.fasinhTrans)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float length = 1;
  if (!(this->length() <= 0 && this->length() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_length(), target);
  }

  // float maxRange = 2;
  if (!(this->maxrange() <= 0 && this->maxrange() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_maxrange(), target);
  }

  // float T = 3;
  if (!(this->t() <= 0 && this->t() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_t(), target);
  }

  // float A = 4;
  if (!(this->a() <= 0 && this->a() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_a(), target);
  }

  // float M = 5;
  if (!(this->m() <= 0 && this->m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.fasinhTrans)
  return target;
}

size_t fasinhTrans::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.fasinhTrans)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float length = 1;
  if (!(this->length() <= 0 && this->length() >= 0)) {
    total_size += 1 + 4;
  }

  // float maxRange = 2;
  if (!(this->maxrange() <= 0 && this->maxrange() >= 0)) {
    total_size += 1 + 4;
  }

  // float T = 3;
  if (!(this->t() <= 0 && this->t() >= 0)) {
    total_size += 1 + 4;
  }

  // float A = 4;
  if (!(this->a() <= 0 && this->a() >= 0)) {
    total_size += 1 + 4;
  }

  // float M = 5;
  if (!(this->m() <= 0 && this->m() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void fasinhTrans::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.fasinhTrans)
  GOOGLE_DCHECK_NE(&from, this);
  const fasinhTrans* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<fasinhTrans>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.fasinhTrans)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.fasinhTrans)
    MergeFrom(*source);
  }
}

void fasinhTrans::MergeFrom(const fasinhTrans& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.fasinhTrans)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.length() <= 0 && from.length() >= 0)) {
    _internal_set_length(from._internal_length());
  }
  if (!(from.maxrange() <= 0 && from.maxrange() >= 0)) {
    _internal_set_maxrange(from._internal_maxrange());
  }
  if (!(from.t() <= 0 && from.t() >= 0)) {
    _internal_set_t(from._internal_t());
  }
  if (!(from.a() <= 0 && from.a() >= 0)) {
    _internal_set_a(from._internal_a());
  }
  if (!(from.m() <= 0 && from.m() >= 0)) {
    _internal_set_m(from._internal_m());
  }
}

void fasinhTrans::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.fasinhTrans)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fasinhTrans::CopyFrom(const fasinhTrans& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.fasinhTrans)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fasinhTrans::IsInitialized() const {
  return true;
}

void fasinhTrans::InternalSwap(fasinhTrans* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(fasinhTrans, m_)
      + sizeof(fasinhTrans::m_)
      - PROTOBUF_FIELD_OFFSET(fasinhTrans, length_)>(
          reinterpret_cast<char*>(&length_),
          reinterpret_cast<char*>(&other->length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata fasinhTrans::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void scaleTrans::InitAsDefaultInstance() {
}
class scaleTrans::_Internal {
 public:
};

scaleTrans::scaleTrans(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.scaleTrans)
}
scaleTrans::scaleTrans(const scaleTrans& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&scale_factor_, &from.scale_factor_,
    static_cast<size_t>(reinterpret_cast<char*>(&r_scale_) -
    reinterpret_cast<char*>(&scale_factor_)) + sizeof(r_scale_));
  // @@protoc_insertion_point(copy_constructor:pb.scaleTrans)
}

void scaleTrans::SharedCtor() {
  ::memset(&scale_factor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&r_scale_) -
      reinterpret_cast<char*>(&scale_factor_)) + sizeof(r_scale_));
}

scaleTrans::~scaleTrans() {
  // @@protoc_insertion_point(destructor:pb.scaleTrans)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void scaleTrans::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void scaleTrans::ArenaDtor(void* object) {
  scaleTrans* _this = reinterpret_cast< scaleTrans* >(object);
  (void)_this;
}
void scaleTrans::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void scaleTrans::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const scaleTrans& scaleTrans::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_scaleTrans_GatingSet_2eproto.base);
  return *internal_default_instance();
}


void scaleTrans::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.scaleTrans)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&scale_factor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&r_scale_) -
      reinterpret_cast<char*>(&scale_factor_)) + sizeof(r_scale_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* scaleTrans::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float scale_factor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          scale_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float t_scale = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          t_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float r_scale = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          r_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* scaleTrans::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.scaleTrans)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float scale_factor = 1;
  if (!(this->scale_factor() <= 0 && this->scale_factor() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_scale_factor(), target);
  }

  // float t_scale = 2;
  if (!(this->t_scale() <= 0 && this->t_scale() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_t_scale(), target);
  }

  // float r_scale = 3;
  if (!(this->r_scale() <= 0 && this->r_scale() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_r_scale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.scaleTrans)
  return target;
}

size_t scaleTrans::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.scaleTrans)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float scale_factor = 1;
  if (!(this->scale_factor() <= 0 && this->scale_factor() >= 0)) {
    total_size += 1 + 4;
  }

  // float t_scale = 2;
  if (!(this->t_scale() <= 0 && this->t_scale() >= 0)) {
    total_size += 1 + 4;
  }

  // float r_scale = 3;
  if (!(this->r_scale() <= 0 && this->r_scale() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void scaleTrans::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.scaleTrans)
  GOOGLE_DCHECK_NE(&from, this);
  const scaleTrans* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<scaleTrans>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.scaleTrans)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.scaleTrans)
    MergeFrom(*source);
  }
}

void scaleTrans::MergeFrom(const scaleTrans& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.scaleTrans)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.scale_factor() <= 0 && from.scale_factor() >= 0)) {
    _internal_set_scale_factor(from._internal_scale_factor());
  }
  if (!(from.t_scale() <= 0 && from.t_scale() >= 0)) {
    _internal_set_t_scale(from._internal_t_scale());
  }
  if (!(from.r_scale() <= 0 && from.r_scale() >= 0)) {
    _internal_set_r_scale(from._internal_r_scale());
  }
}

void scaleTrans::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.scaleTrans)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void scaleTrans::CopyFrom(const scaleTrans& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.scaleTrans)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool scaleTrans::IsInitialized() const {
  return true;
}

void scaleTrans::InternalSwap(scaleTrans* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(scaleTrans, r_scale_)
      + sizeof(scaleTrans::r_scale_)
      - PROTOBUF_FIELD_OFFSET(scaleTrans, scale_factor_)>(
          reinterpret_cast<char*>(&scale_factor_),
          reinterpret_cast<char*>(&other->scale_factor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata scaleTrans::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flinTrans::InitAsDefaultInstance() {
}
class flinTrans::_Internal {
 public:
};

flinTrans::flinTrans(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.flinTrans)
}
flinTrans::flinTrans(const flinTrans& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&min_, &from.min_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&min_)) + sizeof(max_));
  // @@protoc_insertion_point(copy_constructor:pb.flinTrans)
}

void flinTrans::SharedCtor() {
  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_) -
      reinterpret_cast<char*>(&min_)) + sizeof(max_));
}

flinTrans::~flinTrans() {
  // @@protoc_insertion_point(destructor:pb.flinTrans)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flinTrans::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void flinTrans::ArenaDtor(void* object) {
  flinTrans* _this = reinterpret_cast< flinTrans* >(object);
  (void)_this;
}
void flinTrans::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flinTrans::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flinTrans& flinTrans::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flinTrans_GatingSet_2eproto.base);
  return *internal_default_instance();
}


void flinTrans::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.flinTrans)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_) -
      reinterpret_cast<char*>(&min_)) + sizeof(max_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flinTrans::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float min = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flinTrans::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.flinTrans)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float min = 1;
  if (!(this->min() <= 0 && this->min() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_min(), target);
  }

  // float max = 2;
  if (!(this->max() <= 0 && this->max() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.flinTrans)
  return target;
}

size_t flinTrans::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.flinTrans)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float min = 1;
  if (!(this->min() <= 0 && this->min() >= 0)) {
    total_size += 1 + 4;
  }

  // float max = 2;
  if (!(this->max() <= 0 && this->max() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flinTrans::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.flinTrans)
  GOOGLE_DCHECK_NE(&from, this);
  const flinTrans* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flinTrans>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.flinTrans)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.flinTrans)
    MergeFrom(*source);
  }
}

void flinTrans::MergeFrom(const flinTrans& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.flinTrans)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.min() <= 0 && from.min() >= 0)) {
    _internal_set_min(from._internal_min());
  }
  if (!(from.max() <= 0 && from.max() >= 0)) {
    _internal_set_max(from._internal_max());
  }
}

void flinTrans::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.flinTrans)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flinTrans::CopyFrom(const flinTrans& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.flinTrans)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flinTrans::IsInitialized() const {
  return true;
}

void flinTrans::InternalSwap(flinTrans* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flinTrans, max_)
      + sizeof(flinTrans::max_)
      - PROTOBUF_FIELD_OFFSET(flinTrans, min_)>(
          reinterpret_cast<char*>(&min_),
          reinterpret_cast<char*>(&other->min_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flinTrans::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void logTrans::InitAsDefaultInstance() {
}
class logTrans::_Internal {
 public:
};

logTrans::logTrans(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.logTrans)
}
logTrans::logTrans(const logTrans& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&scale_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(scale_));
  // @@protoc_insertion_point(copy_constructor:pb.logTrans)
}

void logTrans::SharedCtor() {
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scale_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(scale_));
}

logTrans::~logTrans() {
  // @@protoc_insertion_point(destructor:pb.logTrans)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void logTrans::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void logTrans::ArenaDtor(void* object) {
  logTrans* _this = reinterpret_cast< logTrans* >(object);
  (void)_this;
}
void logTrans::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void logTrans::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const logTrans& logTrans::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_logTrans_GatingSet_2eproto.base);
  return *internal_default_instance();
}


void logTrans::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.logTrans)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scale_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(scale_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* logTrans::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float decade = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          decade_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float T = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float scale = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* logTrans::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.logTrans)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float offset = 1;
  if (!(this->offset() <= 0 && this->offset() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_offset(), target);
  }

  // float decade = 2;
  if (!(this->decade() <= 0 && this->decade() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_decade(), target);
  }

  // float T = 3;
  if (!(this->t() <= 0 && this->t() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_t(), target);
  }

  // float scale = 4;
  if (!(this->scale() <= 0 && this->scale() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_scale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.logTrans)
  return target;
}

size_t logTrans::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.logTrans)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float offset = 1;
  if (!(this->offset() <= 0 && this->offset() >= 0)) {
    total_size += 1 + 4;
  }

  // float decade = 2;
  if (!(this->decade() <= 0 && this->decade() >= 0)) {
    total_size += 1 + 4;
  }

  // float T = 3;
  if (!(this->t() <= 0 && this->t() >= 0)) {
    total_size += 1 + 4;
  }

  // float scale = 4;
  if (!(this->scale() <= 0 && this->scale() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void logTrans::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.logTrans)
  GOOGLE_DCHECK_NE(&from, this);
  const logTrans* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<logTrans>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.logTrans)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.logTrans)
    MergeFrom(*source);
  }
}

void logTrans::MergeFrom(const logTrans& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.logTrans)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.offset() <= 0 && from.offset() >= 0)) {
    _internal_set_offset(from._internal_offset());
  }
  if (!(from.decade() <= 0 && from.decade() >= 0)) {
    _internal_set_decade(from._internal_decade());
  }
  if (!(from.t() <= 0 && from.t() >= 0)) {
    _internal_set_t(from._internal_t());
  }
  if (!(from.scale() <= 0 && from.scale() >= 0)) {
    _internal_set_scale(from._internal_scale());
  }
}

void logTrans::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.logTrans)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void logTrans::CopyFrom(const logTrans& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.logTrans)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool logTrans::IsInitialized() const {
  return true;
}

void logTrans::InternalSwap(logTrans* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(logTrans, scale_)
      + sizeof(logTrans::scale_)
      - PROTOBUF_FIELD_OFFSET(logTrans, offset_)>(
          reinterpret_cast<char*>(&offset_),
          reinterpret_cast<char*>(&other->offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata logTrans::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void logGML2Trans::InitAsDefaultInstance() {
}
class logGML2Trans::_Internal {
 public:
};

logGML2Trans::logGML2Trans(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.logGML2Trans)
}
logGML2Trans::logGML2Trans(const logGML2Trans& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&t_, &from.t_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_) -
    reinterpret_cast<char*>(&t_)) + sizeof(m_));
  // @@protoc_insertion_point(copy_constructor:pb.logGML2Trans)
}

void logGML2Trans::SharedCtor() {
  ::memset(&t_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_) -
      reinterpret_cast<char*>(&t_)) + sizeof(m_));
}

logGML2Trans::~logGML2Trans() {
  // @@protoc_insertion_point(destructor:pb.logGML2Trans)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void logGML2Trans::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void logGML2Trans::ArenaDtor(void* object) {
  logGML2Trans* _this = reinterpret_cast< logGML2Trans* >(object);
  (void)_this;
}
void logGML2Trans::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void logGML2Trans::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const logGML2Trans& logGML2Trans::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_logGML2Trans_GatingSet_2eproto.base);
  return *internal_default_instance();
}


void logGML2Trans::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.logGML2Trans)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&t_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_) -
      reinterpret_cast<char*>(&t_)) + sizeof(m_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* logGML2Trans::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float T = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float M = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* logGML2Trans::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.logGML2Trans)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float T = 1;
  if (!(this->t() <= 0 && this->t() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_t(), target);
  }

  // float M = 2;
  if (!(this->m() <= 0 && this->m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.logGML2Trans)
  return target;
}

size_t logGML2Trans::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.logGML2Trans)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float T = 1;
  if (!(this->t() <= 0 && this->t() >= 0)) {
    total_size += 1 + 4;
  }

  // float M = 2;
  if (!(this->m() <= 0 && this->m() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void logGML2Trans::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.logGML2Trans)
  GOOGLE_DCHECK_NE(&from, this);
  const logGML2Trans* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<logGML2Trans>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.logGML2Trans)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.logGML2Trans)
    MergeFrom(*source);
  }
}

void logGML2Trans::MergeFrom(const logGML2Trans& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.logGML2Trans)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.t() <= 0 && from.t() >= 0)) {
    _internal_set_t(from._internal_t());
  }
  if (!(from.m() <= 0 && from.m() >= 0)) {
    _internal_set_m(from._internal_m());
  }
}

void logGML2Trans::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.logGML2Trans)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void logGML2Trans::CopyFrom(const logGML2Trans& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.logGML2Trans)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool logGML2Trans::IsInitialized() const {
  return true;
}

void logGML2Trans::InternalSwap(logGML2Trans* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(logGML2Trans, m_)
      + sizeof(logGML2Trans::m_)
      - PROTOBUF_FIELD_OFFSET(logGML2Trans, t_)>(
          reinterpret_cast<char*>(&t_),
          reinterpret_cast<char*>(&other->t_));
}

::PROTOBUF_NAMESPACE_ID::Metadata logGML2Trans::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void logicleTrans::InitAsDefaultInstance() {
}
class logicleTrans::_Internal {
 public:
};

logicleTrans::logicleTrans(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.logicleTrans)
}
logicleTrans::logicleTrans(const logicleTrans& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&t_, &from.t_,
    static_cast<size_t>(reinterpret_cast<char*>(&isinverse_) -
    reinterpret_cast<char*>(&t_)) + sizeof(isinverse_));
  // @@protoc_insertion_point(copy_constructor:pb.logicleTrans)
}

void logicleTrans::SharedCtor() {
  ::memset(&t_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isinverse_) -
      reinterpret_cast<char*>(&t_)) + sizeof(isinverse_));
}

logicleTrans::~logicleTrans() {
  // @@protoc_insertion_point(destructor:pb.logicleTrans)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void logicleTrans::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void logicleTrans::ArenaDtor(void* object) {
  logicleTrans* _this = reinterpret_cast< logicleTrans* >(object);
  (void)_this;
}
void logicleTrans::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void logicleTrans::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const logicleTrans& logicleTrans::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_logicleTrans_GatingSet_2eproto.base);
  return *internal_default_instance();
}


void logicleTrans::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.logicleTrans)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&t_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isinverse_) -
      reinterpret_cast<char*>(&t_)) + sizeof(isinverse_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* logicleTrans::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float T = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float W = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float M = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float A = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float bins = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          bins_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool isGml2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          isgml2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isInverse = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          isinverse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* logicleTrans::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.logicleTrans)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float T = 1;
  if (!(this->t() <= 0 && this->t() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_t(), target);
  }

  // float W = 2;
  if (!(this->w() <= 0 && this->w() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_w(), target);
  }

  // float M = 3;
  if (!(this->m() <= 0 && this->m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_m(), target);
  }

  // float A = 4;
  if (!(this->a() <= 0 && this->a() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_a(), target);
  }

  // float bins = 5;
  if (!(this->bins() <= 0 && this->bins() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_bins(), target);
  }

  // bool isGml2 = 6;
  if (this->isgml2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_isgml2(), target);
  }

  // bool isInverse = 7;
  if (this->isinverse() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_isinverse(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.logicleTrans)
  return target;
}

size_t logicleTrans::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.logicleTrans)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float T = 1;
  if (!(this->t() <= 0 && this->t() >= 0)) {
    total_size += 1 + 4;
  }

  // float W = 2;
  if (!(this->w() <= 0 && this->w() >= 0)) {
    total_size += 1 + 4;
  }

  // float M = 3;
  if (!(this->m() <= 0 && this->m() >= 0)) {
    total_size += 1 + 4;
  }

  // float A = 4;
  if (!(this->a() <= 0 && this->a() >= 0)) {
    total_size += 1 + 4;
  }

  // float bins = 5;
  if (!(this->bins() <= 0 && this->bins() >= 0)) {
    total_size += 1 + 4;
  }

  // bool isGml2 = 6;
  if (this->isgml2() != 0) {
    total_size += 1 + 1;
  }

  // bool isInverse = 7;
  if (this->isinverse() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void logicleTrans::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.logicleTrans)
  GOOGLE_DCHECK_NE(&from, this);
  const logicleTrans* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<logicleTrans>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.logicleTrans)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.logicleTrans)
    MergeFrom(*source);
  }
}

void logicleTrans::MergeFrom(const logicleTrans& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.logicleTrans)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.t() <= 0 && from.t() >= 0)) {
    _internal_set_t(from._internal_t());
  }
  if (!(from.w() <= 0 && from.w() >= 0)) {
    _internal_set_w(from._internal_w());
  }
  if (!(from.m() <= 0 && from.m() >= 0)) {
    _internal_set_m(from._internal_m());
  }
  if (!(from.a() <= 0 && from.a() >= 0)) {
    _internal_set_a(from._internal_a());
  }
  if (!(from.bins() <= 0 && from.bins() >= 0)) {
    _internal_set_bins(from._internal_bins());
  }
  if (from.isgml2() != 0) {
    _internal_set_isgml2(from._internal_isgml2());
  }
  if (from.isinverse() != 0) {
    _internal_set_isinverse(from._internal_isinverse());
  }
}

void logicleTrans::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.logicleTrans)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void logicleTrans::CopyFrom(const logicleTrans& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.logicleTrans)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool logicleTrans::IsInitialized() const {
  return true;
}

void logicleTrans::InternalSwap(logicleTrans* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(logicleTrans, isinverse_)
      + sizeof(logicleTrans::isinverse_)
      - PROTOBUF_FIELD_OFFSET(logicleTrans, t_)>(
          reinterpret_cast<char*>(&t_),
          reinterpret_cast<char*>(&other->t_));
}

::PROTOBUF_NAMESPACE_ID::Metadata logicleTrans::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void transformation::InitAsDefaultInstance() {
  ::pb::_transformation_default_instance_._instance.get_mutable()->caltbl_ = const_cast< ::pb::calibrationTable*>(
      ::pb::calibrationTable::internal_default_instance());
  ::pb::_transformation_default_instance_._instance.get_mutable()->bt_ = const_cast< ::pb::biexpTrans*>(
      ::pb::biexpTrans::internal_default_instance());
  ::pb::_transformation_default_instance_._instance.get_mutable()->lt_ = const_cast< ::pb::logTrans*>(
      ::pb::logTrans::internal_default_instance());
  ::pb::_transformation_default_instance_._instance.get_mutable()->flt_ = const_cast< ::pb::flinTrans*>(
      ::pb::flinTrans::internal_default_instance());
  ::pb::_transformation_default_instance_._instance.get_mutable()->st_ = const_cast< ::pb::scaleTrans*>(
      ::pb::scaleTrans::internal_default_instance());
  ::pb::_transformation_default_instance_._instance.get_mutable()->ft_ = const_cast< ::pb::fasinhTrans*>(
      ::pb::fasinhTrans::internal_default_instance());
  ::pb::_transformation_default_instance_._instance.get_mutable()->lgt_ = const_cast< ::pb::logicleTrans*>(
      ::pb::logicleTrans::internal_default_instance());
  ::pb::_transformation_default_instance_._instance.get_mutable()->lgml2t_ = const_cast< ::pb::logGML2Trans*>(
      ::pb::logGML2Trans::internal_default_instance());
}
class transformation::_Internal {
 public:
  static const ::pb::calibrationTable& caltbl(const transformation* msg);
  static const ::pb::biexpTrans& bt(const transformation* msg);
  static const ::pb::logTrans& lt(const transformation* msg);
  static const ::pb::flinTrans& flt(const transformation* msg);
  static const ::pb::scaleTrans& st(const transformation* msg);
  static const ::pb::fasinhTrans& ft(const transformation* msg);
  static const ::pb::logicleTrans& lgt(const transformation* msg);
  static const ::pb::logGML2Trans& lgml2t(const transformation* msg);
};

const ::pb::calibrationTable&
transformation::_Internal::caltbl(const transformation* msg) {
  return *msg->caltbl_;
}
const ::pb::biexpTrans&
transformation::_Internal::bt(const transformation* msg) {
  return *msg->bt_;
}
const ::pb::logTrans&
transformation::_Internal::lt(const transformation* msg) {
  return *msg->lt_;
}
const ::pb::flinTrans&
transformation::_Internal::flt(const transformation* msg) {
  return *msg->flt_;
}
const ::pb::scaleTrans&
transformation::_Internal::st(const transformation* msg) {
  return *msg->st_;
}
const ::pb::fasinhTrans&
transformation::_Internal::ft(const transformation* msg) {
  return *msg->ft_;
}
const ::pb::logicleTrans&
transformation::_Internal::lgt(const transformation* msg) {
  return *msg->lgt_;
}
const ::pb::logGML2Trans&
transformation::_Internal::lgml2t(const transformation* msg) {
  return *msg->lgml2t_;
}
transformation::transformation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.transformation)
}
transformation::transformation(const transformation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  channel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_channel().empty()) {
    channel_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_channel(),
      GetArena());
  }
  if (from._internal_has_caltbl()) {
    caltbl_ = new ::pb::calibrationTable(*from.caltbl_);
  } else {
    caltbl_ = nullptr;
  }
  if (from._internal_has_bt()) {
    bt_ = new ::pb::biexpTrans(*from.bt_);
  } else {
    bt_ = nullptr;
  }
  if (from._internal_has_lt()) {
    lt_ = new ::pb::logTrans(*from.lt_);
  } else {
    lt_ = nullptr;
  }
  if (from._internal_has_flt()) {
    flt_ = new ::pb::flinTrans(*from.flt_);
  } else {
    flt_ = nullptr;
  }
  if (from._internal_has_st()) {
    st_ = new ::pb::scaleTrans(*from.st_);
  } else {
    st_ = nullptr;
  }
  if (from._internal_has_ft()) {
    ft_ = new ::pb::fasinhTrans(*from.ft_);
  } else {
    ft_ = nullptr;
  }
  if (from._internal_has_lgt()) {
    lgt_ = new ::pb::logicleTrans(*from.lgt_);
  } else {
    lgt_ = nullptr;
  }
  if (from._internal_has_lgml2t()) {
    lgml2t_ = new ::pb::logGML2Trans(*from.lgml2t_);
  } else {
    lgml2t_ = nullptr;
  }
  ::memcpy(&trans_type_, &from.trans_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&trans_type_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:pb.transformation)
}

void transformation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_transformation_GatingSet_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&caltbl_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&caltbl_)) + sizeof(type_));
}

transformation::~transformation() {
  // @@protoc_insertion_point(destructor:pb.transformation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void transformation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channel_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete caltbl_;
  if (this != internal_default_instance()) delete bt_;
  if (this != internal_default_instance()) delete lt_;
  if (this != internal_default_instance()) delete flt_;
  if (this != internal_default_instance()) delete st_;
  if (this != internal_default_instance()) delete ft_;
  if (this != internal_default_instance()) delete lgt_;
  if (this != internal_default_instance()) delete lgml2t_;
}

void transformation::ArenaDtor(void* object) {
  transformation* _this = reinterpret_cast< transformation* >(object);
  (void)_this;
}
void transformation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void transformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const transformation& transformation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_transformation_GatingSet_2eproto.base);
  return *internal_default_instance();
}


void transformation::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.transformation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  channel_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && caltbl_ != nullptr) {
    delete caltbl_;
  }
  caltbl_ = nullptr;
  if (GetArena() == nullptr && bt_ != nullptr) {
    delete bt_;
  }
  bt_ = nullptr;
  if (GetArena() == nullptr && lt_ != nullptr) {
    delete lt_;
  }
  lt_ = nullptr;
  if (GetArena() == nullptr && flt_ != nullptr) {
    delete flt_;
  }
  flt_ = nullptr;
  if (GetArena() == nullptr && st_ != nullptr) {
    delete st_;
  }
  st_ = nullptr;
  if (GetArena() == nullptr && ft_ != nullptr) {
    delete ft_;
  }
  ft_ = nullptr;
  if (GetArena() == nullptr && lgt_ != nullptr) {
    delete lgt_;
  }
  lgt_ = nullptr;
  if (GetArena() == nullptr && lgml2t_ != nullptr) {
    delete lgml2t_;
  }
  lgml2t_ = nullptr;
  ::memset(&trans_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&trans_type_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* transformation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.calibrationTable calTbl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_caltbl(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isGateOnly = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isgateonly_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.TRANS_TYPE trans_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_trans_type(static_cast<::pb::TRANS_TYPE>(val));
        } else goto handle_unusual;
        continue;
      // string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.transformation.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string channel = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_channel();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.transformation.channel"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isComputed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          iscomputed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.biexpTrans bt = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_bt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.logTrans lt = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_lt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.flinTrans flt = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_flt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.scaleTrans st = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_st(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.fasinhTrans ft = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_ft(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 type = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.logicleTrans lgt = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_lgt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.logGML2Trans lgml2t = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_lgml2t(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* transformation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.transformation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.calibrationTable calTbl = 1;
  if (this->has_caltbl()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::caltbl(this), target, stream);
  }

  // bool isGateOnly = 2;
  if (this->isgateonly() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isgateonly(), target);
  }

  // .pb.TRANS_TYPE trans_type = 3;
  if (this->trans_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_trans_type(), target);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.transformation.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // string channel = 5;
  if (this->channel().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channel().data(), static_cast<int>(this->_internal_channel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.transformation.channel");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_channel(), target);
  }

  // bool isComputed = 6;
  if (this->iscomputed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_iscomputed(), target);
  }

  // .pb.biexpTrans bt = 7;
  if (this->has_bt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::bt(this), target, stream);
  }

  // .pb.logTrans lt = 8;
  if (this->has_lt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::lt(this), target, stream);
  }

  // .pb.flinTrans flt = 9;
  if (this->has_flt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::flt(this), target, stream);
  }

  // .pb.scaleTrans st = 10;
  if (this->has_st()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::st(this), target, stream);
  }

  // .pb.fasinhTrans ft = 11;
  if (this->has_ft()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::ft(this), target, stream);
  }

  // uint32 type = 12;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_type(), target);
  }

  // .pb.logicleTrans lgt = 13;
  if (this->has_lgt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::lgt(this), target, stream);
  }

  // .pb.logGML2Trans lgml2t = 14;
  if (this->has_lgml2t()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::lgml2t(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.transformation)
  return target;
}

size_t transformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.transformation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string channel = 5;
  if (this->channel().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channel());
  }

  // .pb.calibrationTable calTbl = 1;
  if (this->has_caltbl()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *caltbl_);
  }

  // .pb.biexpTrans bt = 7;
  if (this->has_bt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bt_);
  }

  // .pb.logTrans lt = 8;
  if (this->has_lt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lt_);
  }

  // .pb.flinTrans flt = 9;
  if (this->has_flt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *flt_);
  }

  // .pb.scaleTrans st = 10;
  if (this->has_st()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *st_);
  }

  // .pb.fasinhTrans ft = 11;
  if (this->has_ft()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ft_);
  }

  // .pb.logicleTrans lgt = 13;
  if (this->has_lgt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lgt_);
  }

  // .pb.logGML2Trans lgml2t = 14;
  if (this->has_lgml2t()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lgml2t_);
  }

  // .pb.TRANS_TYPE trans_type = 3;
  if (this->trans_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_trans_type());
  }

  // bool isGateOnly = 2;
  if (this->isgateonly() != 0) {
    total_size += 1 + 1;
  }

  // bool isComputed = 6;
  if (this->iscomputed() != 0) {
    total_size += 1 + 1;
  }

  // uint32 type = 12;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void transformation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.transformation)
  GOOGLE_DCHECK_NE(&from, this);
  const transformation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<transformation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.transformation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.transformation)
    MergeFrom(*source);
  }
}

void transformation::MergeFrom(const transformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.transformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.channel().size() > 0) {
    _internal_set_channel(from._internal_channel());
  }
  if (from.has_caltbl()) {
    _internal_mutable_caltbl()->::pb::calibrationTable::MergeFrom(from._internal_caltbl());
  }
  if (from.has_bt()) {
    _internal_mutable_bt()->::pb::biexpTrans::MergeFrom(from._internal_bt());
  }
  if (from.has_lt()) {
    _internal_mutable_lt()->::pb::logTrans::MergeFrom(from._internal_lt());
  }
  if (from.has_flt()) {
    _internal_mutable_flt()->::pb::flinTrans::MergeFrom(from._internal_flt());
  }
  if (from.has_st()) {
    _internal_mutable_st()->::pb::scaleTrans::MergeFrom(from._internal_st());
  }
  if (from.has_ft()) {
    _internal_mutable_ft()->::pb::fasinhTrans::MergeFrom(from._internal_ft());
  }
  if (from.has_lgt()) {
    _internal_mutable_lgt()->::pb::logicleTrans::MergeFrom(from._internal_lgt());
  }
  if (from.has_lgml2t()) {
    _internal_mutable_lgml2t()->::pb::logGML2Trans::MergeFrom(from._internal_lgml2t());
  }
  if (from.trans_type() != 0) {
    _internal_set_trans_type(from._internal_trans_type());
  }
  if (from.isgateonly() != 0) {
    _internal_set_isgateonly(from._internal_isgateonly());
  }
  if (from.iscomputed() != 0) {
    _internal_set_iscomputed(from._internal_iscomputed());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void transformation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.transformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void transformation::CopyFrom(const transformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.transformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool transformation::IsInitialized() const {
  return true;
}

void transformation::InternalSwap(transformation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  channel_.Swap(&other->channel_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(transformation, type_)
      + sizeof(transformation::type_)
      - PROTOBUF_FIELD_OFFSET(transformation, caltbl_)>(
          reinterpret_cast<char*>(&caltbl_),
          reinterpret_cast<char*>(&other->caltbl_));
}

::PROTOBUF_NAMESPACE_ID::Metadata transformation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void trans_pair::InitAsDefaultInstance() {
  ::pb::_trans_pair_default_instance_._instance.get_mutable()->trans_ = const_cast< ::pb::transformation*>(
      ::pb::transformation::internal_default_instance());
}
class trans_pair::_Internal {
 public:
  static const ::pb::transformation& trans(const trans_pair* msg);
};

const ::pb::transformation&
trans_pair::_Internal::trans(const trans_pair* msg) {
  return *msg->trans_;
}
trans_pair::trans_pair(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.trans_pair)
}
trans_pair::trans_pair(const trans_pair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_trans()) {
    trans_ = new ::pb::transformation(*from.trans_);
  } else {
    trans_ = nullptr;
  }
  trans_address_ = from.trans_address_;
  // @@protoc_insertion_point(copy_constructor:pb.trans_pair)
}

void trans_pair::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_trans_pair_GatingSet_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&trans_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trans_address_) -
      reinterpret_cast<char*>(&trans_)) + sizeof(trans_address_));
}

trans_pair::~trans_pair() {
  // @@protoc_insertion_point(destructor:pb.trans_pair)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void trans_pair::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete trans_;
}

void trans_pair::ArenaDtor(void* object) {
  trans_pair* _this = reinterpret_cast< trans_pair* >(object);
  (void)_this;
}
void trans_pair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void trans_pair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const trans_pair& trans_pair::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_trans_pair_GatingSet_2eproto.base);
  return *internal_default_instance();
}


void trans_pair::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.trans_pair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && trans_ != nullptr) {
    delete trans_;
  }
  trans_ = nullptr;
  trans_address_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* trans_pair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.trans_pair.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 trans_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          trans_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.transformation trans = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_trans(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* trans_pair::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.trans_pair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.trans_pair.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint64 trans_address = 2;
  if (this->trans_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_trans_address(), target);
  }

  // .pb.transformation trans = 3;
  if (this->has_trans()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::trans(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.trans_pair)
  return target;
}

size_t trans_pair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.trans_pair)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .pb.transformation trans = 3;
  if (this->has_trans()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trans_);
  }

  // uint64 trans_address = 2;
  if (this->trans_address() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_trans_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void trans_pair::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.trans_pair)
  GOOGLE_DCHECK_NE(&from, this);
  const trans_pair* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<trans_pair>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.trans_pair)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.trans_pair)
    MergeFrom(*source);
  }
}

void trans_pair::MergeFrom(const trans_pair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.trans_pair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_trans()) {
    _internal_mutable_trans()->::pb::transformation::MergeFrom(from._internal_trans());
  }
  if (from.trans_address() != 0) {
    _internal_set_trans_address(from._internal_trans_address());
  }
}

void trans_pair::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.trans_pair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void trans_pair::CopyFrom(const trans_pair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.trans_pair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool trans_pair::IsInitialized() const {
  return true;
}

void trans_pair::InternalSwap(trans_pair* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(trans_pair, trans_address_)
      + sizeof(trans_pair::trans_address_)
      - PROTOBUF_FIELD_OFFSET(trans_pair, trans_)>(
          reinterpret_cast<char*>(&trans_),
          reinterpret_cast<char*>(&other->trans_));
}

::PROTOBUF_NAMESPACE_ID::Metadata trans_pair::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void trans_local::InitAsDefaultInstance() {
}
class trans_local::_Internal {
 public:
};

trans_local::trans_local(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tp_(arena),
  sampleids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.trans_local)
}
trans_local::trans_local(const trans_local& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tp_(from.tp_),
      sampleids_(from.sampleids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  groupname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_groupname().empty()) {
    groupname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_groupname(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pb.trans_local)
}

void trans_local::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_trans_local_GatingSet_2eproto.base);
  groupname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

trans_local::~trans_local() {
  // @@protoc_insertion_point(destructor:pb.trans_local)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void trans_local::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  groupname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void trans_local::ArenaDtor(void* object) {
  trans_local* _this = reinterpret_cast< trans_local* >(object);
  (void)_this;
}
void trans_local::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void trans_local::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const trans_local& trans_local::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_trans_local_GatingSet_2eproto.base);
  return *internal_default_instance();
}


void trans_local::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.trans_local)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tp_.Clear();
  sampleids_.Clear();
  groupname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* trans_local::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.trans_pair tp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tp(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string groupName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_groupname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.trans_local.groupName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 sampleIDs = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_sampleids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_sampleids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* trans_local::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.trans_local)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.trans_pair tp = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tp_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tp(i), target, stream);
  }

  // string groupName = 2;
  if (this->groupname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_groupname().data(), static_cast<int>(this->_internal_groupname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.trans_local.groupName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_groupname(), target);
  }

  // repeated uint32 sampleIDs = 3 [packed = true];
  {
    int byte_size = _sampleids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_sampleids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.trans_local)
  return target;
}

size_t trans_local::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.trans_local)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.trans_pair tp = 1;
  total_size += 1UL * this->_internal_tp_size();
  for (const auto& msg : this->tp_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 sampleIDs = 3 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->sampleids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _sampleids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string groupName = 2;
  if (this->groupname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_groupname());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void trans_local::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.trans_local)
  GOOGLE_DCHECK_NE(&from, this);
  const trans_local* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<trans_local>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.trans_local)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.trans_local)
    MergeFrom(*source);
  }
}

void trans_local::MergeFrom(const trans_local& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.trans_local)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tp_.MergeFrom(from.tp_);
  sampleids_.MergeFrom(from.sampleids_);
  if (from.groupname().size() > 0) {
    _internal_set_groupname(from._internal_groupname());
  }
}

void trans_local::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.trans_local)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void trans_local::CopyFrom(const trans_local& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.trans_local)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool trans_local::IsInitialized() const {
  return true;
}

void trans_local::InternalSwap(trans_local* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tp_.InternalSwap(&other->tp_);
  sampleids_.InternalSwap(&other->sampleids_);
  groupname_.Swap(&other->groupname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata trans_local::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void POPINDICES::InitAsDefaultInstance() {
}
class POPINDICES::_Internal {
 public:
};

POPINDICES::POPINDICES(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  iind_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.POPINDICES)
}
POPINDICES::POPINDICES(const POPINDICES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      iind_(from.iind_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bind_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bind().empty()) {
    bind_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_bind(),
      GetArena());
  }
  ::memcpy(&nevents_, &from.nevents_,
    static_cast<size_t>(reinterpret_cast<char*>(&indtype_) -
    reinterpret_cast<char*>(&nevents_)) + sizeof(indtype_));
  // @@protoc_insertion_point(copy_constructor:pb.POPINDICES)
}

void POPINDICES::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_POPINDICES_GatingSet_2eproto.base);
  bind_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&nevents_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&indtype_) -
      reinterpret_cast<char*>(&nevents_)) + sizeof(indtype_));
}

POPINDICES::~POPINDICES() {
  // @@protoc_insertion_point(destructor:pb.POPINDICES)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void POPINDICES::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  bind_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void POPINDICES::ArenaDtor(void* object) {
  POPINDICES* _this = reinterpret_cast< POPINDICES* >(object);
  (void)_this;
}
void POPINDICES::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void POPINDICES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const POPINDICES& POPINDICES::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_POPINDICES_GatingSet_2eproto.base);
  return *internal_default_instance();
}


void POPINDICES::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.POPINDICES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  iind_.Clear();
  bind_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&nevents_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&indtype_) -
      reinterpret_cast<char*>(&nevents_)) + sizeof(indtype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* POPINDICES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 nEvents = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          nevents_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.ind_type indtype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_indtype(static_cast<::pb::ind_type>(val));
        } else goto handle_unusual;
        continue;
      // repeated uint32 iInd = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_iind(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_iind(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes bInd = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_bind();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* POPINDICES::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.POPINDICES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 nEvents = 1;
  if (this->nevents() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_nevents(), target);
  }

  // .pb.ind_type indtype = 2;
  if (this->indtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_indtype(), target);
  }

  // repeated uint32 iInd = 3 [packed = true];
  {
    int byte_size = _iind_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_iind(), byte_size, target);
    }
  }

  // bytes bInd = 4;
  if (this->bind().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_bind(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.POPINDICES)
  return target;
}

size_t POPINDICES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.POPINDICES)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 iInd = 3 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->iind_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _iind_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes bInd = 4;
  if (this->bind().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bind());
  }

  // uint32 nEvents = 1;
  if (this->nevents() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nevents());
  }

  // .pb.ind_type indtype = 2;
  if (this->indtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_indtype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void POPINDICES::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.POPINDICES)
  GOOGLE_DCHECK_NE(&from, this);
  const POPINDICES* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<POPINDICES>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.POPINDICES)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.POPINDICES)
    MergeFrom(*source);
  }
}

void POPINDICES::MergeFrom(const POPINDICES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.POPINDICES)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  iind_.MergeFrom(from.iind_);
  if (from.bind().size() > 0) {
    _internal_set_bind(from._internal_bind());
  }
  if (from.nevents() != 0) {
    _internal_set_nevents(from._internal_nevents());
  }
  if (from.indtype() != 0) {
    _internal_set_indtype(from._internal_indtype());
  }
}

void POPINDICES::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.POPINDICES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void POPINDICES::CopyFrom(const POPINDICES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.POPINDICES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool POPINDICES::IsInitialized() const {
  return true;
}

void POPINDICES::InternalSwap(POPINDICES* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  iind_.InternalSwap(&other->iind_);
  bind_.Swap(&other->bind_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(POPINDICES, indtype_)
      + sizeof(POPINDICES::indtype_)
      - PROTOBUF_FIELD_OFFSET(POPINDICES, nevents_)>(
          reinterpret_cast<char*>(&nevents_),
          reinterpret_cast<char*>(&other->nevents_));
}

::PROTOBUF_NAMESPACE_ID::Metadata POPINDICES::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void nodeProperties::InitAsDefaultInstance() {
  ::pb::_nodeProperties_default_instance_._instance.get_mutable()->indices_ = const_cast< ::pb::POPINDICES*>(
      ::pb::POPINDICES::internal_default_instance());
  ::pb::_nodeProperties_default_instance_._instance.get_mutable()->thisgate_ = const_cast< ::pb::gate*>(
      ::pb::gate::internal_default_instance());
}
class nodeProperties::_Internal {
 public:
  static const ::pb::POPINDICES& indices(const nodeProperties* msg);
  static const ::pb::gate& thisgate(const nodeProperties* msg);
};

const ::pb::POPINDICES&
nodeProperties::_Internal::indices(const nodeProperties* msg) {
  return *msg->indices_;
}
const ::pb::gate&
nodeProperties::_Internal::thisgate(const nodeProperties* msg) {
  return *msg->thisgate_;
}
nodeProperties::nodeProperties(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fjstats_(arena),
  fcstats_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.nodeProperties)
}
nodeProperties::nodeProperties(const nodeProperties& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fjstats_(from.fjstats_),
      fcstats_(from.fcstats_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  thisname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_thisname().empty()) {
    thisname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_thisname(),
      GetArena());
  }
  if (from._internal_has_indices()) {
    indices_ = new ::pb::POPINDICES(*from.indices_);
  } else {
    indices_ = nullptr;
  }
  if (from._internal_has_thisgate()) {
    thisgate_ = new ::pb::gate(*from.thisgate_);
  } else {
    thisgate_ = nullptr;
  }
  hidden_ = from.hidden_;
  // @@protoc_insertion_point(copy_constructor:pb.nodeProperties)
}

void nodeProperties::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_nodeProperties_GatingSet_2eproto.base);
  thisname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&indices_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hidden_) -
      reinterpret_cast<char*>(&indices_)) + sizeof(hidden_));
}

nodeProperties::~nodeProperties() {
  // @@protoc_insertion_point(destructor:pb.nodeProperties)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void nodeProperties::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  thisname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete indices_;
  if (this != internal_default_instance()) delete thisgate_;
}

void nodeProperties::ArenaDtor(void* object) {
  nodeProperties* _this = reinterpret_cast< nodeProperties* >(object);
  (void)_this;
}
void nodeProperties::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void nodeProperties::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const nodeProperties& nodeProperties::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_nodeProperties_GatingSet_2eproto.base);
  return *internal_default_instance();
}


void nodeProperties::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.nodeProperties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fjstats_.Clear();
  fcstats_.Clear();
  thisname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && indices_ != nullptr) {
    delete indices_;
  }
  indices_ = nullptr;
  if (GetArena() == nullptr && thisgate_ != nullptr) {
    delete thisgate_;
  }
  thisgate_ = nullptr;
  hidden_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* nodeProperties::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string thisName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_thisname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.nodeProperties.thisName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.POPSTATS fjStats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fjstats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pb.POPSTATS fcStats = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fcstats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // bool hidden = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          hidden_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.POPINDICES indices = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_indices(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.gate thisGate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_thisgate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* nodeProperties::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.nodeProperties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string thisName = 1;
  if (this->thisname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_thisname().data(), static_cast<int>(this->_internal_thisname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.nodeProperties.thisName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_thisname(), target);
  }

  // repeated .pb.POPSTATS fjStats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fjstats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_fjstats(i), target, stream);
  }

  // repeated .pb.POPSTATS fcStats = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fcstats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_fcstats(i), target, stream);
  }

  // bool hidden = 4;
  if (this->hidden() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_hidden(), target);
  }

  // .pb.POPINDICES indices = 5;
  if (this->has_indices()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::indices(this), target, stream);
  }

  // .pb.gate thisGate = 6;
  if (this->has_thisgate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::thisgate(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.nodeProperties)
  return target;
}

size_t nodeProperties::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.nodeProperties)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.POPSTATS fjStats = 2;
  total_size += 1UL * this->_internal_fjstats_size();
  for (const auto& msg : this->fjstats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pb.POPSTATS fcStats = 3;
  total_size += 1UL * this->_internal_fcstats_size();
  for (const auto& msg : this->fcstats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string thisName = 1;
  if (this->thisname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_thisname());
  }

  // .pb.POPINDICES indices = 5;
  if (this->has_indices()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *indices_);
  }

  // .pb.gate thisGate = 6;
  if (this->has_thisgate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *thisgate_);
  }

  // bool hidden = 4;
  if (this->hidden() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void nodeProperties::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.nodeProperties)
  GOOGLE_DCHECK_NE(&from, this);
  const nodeProperties* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<nodeProperties>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.nodeProperties)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.nodeProperties)
    MergeFrom(*source);
  }
}

void nodeProperties::MergeFrom(const nodeProperties& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.nodeProperties)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fjstats_.MergeFrom(from.fjstats_);
  fcstats_.MergeFrom(from.fcstats_);
  if (from.thisname().size() > 0) {
    _internal_set_thisname(from._internal_thisname());
  }
  if (from.has_indices()) {
    _internal_mutable_indices()->::pb::POPINDICES::MergeFrom(from._internal_indices());
  }
  if (from.has_thisgate()) {
    _internal_mutable_thisgate()->::pb::gate::MergeFrom(from._internal_thisgate());
  }
  if (from.hidden() != 0) {
    _internal_set_hidden(from._internal_hidden());
  }
}

void nodeProperties::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.nodeProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nodeProperties::CopyFrom(const nodeProperties& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.nodeProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nodeProperties::IsInitialized() const {
  return true;
}

void nodeProperties::InternalSwap(nodeProperties* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fjstats_.InternalSwap(&other->fjstats_);
  fcstats_.InternalSwap(&other->fcstats_);
  thisname_.Swap(&other->thisname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(nodeProperties, hidden_)
      + sizeof(nodeProperties::hidden_)
      - PROTOBUF_FIELD_OFFSET(nodeProperties, indices_)>(
          reinterpret_cast<char*>(&indices_),
          reinterpret_cast<char*>(&other->indices_));
}

::PROTOBUF_NAMESPACE_ID::Metadata nodeProperties::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void treeNodes::InitAsDefaultInstance() {
  ::pb::_treeNodes_default_instance_._instance.get_mutable()->node_ = const_cast< ::pb::nodeProperties*>(
      ::pb::nodeProperties::internal_default_instance());
}
class treeNodes::_Internal {
 public:
  static const ::pb::nodeProperties& node(const treeNodes* msg);
};

const ::pb::nodeProperties&
treeNodes::_Internal::node(const treeNodes* msg) {
  return *msg->node_;
}
treeNodes::treeNodes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.treeNodes)
}
treeNodes::treeNodes(const treeNodes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_node()) {
    node_ = new ::pb::nodeProperties(*from.node_);
  } else {
    node_ = nullptr;
  }
  parent_ = from.parent_;
  // @@protoc_insertion_point(copy_constructor:pb.treeNodes)
}

void treeNodes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_treeNodes_GatingSet_2eproto.base);
  ::memset(&node_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parent_) -
      reinterpret_cast<char*>(&node_)) + sizeof(parent_));
}

treeNodes::~treeNodes() {
  // @@protoc_insertion_point(destructor:pb.treeNodes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void treeNodes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete node_;
}

void treeNodes::ArenaDtor(void* object) {
  treeNodes* _this = reinterpret_cast< treeNodes* >(object);
  (void)_this;
}
void treeNodes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void treeNodes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const treeNodes& treeNodes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_treeNodes_GatingSet_2eproto.base);
  return *internal_default_instance();
}


void treeNodes::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.treeNodes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && node_ != nullptr) {
    delete node_;
  }
  node_ = nullptr;
  parent_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* treeNodes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.nodeProperties node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 parent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          parent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* treeNodes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.treeNodes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.nodeProperties node = 1;
  if (this->has_node()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::node(this), target, stream);
  }

  // uint32 parent = 2;
  if (this->parent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_parent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.treeNodes)
  return target;
}

size_t treeNodes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.treeNodes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.nodeProperties node = 1;
  if (this->has_node()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *node_);
  }

  // uint32 parent = 2;
  if (this->parent() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_parent());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void treeNodes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.treeNodes)
  GOOGLE_DCHECK_NE(&from, this);
  const treeNodes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<treeNodes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.treeNodes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.treeNodes)
    MergeFrom(*source);
  }
}

void treeNodes::MergeFrom(const treeNodes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.treeNodes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_node()) {
    _internal_mutable_node()->::pb::nodeProperties::MergeFrom(from._internal_node());
  }
  if (from.parent() != 0) {
    _internal_set_parent(from._internal_parent());
  }
}

void treeNodes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.treeNodes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void treeNodes::CopyFrom(const treeNodes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.treeNodes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool treeNodes::IsInitialized() const {
  return true;
}

void treeNodes::InternalSwap(treeNodes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(treeNodes, parent_)
      + sizeof(treeNodes::parent_)
      - PROTOBUF_FIELD_OFFSET(treeNodes, node_)>(
          reinterpret_cast<char*>(&node_),
          reinterpret_cast<char*>(&other->node_));
}

::PROTOBUF_NAMESPACE_ID::Metadata treeNodes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void populationTree::InitAsDefaultInstance() {
}
class populationTree::_Internal {
 public:
};

populationTree::populationTree(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  node_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.populationTree)
}
populationTree::populationTree(const populationTree& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      node_(from.node_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.populationTree)
}

void populationTree::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_populationTree_GatingSet_2eproto.base);
}

populationTree::~populationTree() {
  // @@protoc_insertion_point(destructor:pb.populationTree)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void populationTree::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void populationTree::ArenaDtor(void* object) {
  populationTree* _this = reinterpret_cast< populationTree* >(object);
  (void)_this;
}
void populationTree::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void populationTree::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const populationTree& populationTree::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_populationTree_GatingSet_2eproto.base);
  return *internal_default_instance();
}


void populationTree::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.populationTree)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* populationTree::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.treeNodes node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_node(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* populationTree::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.populationTree)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.treeNodes node = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_node_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_node(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.populationTree)
  return target;
}

size_t populationTree::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.populationTree)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.treeNodes node = 1;
  total_size += 1UL * this->_internal_node_size();
  for (const auto& msg : this->node_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void populationTree::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.populationTree)
  GOOGLE_DCHECK_NE(&from, this);
  const populationTree* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<populationTree>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.populationTree)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.populationTree)
    MergeFrom(*source);
  }
}

void populationTree::MergeFrom(const populationTree& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.populationTree)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_.MergeFrom(from.node_);
}

void populationTree::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.populationTree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void populationTree::CopyFrom(const populationTree& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.populationTree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool populationTree::IsInitialized() const {
  return true;
}

void populationTree::InternalSwap(populationTree* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  node_.InternalSwap(&other->node_);
}

::PROTOBUF_NAMESPACE_ID::Metadata populationTree::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void COMP::InitAsDefaultInstance() {
}
class COMP::_Internal {
 public:
};

COMP::COMP(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  marker_(arena),
  spillover_(arena),
  detector_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.COMP)
}
COMP::COMP(const COMP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      marker_(from.marker_),
      spillover_(from.spillover_),
      detector_(from.detector_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cid().empty()) {
    cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cid(),
      GetArena());
  }
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prefix().empty()) {
    prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_prefix(),
      GetArena());
  }
  suffix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_suffix().empty()) {
    suffix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_suffix(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_comment().empty()) {
    comment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_comment(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:pb.COMP)
}

void COMP::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_COMP_GatingSet_2eproto.base);
  cid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  suffix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

COMP::~COMP() {
  // @@protoc_insertion_point(destructor:pb.COMP)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void COMP::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  cid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  suffix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void COMP::ArenaDtor(void* object) {
  COMP* _this = reinterpret_cast< COMP* >(object);
  (void)_this;
}
void COMP::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void COMP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const COMP& COMP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_COMP_GatingSet_2eproto.base);
  return *internal_default_instance();
}


void COMP::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.COMP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marker_.Clear();
  spillover_.Clear();
  detector_.Clear();
  cid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  prefix_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  suffix_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  comment_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* COMP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string cid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_cid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.COMP.cid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string prefix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.COMP.prefix"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string suffix = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_suffix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.COMP.suffix"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.COMP.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string comment = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_comment();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.COMP.comment"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string marker = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_marker();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.COMP.marker"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated float spillOver = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_spillover(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61) {
          _internal_add_spillover(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated string detector = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_detector();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.COMP.detector"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* COMP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.COMP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cid = 1;
  if (this->cid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cid().data(), static_cast<int>(this->_internal_cid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.COMP.cid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cid(), target);
  }

  // string prefix = 2;
  if (this->prefix().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prefix().data(), static_cast<int>(this->_internal_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.COMP.prefix");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_prefix(), target);
  }

  // string suffix = 3;
  if (this->suffix().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_suffix().data(), static_cast<int>(this->_internal_suffix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.COMP.suffix");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_suffix(), target);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.COMP.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // string comment = 5;
  if (this->comment().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_comment().data(), static_cast<int>(this->_internal_comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.COMP.comment");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_comment(), target);
  }

  // repeated string marker = 6;
  for (int i = 0, n = this->_internal_marker_size(); i < n; i++) {
    const auto& s = this->_internal_marker(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.COMP.marker");
    target = stream->WriteString(6, s, target);
  }

  // repeated float spillOver = 7;
  if (this->_internal_spillover_size() > 0) {
    target = stream->WriteFixedPacked(7, _internal_spillover(), target);
  }

  // repeated string detector = 8;
  for (int i = 0, n = this->_internal_detector_size(); i < n; i++) {
    const auto& s = this->_internal_detector(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.COMP.detector");
    target = stream->WriteString(8, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.COMP)
  return target;
}

size_t COMP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.COMP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string marker = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(marker_.size());
  for (int i = 0, n = marker_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      marker_.Get(i));
  }

  // repeated float spillOver = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_spillover_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _spillover_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string detector = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(detector_.size());
  for (int i = 0, n = detector_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      detector_.Get(i));
  }

  // string cid = 1;
  if (this->cid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cid());
  }

  // string prefix = 2;
  if (this->prefix().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prefix());
  }

  // string suffix = 3;
  if (this->suffix().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_suffix());
  }

  // string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string comment = 5;
  if (this->comment().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comment());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void COMP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.COMP)
  GOOGLE_DCHECK_NE(&from, this);
  const COMP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<COMP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.COMP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.COMP)
    MergeFrom(*source);
  }
}

void COMP::MergeFrom(const COMP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.COMP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  marker_.MergeFrom(from.marker_);
  spillover_.MergeFrom(from.spillover_);
  detector_.MergeFrom(from.detector_);
  if (from.cid().size() > 0) {
    _internal_set_cid(from._internal_cid());
  }
  if (from.prefix().size() > 0) {
    _internal_set_prefix(from._internal_prefix());
  }
  if (from.suffix().size() > 0) {
    _internal_set_suffix(from._internal_suffix());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.comment().size() > 0) {
    _internal_set_comment(from._internal_comment());
  }
}

void COMP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.COMP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void COMP::CopyFrom(const COMP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.COMP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool COMP::IsInitialized() const {
  return true;
}

void COMP::InternalSwap(COMP* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  marker_.InternalSwap(&other->marker_);
  spillover_.InternalSwap(&other->spillover_);
  detector_.InternalSwap(&other->detector_);
  cid_.Swap(&other->cid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  prefix_.Swap(&other->prefix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  suffix_.Swap(&other->suffix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  comment_.Swap(&other->comment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata COMP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PARAM::InitAsDefaultInstance() {
}
class PARAM::_Internal {
 public:
};

PARAM::PARAM(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.PARAM)
}
PARAM::PARAM(const PARAM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  param_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_param().empty()) {
    param_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_param(),
      GetArena());
  }
  ::memcpy(&log_, &from.log_,
    static_cast<size_t>(reinterpret_cast<char*>(&calibrationindex_) -
    reinterpret_cast<char*>(&log_)) + sizeof(calibrationindex_));
  // @@protoc_insertion_point(copy_constructor:pb.PARAM)
}

void PARAM::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PARAM_GatingSet_2eproto.base);
  param_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&log_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&calibrationindex_) -
      reinterpret_cast<char*>(&log_)) + sizeof(calibrationindex_));
}

PARAM::~PARAM() {
  // @@protoc_insertion_point(destructor:pb.PARAM)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PARAM::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  param_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PARAM::ArenaDtor(void* object) {
  PARAM* _this = reinterpret_cast< PARAM* >(object);
  (void)_this;
}
void PARAM::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PARAM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PARAM& PARAM::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PARAM_GatingSet_2eproto.base);
  return *internal_default_instance();
}


void PARAM::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.PARAM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  param_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&log_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&calibrationindex_) -
      reinterpret_cast<char*>(&log_)) + sizeof(calibrationindex_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PARAM::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string param = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_param();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.PARAM.param"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool log = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          log_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 range = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 highValue = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          highvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 calibrationIndex = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          calibrationindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PARAM::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.PARAM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string param = 1;
  if (this->param().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_param().data(), static_cast<int>(this->_internal_param().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.PARAM.param");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_param(), target);
  }

  // bool log = 2;
  if (this->log() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_log(), target);
  }

  // uint32 range = 3;
  if (this->range() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_range(), target);
  }

  // uint32 highValue = 4;
  if (this->highvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_highvalue(), target);
  }

  // uint32 calibrationIndex = 5;
  if (this->calibrationindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_calibrationindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.PARAM)
  return target;
}

size_t PARAM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.PARAM)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string param = 1;
  if (this->param().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_param());
  }

  // bool log = 2;
  if (this->log() != 0) {
    total_size += 1 + 1;
  }

  // uint32 range = 3;
  if (this->range() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_range());
  }

  // uint32 highValue = 4;
  if (this->highvalue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_highvalue());
  }

  // uint32 calibrationIndex = 5;
  if (this->calibrationindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_calibrationindex());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PARAM::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.PARAM)
  GOOGLE_DCHECK_NE(&from, this);
  const PARAM* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PARAM>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.PARAM)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.PARAM)
    MergeFrom(*source);
  }
}

void PARAM::MergeFrom(const PARAM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.PARAM)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.param().size() > 0) {
    _internal_set_param(from._internal_param());
  }
  if (from.log() != 0) {
    _internal_set_log(from._internal_log());
  }
  if (from.range() != 0) {
    _internal_set_range(from._internal_range());
  }
  if (from.highvalue() != 0) {
    _internal_set_highvalue(from._internal_highvalue());
  }
  if (from.calibrationindex() != 0) {
    _internal_set_calibrationindex(from._internal_calibrationindex());
  }
}

void PARAM::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.PARAM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PARAM::CopyFrom(const PARAM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.PARAM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PARAM::IsInitialized() const {
  return true;
}

void PARAM::InternalSwap(PARAM* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  param_.Swap(&other->param_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PARAM, calibrationindex_)
      + sizeof(PARAM::calibrationindex_)
      - PROTOBUF_FIELD_OFFSET(PARAM, log_)>(
          reinterpret_cast<char*>(&log_),
          reinterpret_cast<char*>(&other->log_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PARAM::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GatingHierarchy::InitAsDefaultInstance() {
  ::pb::_GatingHierarchy_default_instance_._instance.get_mutable()->tree_ = const_cast< ::pb::populationTree*>(
      ::pb::populationTree::internal_default_instance());
  ::pb::_GatingHierarchy_default_instance_._instance.get_mutable()->comp_ = const_cast< ::pb::COMP*>(
      ::pb::COMP::internal_default_instance());
  ::pb::_GatingHierarchy_default_instance_._instance.get_mutable()->trans_ = const_cast< ::pb::trans_local*>(
      ::pb::trans_local::internal_default_instance());
  ::pb::_GatingHierarchy_default_instance_._instance.get_mutable()->frame_ = const_cast< ::pb::CytoFrame*>(
      ::pb::CytoFrame::internal_default_instance());
}
class GatingHierarchy::_Internal {
 public:
  static const ::pb::populationTree& tree(const GatingHierarchy* msg);
  static const ::pb::COMP& comp(const GatingHierarchy* msg);
  static const ::pb::trans_local& trans(const GatingHierarchy* msg);
  static const ::pb::CytoFrame& frame(const GatingHierarchy* msg);
};

const ::pb::populationTree&
GatingHierarchy::_Internal::tree(const GatingHierarchy* msg) {
  return *msg->tree_;
}
const ::pb::COMP&
GatingHierarchy::_Internal::comp(const GatingHierarchy* msg) {
  return *msg->comp_;
}
const ::pb::trans_local&
GatingHierarchy::_Internal::trans(const GatingHierarchy* msg) {
  return *msg->trans_;
}
const ::pb::CytoFrame&
GatingHierarchy::_Internal::frame(const GatingHierarchy* msg) {
  return *msg->frame_;
}
GatingHierarchy::GatingHierarchy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  transflag_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.GatingHierarchy)
}
GatingHierarchy::GatingHierarchy(const GatingHierarchy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      transflag_(from.transflag_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_comp()) {
    comp_ = new ::pb::COMP(*from.comp_);
  } else {
    comp_ = nullptr;
  }
  if (from._internal_has_tree()) {
    tree_ = new ::pb::populationTree(*from.tree_);
  } else {
    tree_ = nullptr;
  }
  if (from._internal_has_trans()) {
    trans_ = new ::pb::trans_local(*from.trans_);
  } else {
    trans_ = nullptr;
  }
  if (from._internal_has_frame()) {
    frame_ = new ::pb::CytoFrame(*from.frame_);
  } else {
    frame_ = nullptr;
  }
  isloaded_ = from.isloaded_;
  // @@protoc_insertion_point(copy_constructor:pb.GatingHierarchy)
}

void GatingHierarchy::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GatingHierarchy_GatingSet_2eproto.base);
  ::memset(&comp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isloaded_) -
      reinterpret_cast<char*>(&comp_)) + sizeof(isloaded_));
}

GatingHierarchy::~GatingHierarchy() {
  // @@protoc_insertion_point(destructor:pb.GatingHierarchy)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GatingHierarchy::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete comp_;
  if (this != internal_default_instance()) delete tree_;
  if (this != internal_default_instance()) delete trans_;
  if (this != internal_default_instance()) delete frame_;
}

void GatingHierarchy::ArenaDtor(void* object) {
  GatingHierarchy* _this = reinterpret_cast< GatingHierarchy* >(object);
  (void)_this;
}
void GatingHierarchy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GatingHierarchy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GatingHierarchy& GatingHierarchy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GatingHierarchy_GatingSet_2eproto.base);
  return *internal_default_instance();
}


void GatingHierarchy::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.GatingHierarchy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transflag_.Clear();
  if (GetArena() == nullptr && comp_ != nullptr) {
    delete comp_;
  }
  comp_ = nullptr;
  if (GetArena() == nullptr && tree_ != nullptr) {
    delete tree_;
  }
  tree_ = nullptr;
  if (GetArena() == nullptr && trans_ != nullptr) {
    delete trans_;
  }
  trans_ = nullptr;
  if (GetArena() == nullptr && frame_ != nullptr) {
    delete frame_;
  }
  frame_ = nullptr;
  isloaded_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GatingHierarchy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .pb.COMP comp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_comp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.populationTree tree = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tree(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isLoaded = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          isloaded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.PARAM transFlag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transflag(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .pb.trans_local trans = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_trans(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.CytoFrame frame = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_frame(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GatingHierarchy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GatingHierarchy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.COMP comp = 1;
  if (this->has_comp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::comp(this), target, stream);
  }

  // .pb.populationTree tree = 2;
  if (this->has_tree()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::tree(this), target, stream);
  }

  // bool isLoaded = 3;
  if (this->isloaded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_isloaded(), target);
  }

  // repeated .pb.PARAM transFlag = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_transflag_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_transflag(i), target, stream);
  }

  // .pb.trans_local trans = 5;
  if (this->has_trans()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::trans(this), target, stream);
  }

  // .pb.CytoFrame frame = 6;
  if (this->has_frame()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::frame(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GatingHierarchy)
  return target;
}

size_t GatingHierarchy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.GatingHierarchy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.PARAM transFlag = 4;
  total_size += 1UL * this->_internal_transflag_size();
  for (const auto& msg : this->transflag_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .pb.COMP comp = 1;
  if (this->has_comp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *comp_);
  }

  // .pb.populationTree tree = 2;
  if (this->has_tree()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tree_);
  }

  // .pb.trans_local trans = 5;
  if (this->has_trans()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trans_);
  }

  // .pb.CytoFrame frame = 6;
  if (this->has_frame()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *frame_);
  }

  // bool isLoaded = 3;
  if (this->isloaded() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GatingHierarchy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.GatingHierarchy)
  GOOGLE_DCHECK_NE(&from, this);
  const GatingHierarchy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GatingHierarchy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.GatingHierarchy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.GatingHierarchy)
    MergeFrom(*source);
  }
}

void GatingHierarchy::MergeFrom(const GatingHierarchy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.GatingHierarchy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transflag_.MergeFrom(from.transflag_);
  if (from.has_comp()) {
    _internal_mutable_comp()->::pb::COMP::MergeFrom(from._internal_comp());
  }
  if (from.has_tree()) {
    _internal_mutable_tree()->::pb::populationTree::MergeFrom(from._internal_tree());
  }
  if (from.has_trans()) {
    _internal_mutable_trans()->::pb::trans_local::MergeFrom(from._internal_trans());
  }
  if (from.has_frame()) {
    _internal_mutable_frame()->::pb::CytoFrame::MergeFrom(from._internal_frame());
  }
  if (from.isloaded() != 0) {
    _internal_set_isloaded(from._internal_isloaded());
  }
}

void GatingHierarchy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.GatingHierarchy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GatingHierarchy::CopyFrom(const GatingHierarchy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.GatingHierarchy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GatingHierarchy::IsInitialized() const {
  return true;
}

void GatingHierarchy::InternalSwap(GatingHierarchy* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  transflag_.InternalSwap(&other->transflag_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GatingHierarchy, isloaded_)
      + sizeof(GatingHierarchy::isloaded_)
      - PROTOBUF_FIELD_OFFSET(GatingHierarchy, comp_)>(
          reinterpret_cast<char*>(&comp_),
          reinterpret_cast<char*>(&other->comp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GatingHierarchy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CytoFrame::InitAsDefaultInstance() {
}
class CytoFrame::_Internal {
 public:
};

CytoFrame::CytoFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.CytoFrame)
}
CytoFrame::CytoFrame(const CytoFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_h5_ = from.is_h5_;
  // @@protoc_insertion_point(copy_constructor:pb.CytoFrame)
}

void CytoFrame::SharedCtor() {
  is_h5_ = false;
}

CytoFrame::~CytoFrame() {
  // @@protoc_insertion_point(destructor:pb.CytoFrame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CytoFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CytoFrame::ArenaDtor(void* object) {
  CytoFrame* _this = reinterpret_cast< CytoFrame* >(object);
  (void)_this;
}
void CytoFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CytoFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CytoFrame& CytoFrame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CytoFrame_GatingSet_2eproto.base);
  return *internal_default_instance();
}


void CytoFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CytoFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_h5_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CytoFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_h5 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_h5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CytoFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CytoFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_h5 = 1;
  if (this->is_h5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_h5(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CytoFrame)
  return target;
}

size_t CytoFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CytoFrame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_h5 = 1;
  if (this->is_h5() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CytoFrame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CytoFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const CytoFrame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CytoFrame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CytoFrame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CytoFrame)
    MergeFrom(*source);
  }
}

void CytoFrame::MergeFrom(const CytoFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CytoFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_h5() != 0) {
    _internal_set_is_h5(from._internal_is_h5());
  }
}

void CytoFrame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CytoFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CytoFrame::CopyFrom(const CytoFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CytoFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CytoFrame::IsInitialized() const {
  return true;
}

void CytoFrame::InternalSwap(CytoFrame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(is_h5_, other->is_h5_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CytoFrame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TRANS_TBL::InitAsDefaultInstance() {
  ::pb::_TRANS_TBL_default_instance_._instance.get_mutable()->trans_ = const_cast< ::pb::transformation*>(
      ::pb::transformation::internal_default_instance());
}
class TRANS_TBL::_Internal {
 public:
  static const ::pb::transformation& trans(const TRANS_TBL* msg);
};

const ::pb::transformation&
TRANS_TBL::_Internal::trans(const TRANS_TBL* msg) {
  return *msg->trans_;
}
TRANS_TBL::TRANS_TBL(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.TRANS_TBL)
}
TRANS_TBL::TRANS_TBL(const TRANS_TBL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_trans()) {
    trans_ = new ::pb::transformation(*from.trans_);
  } else {
    trans_ = nullptr;
  }
  trans_address_ = from.trans_address_;
  // @@protoc_insertion_point(copy_constructor:pb.TRANS_TBL)
}

void TRANS_TBL::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TRANS_TBL_GatingSet_2eproto.base);
  ::memset(&trans_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trans_address_) -
      reinterpret_cast<char*>(&trans_)) + sizeof(trans_address_));
}

TRANS_TBL::~TRANS_TBL() {
  // @@protoc_insertion_point(destructor:pb.TRANS_TBL)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TRANS_TBL::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete trans_;
}

void TRANS_TBL::ArenaDtor(void* object) {
  TRANS_TBL* _this = reinterpret_cast< TRANS_TBL* >(object);
  (void)_this;
}
void TRANS_TBL::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TRANS_TBL::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TRANS_TBL& TRANS_TBL::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TRANS_TBL_GatingSet_2eproto.base);
  return *internal_default_instance();
}


void TRANS_TBL::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.TRANS_TBL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && trans_ != nullptr) {
    delete trans_;
  }
  trans_ = nullptr;
  trans_address_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TRANS_TBL::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 trans_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          trans_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pb.transformation trans = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_trans(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TRANS_TBL::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TRANS_TBL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 trans_address = 1;
  if (this->trans_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_trans_address(), target);
  }

  // .pb.transformation trans = 2;
  if (this->has_trans()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::trans(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TRANS_TBL)
  return target;
}

size_t TRANS_TBL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.TRANS_TBL)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.transformation trans = 2;
  if (this->has_trans()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trans_);
  }

  // uint64 trans_address = 1;
  if (this->trans_address() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_trans_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TRANS_TBL::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.TRANS_TBL)
  GOOGLE_DCHECK_NE(&from, this);
  const TRANS_TBL* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TRANS_TBL>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.TRANS_TBL)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.TRANS_TBL)
    MergeFrom(*source);
  }
}

void TRANS_TBL::MergeFrom(const TRANS_TBL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.TRANS_TBL)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_trans()) {
    _internal_mutable_trans()->::pb::transformation::MergeFrom(from._internal_trans());
  }
  if (from.trans_address() != 0) {
    _internal_set_trans_address(from._internal_trans_address());
  }
}

void TRANS_TBL::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.TRANS_TBL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TRANS_TBL::CopyFrom(const TRANS_TBL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.TRANS_TBL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TRANS_TBL::IsInitialized() const {
  return true;
}

void TRANS_TBL::InternalSwap(TRANS_TBL* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TRANS_TBL, trans_address_)
      + sizeof(TRANS_TBL::trans_address_)
      - PROTOBUF_FIELD_OFFSET(TRANS_TBL, trans_)>(
          reinterpret_cast<char*>(&trans_),
          reinterpret_cast<char*>(&other->trans_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TRANS_TBL::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GatingSet::InitAsDefaultInstance() {
}
class GatingSet::_Internal {
 public:
};

GatingSet::GatingSet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  samplename_(arena),
  trans_tbl_(arena),
  gtrans_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.GatingSet)
}
GatingSet::GatingSet(const GatingSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      samplename_(from.samplename_),
      trans_tbl_(from.trans_tbl_),
      gtrans_(from.gtrans_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  guid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_guid().empty()) {
    guid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_guid(),
      GetArena());
  }
  cytolib_verion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cytolib_verion().empty()) {
    cytolib_verion_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cytolib_verion(),
      GetArena());
  }
  pb_verion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pb_verion().empty()) {
    pb_verion_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pb_verion(),
      GetArena());
  }
  h5_verion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_h5_verion().empty()) {
    h5_verion_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_h5_verion(),
      GetArena());
  }
  ::memcpy(&globalbiexptrans_, &from.globalbiexptrans_,
    static_cast<size_t>(reinterpret_cast<char*>(&globallintrans_) -
    reinterpret_cast<char*>(&globalbiexptrans_)) + sizeof(globallintrans_));
  // @@protoc_insertion_point(copy_constructor:pb.GatingSet)
}

void GatingSet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GatingSet_GatingSet_2eproto.base);
  guid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cytolib_verion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pb_verion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  h5_verion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&globalbiexptrans_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&globallintrans_) -
      reinterpret_cast<char*>(&globalbiexptrans_)) + sizeof(globallintrans_));
}

GatingSet::~GatingSet() {
  // @@protoc_insertion_point(destructor:pb.GatingSet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GatingSet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  guid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cytolib_verion_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pb_verion_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  h5_verion_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GatingSet::ArenaDtor(void* object) {
  GatingSet* _this = reinterpret_cast< GatingSet* >(object);
  (void)_this;
}
void GatingSet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GatingSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GatingSet& GatingSet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GatingSet_GatingSet_2eproto.base);
  return *internal_default_instance();
}


void GatingSet::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.GatingSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  samplename_.Clear();
  trans_tbl_.Clear();
  gtrans_.Clear();
  guid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cytolib_verion_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pb_verion_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  h5_verion_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&globalbiexptrans_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&globallintrans_) -
      reinterpret_cast<char*>(&globalbiexptrans_)) + sizeof(globallintrans_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GatingSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string sampleName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_samplename();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.GatingSet.sampleName"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pb.TRANS_TBL trans_tbl = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trans_tbl(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 globalBiExpTrans = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          globalbiexptrans_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 globalLinTrans = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          globallintrans_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.trans_local gTrans = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gtrans(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // string guid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_guid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.GatingSet.guid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cytolib_verion = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_cytolib_verion();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.GatingSet.cytolib_verion"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pb_verion = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_pb_verion();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.GatingSet.pb_verion"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string h5_verion = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_h5_verion();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.GatingSet.h5_verion"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GatingSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GatingSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string sampleName = 1;
  for (int i = 0, n = this->_internal_samplename_size(); i < n; i++) {
    const auto& s = this->_internal_samplename(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.GatingSet.sampleName");
    target = stream->WriteString(1, s, target);
  }

  // repeated .pb.TRANS_TBL trans_tbl = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trans_tbl_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_trans_tbl(i), target, stream);
  }

  // uint64 globalBiExpTrans = 3;
  if (this->globalbiexptrans() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_globalbiexptrans(), target);
  }

  // uint64 globalLinTrans = 4;
  if (this->globallintrans() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_globallintrans(), target);
  }

  // repeated .pb.trans_local gTrans = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_gtrans_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_gtrans(i), target, stream);
  }

  // string guid = 6;
  if (this->guid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_guid().data(), static_cast<int>(this->_internal_guid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.GatingSet.guid");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_guid(), target);
  }

  // string cytolib_verion = 7;
  if (this->cytolib_verion().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cytolib_verion().data(), static_cast<int>(this->_internal_cytolib_verion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.GatingSet.cytolib_verion");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_cytolib_verion(), target);
  }

  // string pb_verion = 8;
  if (this->pb_verion().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pb_verion().data(), static_cast<int>(this->_internal_pb_verion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.GatingSet.pb_verion");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_pb_verion(), target);
  }

  // string h5_verion = 9;
  if (this->h5_verion().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_h5_verion().data(), static_cast<int>(this->_internal_h5_verion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.GatingSet.h5_verion");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_h5_verion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GatingSet)
  return target;
}

size_t GatingSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.GatingSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string sampleName = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(samplename_.size());
  for (int i = 0, n = samplename_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      samplename_.Get(i));
  }

  // repeated .pb.TRANS_TBL trans_tbl = 2;
  total_size += 1UL * this->_internal_trans_tbl_size();
  for (const auto& msg : this->trans_tbl_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pb.trans_local gTrans = 5;
  total_size += 1UL * this->_internal_gtrans_size();
  for (const auto& msg : this->gtrans_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string guid = 6;
  if (this->guid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_guid());
  }

  // string cytolib_verion = 7;
  if (this->cytolib_verion().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cytolib_verion());
  }

  // string pb_verion = 8;
  if (this->pb_verion().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pb_verion());
  }

  // string h5_verion = 9;
  if (this->h5_verion().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_h5_verion());
  }

  // uint64 globalBiExpTrans = 3;
  if (this->globalbiexptrans() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_globalbiexptrans());
  }

  // uint64 globalLinTrans = 4;
  if (this->globallintrans() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_globallintrans());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GatingSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.GatingSet)
  GOOGLE_DCHECK_NE(&from, this);
  const GatingSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GatingSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.GatingSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.GatingSet)
    MergeFrom(*source);
  }
}

void GatingSet::MergeFrom(const GatingSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.GatingSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  samplename_.MergeFrom(from.samplename_);
  trans_tbl_.MergeFrom(from.trans_tbl_);
  gtrans_.MergeFrom(from.gtrans_);
  if (from.guid().size() > 0) {
    _internal_set_guid(from._internal_guid());
  }
  if (from.cytolib_verion().size() > 0) {
    _internal_set_cytolib_verion(from._internal_cytolib_verion());
  }
  if (from.pb_verion().size() > 0) {
    _internal_set_pb_verion(from._internal_pb_verion());
  }
  if (from.h5_verion().size() > 0) {
    _internal_set_h5_verion(from._internal_h5_verion());
  }
  if (from.globalbiexptrans() != 0) {
    _internal_set_globalbiexptrans(from._internal_globalbiexptrans());
  }
  if (from.globallintrans() != 0) {
    _internal_set_globallintrans(from._internal_globallintrans());
  }
}

void GatingSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.GatingSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GatingSet::CopyFrom(const GatingSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.GatingSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GatingSet::IsInitialized() const {
  return true;
}

void GatingSet::InternalSwap(GatingSet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  samplename_.InternalSwap(&other->samplename_);
  trans_tbl_.InternalSwap(&other->trans_tbl_);
  gtrans_.InternalSwap(&other->gtrans_);
  guid_.Swap(&other->guid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cytolib_verion_.Swap(&other->cytolib_verion_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pb_verion_.Swap(&other->pb_verion_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  h5_verion_.Swap(&other->h5_verion_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GatingSet, globallintrans_)
      + sizeof(GatingSet::globallintrans_)
      - PROTOBUF_FIELD_OFFSET(GatingSet, globalbiexptrans_)>(
          reinterpret_cast<char*>(&globalbiexptrans_),
          reinterpret_cast<char*>(&other->globalbiexptrans_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GatingSet::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::paramRange* Arena::CreateMaybeMessage< ::pb::paramRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::paramRange >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::rangeGate* Arena::CreateMaybeMessage< ::pb::rangeGate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::rangeGate >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::paramPoly* Arena::CreateMaybeMessage< ::pb::paramPoly >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::paramPoly >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::polygonGate* Arena::CreateMaybeMessage< ::pb::polygonGate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::polygonGate >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::coordinate* Arena::CreateMaybeMessage< ::pb::coordinate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::coordinate >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ellipseGate* Arena::CreateMaybeMessage< ::pb::ellipseGate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::ellipseGate >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::BOOL_GATE_OP* Arena::CreateMaybeMessage< ::pb::BOOL_GATE_OP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::BOOL_GATE_OP >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::boolGate* Arena::CreateMaybeMessage< ::pb::boolGate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::boolGate >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::clusterGate* Arena::CreateMaybeMessage< ::pb::clusterGate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::clusterGate >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::quadGate* Arena::CreateMaybeMessage< ::pb::quadGate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::quadGate >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::gate* Arena::CreateMaybeMessage< ::pb::gate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::gate >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::POPSTATS* Arena::CreateMaybeMessage< ::pb::POPSTATS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::POPSTATS >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::calibrationTable* Arena::CreateMaybeMessage< ::pb::calibrationTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::calibrationTable >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::biexpTrans* Arena::CreateMaybeMessage< ::pb::biexpTrans >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::biexpTrans >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::fasinhTrans* Arena::CreateMaybeMessage< ::pb::fasinhTrans >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::fasinhTrans >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::scaleTrans* Arena::CreateMaybeMessage< ::pb::scaleTrans >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::scaleTrans >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::flinTrans* Arena::CreateMaybeMessage< ::pb::flinTrans >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::flinTrans >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::logTrans* Arena::CreateMaybeMessage< ::pb::logTrans >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::logTrans >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::logGML2Trans* Arena::CreateMaybeMessage< ::pb::logGML2Trans >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::logGML2Trans >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::logicleTrans* Arena::CreateMaybeMessage< ::pb::logicleTrans >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::logicleTrans >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::transformation* Arena::CreateMaybeMessage< ::pb::transformation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::transformation >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::trans_pair* Arena::CreateMaybeMessage< ::pb::trans_pair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::trans_pair >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::trans_local* Arena::CreateMaybeMessage< ::pb::trans_local >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::trans_local >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::POPINDICES* Arena::CreateMaybeMessage< ::pb::POPINDICES >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::POPINDICES >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::nodeProperties* Arena::CreateMaybeMessage< ::pb::nodeProperties >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::nodeProperties >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::treeNodes* Arena::CreateMaybeMessage< ::pb::treeNodes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::treeNodes >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::populationTree* Arena::CreateMaybeMessage< ::pb::populationTree >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::populationTree >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::COMP* Arena::CreateMaybeMessage< ::pb::COMP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::COMP >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::PARAM* Arena::CreateMaybeMessage< ::pb::PARAM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::PARAM >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::GatingHierarchy* Arena::CreateMaybeMessage< ::pb::GatingHierarchy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::GatingHierarchy >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CytoFrame* Arena::CreateMaybeMessage< ::pb::CytoFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::CytoFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::TRANS_TBL* Arena::CreateMaybeMessage< ::pb::TRANS_TBL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::TRANS_TBL >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::GatingSet* Arena::CreateMaybeMessage< ::pb::GatingSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::GatingSet >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
